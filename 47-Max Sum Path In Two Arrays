/*
Example:

Consider the arrays:
    A = [1, 5, 10, 15, 20, 25]
    B = [2, 5, 7, 15, 18, 30]

Common elements: [5, 15]

All possible valid paths (switching allowed only at common elements):

--- A-origin Paths ---
1. Path A1: Stay entirely in A  
   → 1 → 5 → 10 → 15 → 20 → 25  
   → Sum: 76

2. Path A2: Start in A, switch to B at 5, then switch back to A at 15  
   → 1 → 5 (B) → 7 → 15 (A) → 20 → 25  
   → Sum: 1 + 5 + 7 + 15 + 20 + 25 = 73

3. Path A3: Start in A, switch to B at 5, stay in B until end  
   → 1 → 5 (B) → 7 → 15 → 18 → 30  
   → Sum: 76

4. Path A4: Start in A, switch to B at 15 only  
   → 1 → 5 → 10 → 15 (B) → 18 → 30  
   → Sum: 1 + 5 + 10 + 15 + 18 + 30 = 79 ✅

--- B-origin Paths ---
5. Path B1: Stay entirely in B  
   → 2 → 5 → 7 → 15 → 18 → 30  
   → Sum: 77

6. Path B2: Start in B, switch to A at 5, then switch back to B at 15  
   → 2 → 5 (A) → 10 → 15 (B) → 18 → 30  
   → Sum: 80 ✅

7. Path B3: Start in B, switch to A at 5, stay in A until end  
   → 2 → 5 (A) → 10 → 15 → 20 → 25  
   → Sum: 77

8. Path B4: Start in B, stay in B until 15, then switch to A  
   → 2 → 5 → 7 → 15 (A) → 20 → 25  
   → Sum: 2 + 5 + 7 + 15 + 20 + 25 = 74 ✅
*/

class Solution {
    public int maxPathSum(List<Integer> arr1, List<Integer> arr2) {
        int i = 0, j = 0;
        int sum1 = 0;  // Accumulates sum of elements from arr1 after the last common element
        int sum2 = 0;  // Accumulates sum of elements from arr2 after the last common element
        int maxSumPathSoFar = 0;  // Stores the maximum score collected so far

        // Traverse both arrays simultaneously
        while (i < arr1.size() && j < arr2.size()) {
            /*
             * Since both arrays are sorted, when elements at i and j differ:
             * - Move forward on the array with the smaller current element,
             *   accumulating its value in the corresponding sum.
             * This is done in the hope of eventually reaching a common value where we can switch paths optimally. 
             */
            if (arr1.get(i) < arr2.get(j)) {
                sum1 += arr1.get(i++);
            } else if (arr2.get(j) < arr1.get(i)) {
                sum2 += arr2.get(j++);
            } else {
                /*
                 * When we find a common element:
                 * - Add the maximum of the two sums collected so far plus the common element value to maxSumPathSoFar.
                 * - Reset sum1 and sum2 to zero because we have "switched" paths.
                 * - Move both pointers forward.
                 */
                maxSumPathSoFar += Math.max(sum1, sum2) + arr1.get(i);
                sum1 = 0;
                sum2 = 0;
                i++;
                j++;
            }
        }

        // Add remaining elements from arr1 if any
        while (i < arr1.size()) {
            sum1 += arr1.get(i++);
        }

        // Add remaining elements from arr2 if any
        while (j < arr2.size()) {
            sum2 += arr2.get(j++);
        }

        // Add the maximum of the remaining sums to the final result
        maxSumPathSoFar += Math.max(sum1, sum2);

        return maxSumPathSoFar;
    }
}
