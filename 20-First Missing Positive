//Bruteforce Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
        // Step 1: Store all numbers in a HashSet for fast O(1) lookups
        Set<Integer> set = Arrays.stream(arr).boxed().collect(Collectors.toSet());

        // Step 2: Iterate from 1 to n (length of array) and check which is the first number not in the set
        for (int num = 1; num <= arr.length; num++) {
            if (!set.contains(num)) {
                return num; // Found the first missing positive number
            }
        }

        // Step 3: If all numbers from 1 to n are present, the missing number must be n + 1
        return arr.length + 1;
    }
}


//Good Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
        /*
         * Step 1: Segregate the array so that all non-positive numbers (â‰¤ 0)
         *         are moved to the left side, and all positive numbers are
         *         on the right. This helps us focus only on positive numbers
         *         when finding the smallest missing positive.
         */
        int firstPositiveIndex = segregate(arr);

        /*
         * Step 2: Sort only the positive portion of the array.
         * This ensures that positive numbers are in increasing order,
         * which helps us identify the first missing positive efficiently.
         */
        Arrays.sort(arr, firstPositiveIndex, arr.length);

        int expected = 1; // Smallest positive number expected next
        int lastSeenIndex = -1; // Tracks the last non-duplicate index processed

        for (int i = firstPositiveIndex; i < arr.length; i++) {
            // Skip duplicates to avoid redundant processing
            if (lastSeenIndex != -1 && arr[i] == arr[lastSeenIndex]) {
                continue;
            }

            // If the current number doesn't match the expected value, we have found the missing positive number
            if (arr[i] != expected) {
                return expected;
            }

            // Update lastSeenIndex and increment expected value
            lastSeenIndex = i;
            expected++;
        }

        /*
         * If all positive numbers from 1 to the end of the array are present
         * in contiguous order, then the first missing positive is the next
         * expected number.
         */
        return expected;
    }

    // Moves non-positive numbers to the front and returns index where positives start
    private int segregate(int[] arr) {
        int positiveIndex = 0;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] <= 0) {
                swap(arr, i, positiveIndex);
                positiveIndex++;
            }
        }

        return positiveIndex; // First index where a positive number starts
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Better Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
        // Step 1: Move all non-positive numbers to the beginning of the array. 'positiveStart' will now point to the first positive number in the array.
        int positiveStart = segregate(arr);

        // Step 2: Find the first missing positive number in the positive segment
        return firstMissingPositive(arr, positiveStart);
    }

    private int firstMissingPositive(int[] arr, int start) {
        int size = arr.length - start; // Size of the subarray with positive numbers
        boolean[] visited = new boolean[size + 1]; // Boolean marker array to track present values

        // Mark the visited positive numbers in the range [1, size]
        for (int i = start; i < arr.length; i++) {
            if (arr[i] <= size) {
                visited[arr[i]] = true;
            }
        }

        // Return the first num such that 'num' is missing from the array
        for (int num = 1; num <= size; num++) {
            if (!visited[num]) {
                return num;
            }
        }

        // If all numbers from 1 to size are present, then the missing number is size + 1
        return size + 1;
    }

    private int segregate(int[] arr) {
        int positiveIndex = 0; // Tracks the position for the next non-positive number

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] <= 0) {
                swap(arr, i, positiveIndex);
                positiveIndex++;
            }
        }

        // Returns the index from where positive numbers start
        return positiveIndex;
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Optimal Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
        int positiveStart = segregate(arr);
        return firstMissingPositive(arr, positiveStart);
    }

    private int firstMissingPositive(int[] arr, int start) {
        int size = arr.length - start; // Number of positive elements
        /*
          Important test cases : 
          arr[]= [1,1] 
          Output: 2
        
          arr[] =[-4,-1,-8,-1,0,2,4,1,9,1]
          Output: 3
        */
        for (int i = start; i < arr.length; i++) {
            int val = Math.abs(arr[i]); // Use absolute value in case already negated
            // Mark the index (start + val - 1) as visited by making it negative
            int targetIndex = start + val - 1;
            if (val <= size && arr[start + val - 1] > 0) {
                arr[targetIndex] = -1 * arr[targetIndex]; // Mark as visited
            }
        }

        // Find the first index which is not marked (i.e., still positive) That means the number (index - start + 1) is missing
        for (int num = start; num < arr.length; num++) {
            if (arr[num] > 0) {
                return num - start + 1;
            }
        }

        return size + 1;
    }

    private int segregate(int[] arr) {
        int positiveIndex = 0;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] <= 0) {
                swap(arr, i, positiveIndex);
                positiveIndex++;
            }
        }

        return positiveIndex;
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
