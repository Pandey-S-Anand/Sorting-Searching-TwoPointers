//Naive Approach

class Solution {
    public int[] smallerNumbersThanCurrent(int[] arr) {
        // Step 1: Clone the original array to preserve the input array for reference
        int[] sortedCopy = arr.clone();

        // Step 2: Sort the copied array to enable binary search
        Arrays.sort(sortedCopy);

        /* Step 3:
         For each element in the original array, find the first index (lower bound)
         of its value in the sorted array — this index will represent the count of numbers
         smaller than the current element
        */
        for (int i = 0; i < arr.length; i++) {
            arr[i] = firstIndex(sortedCopy, arr[i]);
        }

        // Step 4: Return the modified array with counts
        return arr;
    }

    private int firstIndex(int[] arr, int key) {
        int low = 0, high = arr.length - 1, firstIndex = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // If key found, move to left side to find first occurrence
            if (arr[mid] == key) {
                firstIndex = mid;
                high = mid - 1;
            } else if (key > arr[mid]) {
                low = mid + 1;
            } else { // if (key < arr[mid])
                high = mid - 1;
            }
        }

        return firstIndex;
    }
}


//Better Approach

class Solution {
    public int[] smallerNumbersThanCurrent(int[] arr) {
        // Step 1: Clone the original array to avoid modifying it during sorting
        int[] sortedArray = arr.clone();

        // Step 2: Sort the cloned array
        Arrays.sort(sortedArray);

        // Step 3: Use a HashMap to store the first occurrence index of each number
        // This index represents how many numbers are strictly smaller than that number
        Map<Integer, Integer> valueIndexMap = new HashMap<>();

        for (int i = 0; i < sortedArray.length; i++) {
            // Only store the index of the first occurrence of each unique number
            valueIndexMap.putIfAbsent(sortedArray[i], i);
        }

        // Step 4: Build the result array by mapping each original element to its index in sorted array
        for (int i = 0; i < arr.length; i++) {
            arr[i] = valueIndexMap.get(arr[i]);
        }

        return arr;
    }
}


//Optimal Approach (Inspired By Count Sort)

/*
    arr[] = {1, 5, 8, 2, 3, 5, 8, 1, 8}

    After sorting, the array would look like:
    sorted[] = {1, 1, 2, 3, 5, 5, 8, 8, 8}

    Step 1 - Frequency count:
    Index:     0  1  2  3  4  5  6  7  8
    count[] = {0, 2, 1, 1, 0, 2, 0, 0, 3}

    Step 2 - Prefix sum (count[i] += count[i - 1]):
    Index:     0  1  2  3  4  5  6  7  8
    count[] = {0, 2, 3, 4, 4, 6, 6, 6, 9}

    ➤ Interpretation:

    1. For values that exist in the array:
       - count[val] tells the position (index + 1) in the sorted array where the **last occurrence** of 'val' appears.
       - It also tells how many elements are **less than or equal to** 'val' in the original array. i.e count[val] will store how many numbers are ≤ val
       - So, count[val - 1] gives the number of elements that are **strictly smaller** than 'val'.

       Examples:
       - val = 1 → count[1] = 2 → last occurrence of 1 is at index 1 in sorted[], and 2 elements ≤ 1.
       - val = 2 → count[2] = 3 → last at index 2, and 3 elements ≤ 2.
       - val = 5 → count[5] = 6 → last at index 5, and 6 elements ≤ 5.
       - val = 8 → count[8] = 9 → last at index 8, and 9 elements ≤ 8.

    2. For values that are **not present** in the array:
       - The value at count[val] will **carry forward** the same count as the most recent lower value that was present.
       - In other words, count[val] = last known "last occurrence position" of the most recent val < current val that exists in the array.

       Example:
       - val = 4 → not in array, but count[4] = 4 → same as count[3] (last present value).
       - val = 6 → not in array, count[6] = 6 → same as count[5].
       - val = 7 → not in array, count[7] = 6 → same as count[6].

       This behavior ensures prefix sums remain correct and cumulative, even for missing values.
*/

class Solution {
    public int[] smallerNumbersThanCurrent(int[] arr) {
        int[] count = new int[101]; // Since 0 <= arr[i] <= 100, we use a fixed size array

        // Step 1: Count frequency of each number in the array
        for (int val : arr) {
            count[val]++;
        }

        // Step 2: Convert count[] to prefix sum
        for (int num = 1; num <= 100; num++) {
            count[num] += count[num - 1];
        }

        // Step 3: For each element in arr, find how many numbers are smaller than it
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0) {
                arr[i] = 0; // No number can be smaller than 0
            } else {
                arr[i] = count[arr[i] - 1]; // Count of numbers strictly less than arr[i]
            }
        }

        return arr;
    }
}
