/*
    Mathematical Explanation:

    The equation is given as:
    a^2 + b^2 = c

    - Possible values of 'a' are 0, 1, 2, 3, 4, 5, 6... 
      (Note: Even if 'a' is negative, a^2 remains the same).
      Hence, the possible values of a^2 are 0, 1, 4, 9, 16, 25, 36...

    - Similarly, possible values of 'b' are 0, 1, 2, 3, 4, 5, 6... 
      (Note: Even if 'b' is negative, b^2 remains the same).
      Hence, the possible values of b^2 are 0, 1, 4, 9, 16, 25, 36...

    Observation:
    All possible values of a^2 and b^2 are perfect squares.
    We already know how to check if a number is a perfect square.

    Deriving the Condition:

    - The minimum possible value of b^2 is 0:
      This gives the maximum possible value of a^2 as a^2 = c.
      Hence, the condition becomes: a^2 <= c or a <= Math.sqrt(c).

    - Similarly, the minimum possible value of a^2 is 0:
      This gives the maximum possible value of b^2 as b^2 = c.
      Hence, the condition becomes: b^2 <= c or b <= Math.sqrt(c).

    Conclusion:
    - Minimum possible value of a = 0
    - Minimum possible value of b = 0
    - Maximum possible value of a = Math.sqrt(c)
    - Maximum possible value of b = Math.sqrt(c)
*/

class Solution {
    public boolean judgeSquareSum(int c) {
        // We initialize `a` with its **minimum possible value (0)**  and `b` with its **maximum possible value (sqrt(c))**
        int a = 0, b = (int) Math.sqrt(c);

        while (a <= b) {
            long sumOfSqr = (long) (a * a) + (long) (b * b);

            if (sumOfSqr == c) {
                return true; // Found a valid pair (a, b) such that a^2 + b^2 = c
            }

            if (sumOfSqr > c) {
                b--; // Reduce the larger square to lower the total
            } else {
                a++; // Increase the smaller square to increase the total
            }
        }

        return false; // No such pair exists
    }
}
