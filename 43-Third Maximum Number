//Bruteforce Approach

class Solution {
    public int thirdMax(int[] arr) {
        // Sort the array in ascending order
        Arrays.sort(arr);
        // Removes duplicates from the sorted array in-place and get the new size of distinct elements
        int newSize = removeDuplicates(arr);

        // If less than 3 distinct elements, return the largest element
        if (newSize < 3) {
            return arr[newSize - 1]; // last element is max
        }

        // Otherwise, return the 3rd maximum element
        return arr[newSize - 3];
    }

    private int removeDuplicates(int[] arr) {
        int j = 0;

        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] != arr[i + 1]) {
                arr[j++] = arr[i];
            }
        }

        arr[j++] = arr[arr.length - 1];

        return j;
    }
}



//Better Approach

class Solution {
    public int thirdMax(int[] arr) {
        TreeSet<Integer> set = new TreeSet<>();

        // Add all unique elements to the TreeSet (sorted ascending)
        for (int num : arr) {
            set.add(num);
        }

        // If we have at least 3 unique elements, remove the largest two elements to get the third max at the end
        if (set.size() >= 3) {
            set.pollLast(); // remove largest
            set.pollLast(); // remove second largest
        }

        // The last element now is either the third max or the maximum if fewer than 3 unique elements
        return set.pollLast();
    }
}



//Optimal Approach

class Solution {
    public int thirdMax(int[] arr) {
        // Use long to avoid confusion with Integer.MIN_VALUE present in the array
        long max = Long.MIN_VALUE;
        long secondMax = Long.MIN_VALUE;
        long thirdMax = Long.MIN_VALUE;

        for (int i = 0; i < arr.length; i++) {
            int num = arr[i];

            // Skip duplicates: if num is already max, secondMax or thirdMax, ignore
            if (num == max || num == secondMax || num == thirdMax) {
                continue;
            }

            if (num > max) {
                // New max found; shift current max and secondMax down
                thirdMax = secondMax;
                secondMax = max;
                max = num;
            } else if (num > secondMax) {
                // New secondMax found; shift secondMax down to thirdMax
                thirdMax = secondMax;
                secondMax = num;
            } else if (num > thirdMax) {
                // New thirdMax found
                thirdMax = num;
            }
        }

        // If thirdMax is unchanged, it means less than 3 distinct elements, so return max; otherwise, return thirdMax
        return thirdMax == Long.MIN_VALUE ? (int) max : (int) thirdMax;
    }
}
