//Bruteforce Approach

class Solution {
    public int thirdMax(int[] arr) {
        // Sort the array in ascending order
        Arrays.sort(arr);
        // Removes duplicates from the sorted array in-place and get the new size of distinct elements
        int newSize = removeDuplicates(arr);

        // If less than 3 distinct elements, return the largest element
        if (newSize < 3) {
            return arr[newSize - 1]; // last element is max
        }

        // Otherwise, return the 3rd maximum element
        return arr[newSize - 3];
    }

    private int removeDuplicates(int[] arr) {
        int j = 0;

        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] != arr[i + 1]) {
                arr[j++] = arr[i];
            }
        }

        arr[j++] = arr[arr.length - 1];

        return j;
    }
}



//Better Approach

class Solution {
    public int thirdMax(int[] arr) {
        // TreeSet with descending order to keep elements sorted in reverse (largest to smallest)
        TreeSet<Integer> set = new TreeSet<>((num1, num2) -> Integer.compare(num2, num1));

        // Step 1: Add all elements to TreeSet — automatically removes duplicates and keeps them sorted descending
        for (int num : arr) {
            set.add(num);
        }

        /*
         * Step 2:
         * If the set contains at least 3 distinct numbers, we remove the largest two.
         * The third element (next largest) will now be at the front.
         */
        if (set.size() >= 3) {
            set.pollFirst(); // Remove 1st largest
            set.pollFirst(); // Remove 2nd largest
        }

        /*
         * Step 3:
         * Either return the 3rd distinct maximum (if ≥ 3 unique numbers),
         * or return the overall maximum (if < 3 unique numbers).(arr[] contains at least one element as per problem constraints)
         */
        return set.pollFirst();
    }
}



//Optimal Approach

class Solution {
    public int thirdMax(int[] arr) {
        // Indices to track the max, second max, and third max elements (distinct)
        int maxIndex = -1, secondMaxIndex = -1, thirdMaxIndex = -1;

        for (int i = 0; i < arr.length; i++) {
            // Skip duplicates: if num is already max, secondMax or thirdMax, ignore it
            if ((maxIndex != -1 && arr[i] == arr[maxIndex]) || (secondMaxIndex != -1 && arr[i] == arr[secondMaxIndex]) || (thirdMaxIndex != -1 && arr[i] == arr[thirdMaxIndex])) {
                continue;
            }

            // New maximum found
            if (maxIndex == -1 || arr[i] > arr[maxIndex]) {
                // Shift down previous max and second max
                thirdMaxIndex = secondMaxIndex;
                secondMaxIndex = maxIndex;
                maxIndex = i;
            } else if (secondMaxIndex == -1 || arr[i] > arr[secondMaxIndex]) { // New second maximum found
                // Shift down previous second max
                thirdMaxIndex = secondMaxIndex;
                secondMaxIndex = i;
            } else if (thirdMaxIndex == -1 || arr[i] > arr[thirdMaxIndex]) { // New third maximum found
                thirdMaxIndex = i;
            }
        }

        // Return third max if found, otherwise return the maximum
        return thirdMaxIndex == -1 ? arr[maxIndex] : arr[thirdMaxIndex];
    }
}
