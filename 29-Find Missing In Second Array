//Bruteforce Approach

class Solution {
    public ArrayList<Integer> findMissing(int[] arr1, int[] arr2) {
        // This list will store the missing elements
        ArrayList<Integer> missing = new ArrayList<>();

        // Store all elements of arr2 in a HashSet for fast lookup (O(1) average time)
        Set<Integer> set = Arrays.stream(arr2).boxed().collect(Collectors.toSet());

        // Check every element in arr1 â€” if not found in arr2 (set), it's missing
        for (int val : arr1) {
            if (!set.contains(val)) {
                missing.add(val);
            }
        }

        return missing;
    }
}



// Optimal Approach

class Solution {
    public ArrayList<Integer> findMissing(int[] arr1, int[] arr2) {
        ArrayList<Integer> missing = new ArrayList<>();

        // Sort both arrays to apply two-pointer technique
        Arrays.sort(arr1);
        Arrays.sort(arr2);

        int i = 0, j = 0;

        // Use two pointers to scan both arrays
        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] == arr2[j]) {
                // Element is present in both, move both pointers
                i++;
                j++;
            } else if (arr1[i] < arr2[j]) {
                // arr1[i] is not in arr2 since arr2[j] is already greater
                missing.add(arr1[i]);
                i++;
            } else {
                // arr2[j] is smaller, move j to catch up
                j++;
            }
        }

        // Add remaining elements from arr1 (if arr2 is exhausted)
        while (i < arr1.length) {
            missing.add(arr1[i]);
            i++;
        }

        return missing;
    }
}
