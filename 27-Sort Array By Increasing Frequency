class Solution {
    public int[] frequencySort(int[] arr) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        
        // Step 1: Count frequency of each element
        for (int num : arr) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        // Step 2: Convert the frequency map into a list of entries (key-value pairs)
        List<Map.Entry<Integer, Integer>> freqList = new ArrayList<>(frequencyMap.entrySet());

        // Step 3: Sort the list based on custom comparator
        Collections.sort(freqList, (entry1, entry2) -> {
            int freq1 = entry1.getValue(); // frequency of first number
            int freq2 = entry2.getValue(); // frequency of second number

            // Primary sorting: Increasing order of frequency
            if (freq1 != freq2) {
                return Integer.compare(freq1, freq2);
            }

            // Secondary sorting (tie-breaker): Decreasing order of the number
            return Integer.compare(entry2.getKey(), entry1.getKey());
        });

        // Step 4: Reconstruct the result array based on sorted frequency list
        int i = 0, k = 0;

        while (i < freqList.size()) {
            Map.Entry<Integer, Integer> entry = freqList.get(i);
            int num = entry.getKey(); // the actual number
            int freq = entry.getValue(); // how many times it occurs

            // Fill the number 'freq' times into the result array
            while (freq-- > 0) {
                arr[k++] = num;
            }

            i++;
        }

        // Return the sorted array
        return arr;
    }
}


//Aliter

class Solution {
    public int[] frequencySort(int[] arr) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();

        // Step 1: Count frequency of each element in the input array
        for (int num : arr) {
            frequencyMap.put(num, frequencyMap.getOrDefault(num, 0) + 1);
        }

        // Step 2: Create a min-heap (priority queue) with custom comparator
        Queue<Map.Entry<Integer, Integer>> freqHeap = new PriorityQueue<>((entry1, entry2) -> {
            int freq1 = entry1.getValue();
            int freq2 = entry2.getValue();

            // If frequencies are different, sort by increasing frequency (lower frequency comes first)
            if (freq1 != freq2) {
                return Integer.compare(freq1, freq2);
            }

            // If frequencies are same, higher/greater number number comes first
            return Integer.compare(entry2.getKey(), entry1.getKey());
        });

        // Step 3: Add all entries of frequencyMap into the priority queue
        freqHeap.addAll(frequencyMap.entrySet());

        // Step 4: Reconstruct the result array using the sorted priority queue
        int k = 0;

        while (!freqHeap.isEmpty()) {
            Map.Entry<Integer, Integer> entry = freqHeap.poll(); // Extract element with highest priority
            int num = entry.getKey(); // The actual number
            int freq = entry.getValue(); // Frequency of number

            // Place the number 'freq' times in the result array
            while (freq-- > 0) {
                arr[k++] = num;
            }
        }

        // Step 5: Return the modified array
        return arr;
    }
}
