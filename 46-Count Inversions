//Bruteforce Approach

class Solution {
    long inversionCount(int arr[]) {
        long inversionCount = 0;
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[i] > arr[j]) {
                    inversionCount++;
                }
            }
        }
        return inversionCount;
    }
}


//Optimal Approach

class Solution {
    long inversionCount(int arr[]) {
        return mergeSort(arr, 0, arr.length - 1);
    }

    private long mergeSort(int arr[], int lb, int ub) {
        long inversionCount = 0;
        if (lb < ub) {
            int mid = lb + (ub - lb) / 2;
            inversionCount += mergeSort(arr, lb, mid);
            inversionCount += mergeSort(arr, mid + 1, ub);
            inversionCount += merge(arr, lb, mid, ub);
        }
        return inversionCount;
    }

    private long merge(int arr[], int lb, int mid, int ub) {
        long inversionCount = 0;
        int i = 0, j = 0, k = lb, leftSize = (mid - lb + 1), rightSize = (ub - mid);
        int[] left = new int[leftSize];
        int[] right = new int[rightSize];

        System.arraycopy(arr, lb, left, 0, leftSize);
        System.arraycopy(arr, mid + 1, right, 0, rightSize);

        while (i < leftSize && j < rightSize) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
                inversionCount += (leftSize - i);
            }
        }

        System.arraycopy(left, i, arr, k, leftSize - i);
        System.arraycopy(right, j, arr, k, rightSize - j);

        return inversionCount;
    }
}
