//Bruteforce Approach

class Solution {
    public int search(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return i;
            }
        }

        return -1; // Target not found
    }
}



//Good Approach

class Solution {
    public int search(int[] arr, int target) {
        int partitionIndex = findPartitionIndex(arr);
        // Try to find the target in the first partition
        int targetIndex = binarySearch(arr, 0, partitionIndex, target);

        if (targetIndex != -1) {
            return targetIndex;
        }
        // Try to find the target in the second partition
        return binarySearch(arr, partitionIndex + 1, arr.length - 1, target);
    }

    private int binarySearch(int[] arr, int low, int high, int target) {
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                return mid;
            } else if (target < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return -1;
    }

    private int findPartitionIndex(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                return i;
            }
        }
        // If no partition index is found, the array is sorted in ascending order and not rotated
        return arr.length - 1;
    }
}



//Better Approach

class Solution {
    public int search(int[] arr, int target) {
        int partitionIndex = findPartitionIndex(arr);
        // Try to find the target in the first partition
        int targetIndex = binarySearch(arr, 0, partitionIndex, target);

        if (targetIndex != -1) {
            return targetIndex;
        }
        // Try to find the target in the second partition
        return binarySearch(arr, partitionIndex + 1, arr.length - 1, target);
    }

    private int binarySearch(int[] arr, int low, int high, int target) {
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                return mid;
            } else if (target < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return -1;
    }

    private int findPartitionIndex(int[] arr) {
        /*
          Note :
          1: If the array(with distinct elements) is sorted and rotated by any position
             (either left or right) the first element will always be
             greater than the last element.
          
          2: If the array(with distinct elements) is sorted and not rotated the
             first element will always be less than the last element. 

          3: Why mid never reaches arr.length - 1 ?
             When (arr[mid] > arr[mid + 1]),it means mid points to the maximum element in the rotated sorted array it is the rotation point.
             Since the array is rotated, mid will not be the last element (arr.length - 1), because after rotation, elements wrap 
             around to the beginning of the array. Thus, mid is always less than arr.length - 1.
         */
        if (arr.length == 1 || arr[0] < arr[arr.length - 1]) {
            return arr.length - 1;
        }

        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Check if mid is the partition point
            if (arr[mid] > arr[mid + 1]) {
                return mid;
            }

            // Decide which half to continue the search in
            /*
               Why arr[low] <= arr[mid] not arr[low] < arr[mid] ?  given the array contains distinct elements !
               Since the array contains distinct elements, arr[low] will never be equal to arr[mid] unless low == mid.
               When low == mid, the condition arr[low] <= arr[mid] ensures that we do not miss the target and adjust the search bounds properly.
               Ex: 
               nums =[3,1]
               partitionIndex : 0

               Ex:
               nums =[15,16,19,20,25,1,3,4,5,7,10,14] 
               partitionIndex : 4
            */
            if (arr[low] <= arr[mid]) {
                // Left half is sorted, so the rotation point must be in the right half
                low = mid + 1;
            } else {
                // Right half is sorted, so the rotation point must be in the left half
                high = mid - 1;
            }
        }

        // This return statement is never reached
        return -1;
    }
}



//Optimal Approach

class Solution {
    public int search(int[] arr, int target) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                return mid;
            }

            // Determine which part is sorted
            /*
               Why arr[low] <= arr[mid] not arr[low] < arr[mid] ?  given the array contains distinct elements !
               Since the array contains distinct elements, arr[low] will never be equal to arr[mid] unless low == mid.
               When low == mid, the condition arr[low] <= arr[mid] ensures that we do not miss the target and adjust the search bounds properly.
               Ex: 
               nums =[3,1] and target = 1
               Expected Output : 1

               Ex:
               nums =[15,16,19,20,25,1,3,4,5,7,10,14] and target = 25
               Expected Output : 4
            */
            if (arr[low] <= arr[mid]) {
                // Left part is sorted
                if (target >= arr[low] && target <= arr[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else {
                // Right part is sorted
                if (target >= arr[mid] && target <= arr[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }

        return -1; // Target not found
    }
}
