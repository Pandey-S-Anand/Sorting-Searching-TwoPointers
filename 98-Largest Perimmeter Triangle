// Logic : Sum of any two sides of a triangle is always greater than the third side. i.e a>(b+c) && b>(a+c) && c>(a+b)


//Bruteforce Approach

class Solution {
    public int largestPerimeter(int[] arr) {
        int max = 0;
        for (int i = 0; i < arr.length - 2; i++) {
            for (int j = i + 1; j < arr.length - 1; j++) {
                for (int k = j + 1; k < arr.length; k++) {
                    if (arr[i] < (arr[j] + arr[k]) && arr[j] < (arr[i] + arr[k]) && arr[k] < (arr[i] + arr[j])) {
                        if ((arr[i] + arr[j] + arr[k]) > max) {
                            max = arr[i] + arr[j] + arr[k];
                        }
                    }
                }
            }
        }
        return max;
    }
}


//Optimal Approach

class Solution {
    public int largestPerimeter(int[] arr) {
        Arrays.sort(arr);

        for (int i = arr.length - 1; i >= 2; i--) {
            if ((arr[i - 1] + arr[i - 2]) > arr[i]) { // checking if the three sides form triangle
                return arr[i] + arr[i - 1] + arr[i - 2];
            }
        }

        return 0; // it is impossible to form any triangle of a non-zero area,so return 0
    }
}

/*
 * 1 <= arr[i] <= 10^6
 * 
 * we are not required to check for these 2 Conditions :
 * arr[i]+arr[i-1] > arr[i-2] and arr[i] + arr[i-2] > arr[i-1] so
 * 
 * Reason : arr[i-2]<=arr[i-1]<=arr[i] as Array is sorted
 * 
 * if(arr[i]>=arr[i-2]) then obv. arr[i]+arr[i-1]>=arr[i-2]
 * 
 * similarly,
 * 
 * if(arr[i]>=arr[i-1]) then obv. arr[i]+arr[i-2]>=arr[i-1]
 */
