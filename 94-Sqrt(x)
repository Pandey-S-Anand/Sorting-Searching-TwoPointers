//Bruteforce Approach

class Solution {
    public int mySqrt(int x) {
        return (int) Math.sqrt(x);
    }
}

// Optimal Approach

/*
 * 
 * sqrt(49)=7
 * In other words 7 is the squareRoot of 49 if(7*7) =49
 * 
 * SquareRoot of all non-negative Integers lies within the Range [0,number  itself] i.e 0<=sqrt(x)<=x
 * Number (N) Square root (√N)
 * 0 0.000
 * 1 1.000
 * 2 1.414
 * 3 1.732
 * 4 2.000
 * ....
 */

//Intuitive implementation

class Solution {
    public int mySqrt(int x) {
        return binarySearch(x);
    }

    public static int binarySearch(int x) {
        int low = 0, high = x, squareRoot = -1;

        while (low <= high) {
            long mid = low + (high - low) / 2;
            if ((mid * mid) == x) {
                squareRoot = (int) mid; // Exact square root found; the number is a perfect square.
                break;
            } else if ((mid * mid) < x) {
                squareRoot = (int) mid; // Update the closest approximate square root so far; this is maintained for non-perfect square numbers.
                low = (int) mid + 1;
            } else { // if(mid>(x/mid))
                high = (int) mid - 1;
            }
        }

        return squareRoot;
    }
}


// Optimal implementation

/* 
1. Key Observations:
   - No non-negative integer has a square root of 0, except for 0 itself (i.e., sqrt(0) = 0).
   - Similarly, no non-negative integer has a square root equal to the number itself, except for 1 (i.e., sqrt(1) = 1).
   - These special cases (0 and 1) are already handled. For all other numbers, the square root lies within the range [1, x - 1], i.e., 1 ≤ sqrt(x) ≤ (x - 1).

2. Important Test Case:
   - Input: x = 5
   - In this case, the control is not supposed to enter the `if` statement (`if ((x / mid) == mid) return mid;`) because this condition is only meant for perfect square numbers (and 5 is not a perfect square number).
   - Despite this, the code gives the correct output since we are concerned only with the integer part of the square root for non-perfect square numbers.
   - However, this code would fail if the task were to check whether a given number 'x' is a perfect square, as it would incorrectly return "true" for x = 5.
 */

class Solution {
    public int mySqrt(int x) {
        if (x == 0 || x == 1) {
            return x;
        }

        int low = 1, high = x - 1, squareRoot = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (mid == (x / mid)) {
                squareRoot = mid;
                break;
            } else if (mid < (x / mid)) {
                squareRoot = mid;
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return squareRoot;
    }
}
