//Bruteforce Approach

class Solution {
    public int mySqrt(int x) {
        return (int) Math.sqrt(x);
    }
}


// Optimal Approach

/*
 * 
 * sqrt(49)=7
 * In other words 7 is the squareRoot of 49 if(7*7) =49
 * 
 * SquareRoot of all non-negative Integers lies within the Range [0,number  itself] i.e 0<=sqrt(x)<=x
 * Number (N) Square root (âˆšN)
 * 0 0.000
 * 1 1.000
 * 2 1.414
 * 3 1.732
 * 4 2.000
 * ....
 */

class Solution {
    public int mySqrt(int x) {
        int low = 0, high = x, squareRoot = -1; // Stores the closest integer root found

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Use long to avoid overflow from mid * mid
            long square = (long) mid * mid;

            if (square == x) {
                return mid; // Perfect square root found
            } else if (square < x) {
                squareRoot = mid; // Store current mid as potential answer
                low = mid + 1; // Try finding a higher root
            } else {
                high = mid - 1; // Try lower half
            }
        }

        return squareRoot; // x is not a perfect square; return the floored result
    }
}
