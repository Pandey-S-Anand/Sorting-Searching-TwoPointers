/*
 * Problem Explanation:
 * ---------------------
 * This problem counts the minimum number of **adjacent swaps** required to sort an array.
 * It is directly related to counting the number of **inversions** in the array.
 * 
 * An inversion is defined as a pair (i, j) such that:
 *      - i < j
 *      - arr[i] > arr[j]
 * 
 * Why does inversion count = minimum number of swaps?
 * Because to fix each such pair (i, j), we must "bubble" the larger element ahead using swaps.
 * Each inversion contributes to exactly one swap in the worst case.
 *
 * Example:
 * --------
 * Input:  arr = {2, 20, 15, 6, 10}
 *
 * Reverse Pairs (Inversions):
 *     (20,15)
 *     (20,6)
 *     (20,10)
 *     (15,6)
 *     (15,10)
 * => 5 inversions = 5 minimum adjacent swaps required to sort the array.
 *
 * Note:
 * -----
 * - A sorted array (ascending) has 0 inversions.
 * - A descending sorted array has the maximum number of inversions.
 */
 
class Solution {
    int countSwaps(int arr[], int n) {
        return inversionCount(arr, 0, n - 1);
    }

    // Recursive function that divides the array and counts inversions
    private int inversionCount(int arr[], int low, int high) {
        int inversionCount = 0;

        if (low < high) {
            int mid = low + (high - low) / 2;

            // Count inversions in left half
            inversionCount += inversionCount(arr, low, mid);

            // Count inversions in right half
            inversionCount += inversionCount(arr, mid + 1, high);

            // Count cross-inversions while merging
            inversionCount += merge(arr, low, mid, high);
        }

        return inversionCount;
    }

    // Merges two sorted halves and counts cross-inversions
    private int merge(int[] arr, int low, int mid, int high) {
        int inversionCount = 0;

        int leftSize = mid - low + 1;
        int rightSize = high - mid;

        int[] left = new int[leftSize];
        int[] right = new int[rightSize];

        // Fill temp arrays
        for (int i = 0; i < leftSize; i++) {
            left[i] = arr[low + i];
        }

        for (int i = 0; i < rightSize; i++) {
            right[i] = arr[mid + 1 + i];
        }

        // Merge process
        int i = 0, j = 0, k = low;

        while (i < leftSize && j < rightSize) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                // All remaining elements in left[i...] are greater than right[j]
                inversionCount += (leftSize - i);
                arr[k++] = right[j++];
            }
        }

        while (i < leftSize) {
            arr[k++] = left[i++];
        }

        while (j < rightSize) {
            arr[k++] = right[j++];
        }

        return inversionCount;
    }
}
