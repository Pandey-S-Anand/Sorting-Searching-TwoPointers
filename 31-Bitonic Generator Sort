//Bruteforce Approach

class Solution {
    void bitonicGenerator(long arr[], int n) {
        int evenSize = (n % 2 == 0) ? (n / 2) : (n / 2) + 1;
        int oddSize = n / 2, even = 0, odd = 0;
        long[] evenIndexed = new long[evenSize];
        long[] oddIndexed = new long[oddSize];

        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                evenIndexed[even++] = arr[i];
            } else {
                oddIndexed[odd++] = arr[i];
            }
        }

        Arrays.sort(evenIndexed);
        Arrays.sort(oddIndexed);
        reverse(oddIndexed, 0, oddSize - 1);

        System.arraycopy(evenIndexed, 0, arr, 0, evenSize);
        System.arraycopy(oddIndexed, 0, arr, evenSize, oddSize);
    }

    private void reverse(long[] arr, int start, int end) {
        while (start < end) {
            swap(arr, start, end);
            start++;
            end--;
        }
    }

    private void swap(long[] arr, int i, int j) {
        long temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

// Optimal Approach

class Solution {
    void bitonicGenerator(long arr[], int n) {
        int evenIndexNumbers = segregateEvenOddIndices(arr, n);
        Arrays.sort(arr, 0, evenIndexNumbers);
        Arrays.sort(arr, evenIndexNumbers, n);
        reverse(arr, evenIndexNumbers, n - 1);
    }

    private int segregateEvenOddIndices(long[] arr, int n) {
        int oddIndexTracker = 1;
        for (int i = 2; i < n; i += 2) {
            swap(arr, i, oddIndexTracker);
            oddIndexTracker++;
        }
        return oddIndexTracker;
    }

    private void swap(long[] arr, int i, int j) {
        long temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    private void reverse(long[] arr, int start, int end) {
        while (start < end) {
            swap(arr, start, end);
            start++;
            end--;
        }
    }
}
