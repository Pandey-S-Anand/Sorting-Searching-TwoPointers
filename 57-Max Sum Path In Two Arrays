/*
Ex:

Consider the arrays:
	•	A = [1, 5, 10, 15, 20, 25]
	•	B = [2, 5, 7, 15, 18, 30]
Here, the common elements are 5 and 15.
Let's list all possible paths from the beginning of any array to the end of any of the arrays.

Possible Paths:
	1	Path 1: Stay entirely in A
	◦	1 -> 5 -> 10 -> 15 -> 20 -> 25
	◦	Sum: 76
	2	Path 2: Stay entirely in B
	◦	2 -> 5 -> 7 -> 15 -> 18 -> 30
	◦	Sum: 77
	3	Path 3: Start in A, switch to B at 5, then switch back to A at 15
	◦	1 -> 5 (switch to B) -> 7 -> 15 (switch to A) -> 20 -> 25
	◦	Sum: 1 + 5 + 7 + 15 + 20 + 25 = 73
	4	Path 4: Start in A, switch to B at 5, stay in B until the end
	◦	1 -> 5 (switch to B) -> 7 -> 15 -> 18 -> 30
	◦	Sum: 1 + 5 + 7 + 15 + 18 + 30 = 76
	5	Path 5: Start in B, switch to A at 5, then switch back to B at 15
	◦	2 -> 5 (switch to A) -> 10 -> 15 (switch to B) -> 18 -> 30
	◦	Sum: 2 + 5 + 10 + 15 + 18 + 30 = 80
	6	Path 6: Start in B, switch to A at 5, stay in A until the end
	◦	2 -> 5 (switch to A) -> 10 -> 15 -> 20 -> 25
	◦	Sum: 2 + 5 + 10 + 15 + 20 + 25 = 77
*/


class Solution {
    int maxPathSum(int arr1[], int arr2[]) {
        int i = 0, j = 0, maxSumPath = 0, sum1 = 0, sum2 = 0;

        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] < arr2[j]) {
                sum1 += arr1[i++];
            } else if (arr2[j] < arr1[i]) {
                sum2 += arr2[j++];
            } else {
                maxSumPath += Math.max(sum1, sum2) + arr1[i];
                sum1 = sum2 = 0;
                i++;
                j++;
            }
        }

        while (i < arr1.length) {
            sum1 += arr1[i++];
        }

        while (j < arr2.length) {
            sum2 += arr2[j++];
        }

        maxSumPath += Math.max(sum1, sum2);

        return maxSumPath;
    }
}
