//Bruteforce Approach

class Solution {
    public boolean areDisjoint(int[] arr1, int m, int[] arr2, int n) {
        for (int i = 0; i < m; i++) {
            if (linearSearch(arr1[i], arr2, n)) {
                return false;
            }
        }

        return true;
    }

    private boolean linearSearch(int key, int[] arr, int n) {
        int start = 0, end = n - 1;

        while (start <= end) {
            if (arr[start] == key || arr[end] == key) {
                return true;
            }
            start++;
            end--;
        }
        return false;
    }
}


// Improved Approach

class Solution {
    public boolean areDisjoint(int[] arr1, int m, int[] arr2, int n) {
        if (n > m) {
            return areDisjoint(arr2, n, arr1, m);
        }

        Arrays.sort(arr2);
        for (int i = 0; i < m; i++) {
            if (binarySearch(arr1[i], arr2, n)) {
                return false;
            }
        }
        return true;
    }

    private boolean binarySearch(int key, int[] arr, int n) {
        int low = 0, high = n - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == key) {
                return true;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else { // if(key>arr[mid])
                low = mid + 1;
            }
        }

        return false;// key doesnot exists
    }
}


// Better Approach

class Solution {
    public boolean areDisjoint(int[] arr1, int m, int[] arr2, int n) {
        Set<Integer> set = new HashSet<>();

        for (int val : arr1) {
            set.add(val);
        }

        for (int val : arr2) {
            if (set.contains(val)) {
                return false;
            }
        }

        return true;
    }
}


// Optimal Approach

class Solution {
    public boolean areDisjoint(int[] arr1, int m, int[] arr2, int n) {
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        return intersectionOfTwoSortedArray(arr1, m, arr2, n);
    }

    private boolean intersectionOfTwoSortedArray(int[] arr1, int m, int[] arr2, int n) {
        int i = 0, j = 0;

        while (i < m && j < n) {
            if (arr1[i] == arr2[j]) {
                return false;
            } else {
                int min = arr1[i] < arr2[j] ? arr1[i] : arr2[j];
                if (min == arr1[i]) {
                    i++;
                } else {
                    j++;
                }
            }
        }

        return true;
    }
}
