//Bruteforce Approach

public class Solution {
    public int searchInAlmostSorted(int[] arr, int n, int key) {
        for (int i = 0; i < n; i++) {
            if (arr[i] == key) {
                return i;
            }
        }
        // Element is not present in the array
        return -1;
    }
}

/*
Given that the array is sorted but an element can be moved to its adjacent positions, we can apply binary search with some tweaks to search for the target value in O(log n) time complexity:

First, compare the target value with all the 3 elements in the middle (since the middle element can be swapped with its adjacent elements).
If the target is equal to any of the middle 3 elements, then we return the corresponding index.
Otherwise, if target < arr[mid], then we can discard the upper half of the array and continue the search in the lower half by setting high=mid-2(since mid - 1 is already checked).
This is because all the elements after mid+2 (upper half of the array) will be greater than arr[mid] so no point searching for target in the upper half.
If target > arr[mid], then continue the search in the upper half of the array by setting start=mid+2(since mid + 1 is already checked).
This is because all the elements before mid-2 will be smaller than arr[mid] so we can discard the lower half of the array.
*/

//Optimal Approach

public class Solution {
    public int searchInAlmostSorted(int[] arr, int n, int key) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                return mid;
            } else if (mid > 0 && arr[mid - 1] == key) {
                return mid - 1;
            } else if (mid < arr.length - 1 && arr[mid + 1] == key) {
                return mid + 1;
            } else if (key < arr[mid]) {
                high = mid - 2;
            } else {
                low = mid + 2;
            }
        }

        // Element is not present in the array
        return -1;
    }
}
