//Bruteforce Approach

class Solution {
    static void reArrange(int[] arr, int n) {
        int[] even = new int[n / 2]; // To store even elements
        int[] odd = new int[n / 2];  // To store odd elements

        int evenIndex = 0, oddIndex = 0;

        // Step 1: Separate even and odd numbers
        for (int i = 0; i < n; i++) {
            if ((arr[i] % 2) == 0) {
                even[evenIndex++] = arr[i];
            } else {
                odd[oddIndex++] = arr[i];
            }
        }

        // Reset indices to reuse them for merging
        evenIndex = 0;
        oddIndex = 0;

        // Step 2: Rebuild the array with alternating even-odd positions
        for (int i = 0; i < n; i++) {
            arr[i] = (i % 2 == 0) ? even[evenIndex++] : odd[oddIndex++];
        }
    }
}



// Better Approach

class Solution {
    void reArrange(int[] arr, int n) {
        int evenIndex = 0; // Start from index 0 for even positions
        int oddIndex = 1;  // Start from index 1 for odd positions

        while (evenIndex < n && oddIndex < n) {
            // Skip evenIndex if it's already holding an even number
            while (evenIndex < n && (arr[evenIndex] % 2) == 0) {
                evenIndex += 2;
            }

            // Skip oddIndex if it's already holding an odd number
            while (oddIndex < n && (arr[oddIndex] % 2) == 1) {
                oddIndex += 2;
            }

            // If both indices are within bounds, swap mismatched values
            if (evenIndex < n && oddIndex < n) {
                swap(arr, evenIndex, oddIndex);
            }
        }
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


// Optimal Approach (Time Optimised) (Order Of Appearence is Maintained)

class Solution {
    static void reArrange(int[] arr, int n) {
        int[] rearrangedArray = new int[n];
        int evenIndex = 0, oddIndex = 1;

        for (int i = 0; i < n; i++) {
            if (arr[i] % 2 == 0) {
                rearrangedArray[evenIndex] = arr[i];  // Place even numbers at even indices
                evenIndex += 2;
            } else {
                rearrangedArray[oddIndex] = arr[i];   // Place odd numbers at odd indices
                oddIndex += 2;
            }
        }

        System.arraycopy(rearrangedArray, 0, arr, 0, n);
    }
}
