//Bruteforce Approach

class Solution {
    static void reArrange(int[] arr, int n) {
        int[] even = new int[n / 2];
        int[] odd = new int[n / 2];

        int evenIndex = 0, oddIndex = 0;

        for (int i = 0; i < n; i++) {
            if ((arr[i] % 2) == 0) {
                even[evenIndex++] = arr[i];
            } else {
                odd[oddIndex++] = arr[i];
            }
        }

        evenIndex = 0;
        oddIndex = 0;

        for (int i = 0; i < n; i++) {
            arr[i] = (i % 2 == 0) ? even[evenIndex++] : odd[oddIndex++];
        }
    }
}


// Better Approach

class Solution {
    static void reArrange(int[] arr, int n) {
        int evenIndex = 0, oddIndex = 1;

        while (evenIndex < n && oddIndex < n) {
            while (evenIndex < n && (arr[evenIndex] % 2) == 0) {
                evenIndex += 2;
            }

            while (oddIndex < n && (arr[oddIndex] % 2) == 1) {
                oddIndex += 2;
            }

            if (evenIndex < n && oddIndex < n) {
                swap(arr, evenIndex, oddIndex);
            }
        }
    }

    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


// Optimal Approach (Time Optimised) (Order Of Appearence is Maintained)

class Solution {
    static void reArrange(int[] arr, int N) {
        int[] rearrangedArray = new int[arr.length];
        int evenIndex = 0, oddIndex = 1;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] % 2 == 0) {
                rearrangedArray[evenIndex] = arr[i];  // Place even numbers at even indices
                evenIndex += 2;
            } else {
                rearrangedArray[oddIndex] = arr[i];   // Place odd numbers at odd indices
                oddIndex += 2;
            }
        }

        System.arraycopy(rearrangedArray, 0, arr, 0, arr.length);
    }
}


// Optimal Approach (Space Optimised) (Order Of Appearence is Maintained)

class Solution {
    static void reArrange(int[] arr, int n) {
        int wrongIndex = -1;// No Wrong Index

        for (int i = 0; i < n; i++) {
            if (wrongIndex != -1) {
                if ((arr[wrongIndex] % 2 == 0 && arr[i] % 2 != 0) || (arr[wrongIndex] % 2 != 0 && arr[i] % 2 == 0)) {
                    rightRotate(arr, wrongIndex, i);
                    if ((i - wrongIndex) == 1) {
                        wrongIndex = -1;
                    } else if ((i - wrongIndex) >= 2) {
                        wrongIndex += 2;
                    }
                }
            }

            if (wrongIndex == -1) {
                if (((i % 2) == 0 && arr[i] % 2 != 0) || ((i % 2) != 0 && arr[i] % 2 == 0)) {
                    wrongIndex = i;
                }
            }
        }
    }

    private static void rightRotate(int[] arr, int wrongIndex, int index) {
        int temp = arr[index];
        for (int i = index; i > wrongIndex; i--) {
            arr[i] = arr[i - 1];
        }
        arr[wrongIndex] = temp;
    }
}
