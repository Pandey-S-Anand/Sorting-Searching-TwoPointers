//Bruteforce Approach

class Solution {
    private List<String> subsequences;

    public boolean isSubsequence(String target, String str) {
        subsequences = new ArrayList<>();
        generateSubsequences(str, 0, new StringBuilder());

        for (String subsequence : subsequences) {
            if (subsequence.equals(target)) {
                return true;
            }
        }

        return false;
    }

    private void generateSubsequences(String str, int index, StringBuilder currentSubsequence) {
        if (index == str.length()) {
            subsequences.add(currentSubsequence.toString());
            return;
        }

        // Include element
        currentSubsequence.append(str.charAt(index));
        generateSubsequences(str, index + 1, currentSubsequence);
        // Exclude element
        currentSubsequence.deleteCharAt(currentSubsequence.length() - 1);
        generateSubsequences(str, index + 1, currentSubsequence);
    }
}

// Better Approach

class Solution {
    public boolean isSubsequence(String target, String str) {
        StringBuilder currentSubsequence = new StringBuilder();
        int totalSubsequences = 1 << str.length(); // x << y = x * 2^n

        for (int num = 0; num < totalSubsequences; num++) {
            for (int i = 0; i < str.length(); i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubsequence.append(str.charAt(i));
                }
            }

            if (currentSubsequence.toString().equals(target)) {
                return true;
            }
            currentSubsequence.setLength(0);
        }

        return false;
    }
}

// Optimal Approach

// Naive Implementation

class Solution {
    public boolean isSubsequence(String target, String str) {
        int targetIndex = 0, strIndex = 0;

        while (targetIndex < target.length() && strIndex < str.length()) {
            if (target.charAt(targetIndex) == str.charAt(strIndex)) {
                targetIndex++;
            }
            strIndex++;
        }

        return targetIndex == target.length();
    }
}

// Optimal Implementation

class Solution {
    public boolean isSubsequence(String target, String str) {
        int targetIndex = 0, strIndex = 0;

        while (targetIndex < target.length() && strIndex < str.length()) {
            if (str.length() - strIndex < target.length() - targetIndex) {
                return false; // Not enough characters left in str to match target
            }

            if (target.charAt(targetIndex) == str.charAt(strIndex)) {
                targetIndex++;
            }
            strIndex++;
        }

        return targetIndex == target.length();
    }
}
