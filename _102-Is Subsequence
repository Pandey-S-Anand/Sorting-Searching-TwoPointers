//Bruteforce Approach

class Solution {
    public boolean isSubsequence(String target, String str) {
        StringBuilder currentSubsequence = new StringBuilder();
        int totalSubsequences = 1 << str.length(); // x << y = x * 2^n

        for (int num = 0; num < totalSubsequences; num++) {
            for (int i = 0; i < str.length(); i++) {
                if ((num & (1 << i)) != 0) {
                    currentSubsequence.append(str.charAt(i));
                }
            }

            if (currentSubsequence.toString().equals(target)) {
                return true;
            }
            currentSubsequence.setLength(0);
        }

        return false;
    }
}


// Optimal Approach

class Solution {
    public boolean isSubsequence(String target, String str) {
        int targetIndex = 0, strIndex = 0;

        while (targetIndex < target.length() && strIndex < str.length()) {

            // Early exit: not enough characters left in 'str' to complete 'target'
            if (str.length() - strIndex < target.length() - targetIndex) {
                return false;
            }

            // Match current characters; move target pointer forward if match found
            if (target.charAt(targetIndex) == str.charAt(strIndex)) {
                targetIndex++;
            }

            // Always move forward in the source string
            strIndex++;
        }

        // If all characters of 'target' were matched in order, return true
        return targetIndex == target.length();
    }
}
