/*
The approach to solve the problem is,
Case 1: 'k' Exists in the array

In this case we need to find the first index of 'k' in the array(array may contain duplicates) this will give us the count of 
numbers smaller than 'k' which eventually gves us the minimum number of operations required to remove all the smaller elements 
than 'k' as in 1 operation we can remove only one small element 

Case 2: 'k' doesnot exists in the array

In this case, we need to find the suitable index of  'k' in the sorted array ,that 'index' will give us the count of numbers 
smaller than 'k' which eventually gves us the minimum number of operations required to remove all the smaller elements 
than 'k' as in 1 operation we can remove only one small element 
*/

//Bruteforce Approach

//Naive Implementation

class Solution {
    public int minOperations(int[] arr, int k) {
        Arrays.sort(arr);

        int firstIndex = findFirstIndex(arr, k);
        if (firstIndex != -1) {
            return firstIndex;
        }

        return findInsertionIndex(arr, k);
    }

    private int findFirstIndex(int[] arr, int key) {
        int low = 0, high = arr.length - 1, firstIndex = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                firstIndex = mid;
                high = mid - 1;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return firstIndex;
    }

    private int findInsertionIndex(int[] arr, int k) {
        int low = 0, high = arr.length - 1, insertIndex = arr.length;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] > k) {
                insertIndex = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return insertIndex;
    }
}



//Optimal Implementation

class Solution {
    public int minOperations(int[] arr, int k) {
        Arrays.sort(arr);

        int low = 0, high = arr.length - 1, operationCount = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] >= k) {
                operationCount = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return operationCount;
    }
}


/*
Optimal Approach:

Count the numbers in the array that are less than 'k'. This count represents the number of elements smaller than 'k'. 
Since each operation allows the removal of only one smaller element, the minimum number of operations required to 
make all elements in the array greater than or equal to 'k' is equal to the count of numbers in the array that are less than 'k'.
*/

class Solution {
    public int minOperations(int[] arr, int k) {
        int operationCount = 0;

        for (int val : arr) {
            if (val < k) {
                operationCount++;
            }
        }

        return operationCount;
    }
}
