//Method 1

//Naive Implementation

class Solution {
    public int findMaxConsecutiveOnes(int[] arr) {
        int maxConsecutive1s = 0, count1 = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 1) {
                if (i == arr.length - 1 || arr[i] == arr[i + 1]) {
                    count1++;
                } else {
                    count1++;
                    maxConsecutive1s = Math.max(count1, maxConsecutive1s);
                    count1 = 0;
                }
            }
        }

        return Math.max(count1, maxConsecutive1s);
    }
}


//Optimal Implementation

class Solution {
    public int findMaxConsecutiveOnes(int[] arr) {
        int maxConsecutive1s = 0, count1 = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 1) {
                count1++;
            } else {
                maxConsecutive1s = Math.max(count1, maxConsecutive1s);
                count1 = 0;
            }
        }

        return Math.max(count1, maxConsecutive1s);
    }
}



//Method 2 (Using Sliding Window)

class Solution {
    public int findMaxConsecutiveOnes(int[] arr) {
        int maxConsecutive1s = 0, left = 0, right = 0;

        while (right < arr.length) {
            if (arr[right] == 1) {
                right++;
            } else {
                // When control enters else statement , the right always points to 0
                // Calculate the length of the current window of 1's
                maxConsecutive1s = Math.max(maxConsecutive1s, right - left);
                // Move both pointers to the next index after the current 0
                right++;
                left = right;
            }
        }

        maxConsecutive1s = Math.max(maxConsecutive1s, right - left);
        return maxConsecutive1s;
    }
}
