//Bruteforce Approach

class Solution {
    public boolean search(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return true;
            }
        }

        return false; // Target not found
    }
}


//Good Approach

class Solution {
    public boolean search(int[] arr, int target) {
        // Step 1: Find the index where the rotation has happened. This will be the index of the largest element.
        int pivotIndex = findPivotIndex(arr);

        // Step 2: Perform binary search in the left sorted portion [0...pivot]
        if (target >= arr[0] && target <= arr[pivotIndex]) {
            return binarySearch(arr, 0, pivotIndex, target);
        }

        // Step 3: Otherwise perform binary search in the right sorted portion [pivot + 1....n - 1]
        return binarySearch(arr, pivotIndex + 1, arr.length - 1, target);
    }

    private int findPivotIndex(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                return i;
            }
        }
        //If the array is **not rotated at all** (it is already fully sorted). In this case, the pivot is effectively the last index of the array.
        return arr.length - 1;
    }

    private boolean binarySearch(int[] arr, int low, int high, int target) {
        if (low > high) {
            return false;
        }

        int mid = low + (high - low) / 2;

        if (arr[mid] == target) {
            return true;
        }

        if (arr[mid] < target) {
            return binarySearch(arr, mid + 1, high, target);
        }

        return binarySearch(arr, low, mid - 1, target);
    }
}


//Better Approach

class Solution {
    public boolean search(int[] arr, int target) {
        // Eliminate duplicates from the sorted array and obtain the updated length
        int newLength = removeDuplicates(arr);
        return searchInRotatedSortedArray(arr, newLength, target);
    }

    private boolean searchInRotatedSortedArray(int[] arr, int n, int target) {
        // Step 1: Find the pivot index (i.e., the index of the largest element)
        int pivotIndex = findPivotIndex(arr, n);

        // Step 2: Perform binary search in the left sorted portion [0...pivot]
        if (target >= arr[0] && target <= arr[pivotIndex]) {
            return binarySearch(arr, 0, pivotIndex, target);
        }

        // Step 3: Otherwise perform binary search in the right sorted portion [pivot + 1....n - 1]
        return binarySearch(arr, pivotIndex + 1, n - 1, target);
    }

    private boolean binarySearch(int[] arr, int low, int high, int target) {
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                return true; // Found the target
            }

            if (target < arr[mid]) {
                high = mid - 1; // Search left half
            } else {
                low = mid + 1; // Search right half
            }
        }

        return false; //Target not found
    }

    private int findPivotIndex(int[] arr, int n) {
        /* 
         Edge Case 1: Single element array → it's the pivot
         Edge Case 2: Array is already sorted (not rotated) → last element is the largest
        */
        if (n == 1 || arr[0] < arr[n - 1]) {
            return arr.length - 1;
        }

        // If the above condition is false, it confirms that the array is both sorted and rotated
        int low = 0, high = n - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Case 1: mid is the pivot if it is greater than the next element
            // Note:  Since the array is rotated (Ascending order), the largest element (pivot) cannot be at the last index, so mid will never equal arr.length - 1 during pivot search
            if (arr[mid] > arr[mid + 1]) {
                return mid;
            }

            /*
                How to determine if the left half is sorted?
                   If arr[low] < arr[mid], then the segment [low...mid] is sorted.
                   In a rotated sorted array with all unique elements, a properly sorted
                   half will always have the first element < the last element.
            
                ✅ Example:
                   arr = [4, 5, 6, 7, 0, 1, 2]
                   low = 0, mid = 3 → arr[low] = 4, arr[mid] = 7 → 4 < 7 → left half is sorted
            
                Binary Search Use Case:
                   - If the pivot is not in the sorted half, eliminate that half
                   - Continue searching in the unsorted half
             */

            /*
                Why is the condition (low == mid) important?
            
                ⚠️ Edge Case Example: [8, 9, 2, 3, 4]
                Step-by-step:
                - Initially: low = 0, high = 4
                - mid = (0 + 4) / 2 = 2
                - arr[mid] = 2, arr[low] = 8
            
                Since arr[low] > arr[mid], pivot lies in the left half
                → Move left: low = 0, high = 1
            
                Now:
                - mid = (0 + 1) / 2 = 0
            
                If we check: arr[low] < arr[mid] → 8 < 8 → false
                This would incorrectly indicate an unsorted left half.
                We move left → high = mid - 1 = -1 → out of bounds!
            
                ❌ Problem: We exit the loop without finding the pivot.
            
                ✅ Solution:
                When low == mid, it means the left half contains only one element,
                which is trivially sorted. So, we must move to the right (low = mid + 1)
                to avoid incorrect movement.
             */
            if (low == mid || arr[low] < arr[mid]) {
                // Left half is sorted or only one element → pivot is in the right half
                low = mid + 1;
            } else {
                // Right half is unsorted → pivot is in the left half
                high = mid - 1;
            }
        }

        // Ideally unreachable for a valid rotated sorted array
        return -1;
    }

    private int removeDuplicates(int[] arr) {
        int j = 0;

        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] != arr[i + 1]) {
                arr[j++] = arr[i];
            }
        }

        arr[j++] = arr[arr.length - 1];

        return j;
    }
}


//Optimal approach

class Solution {
    public boolean search(int[] arr, int target) {
        int low = 0, high = arr.length - 1;
        // In a rotated sorted array (with or without duplicates), at least one half (left or right) is always sorted.
        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Found the target
            if (arr[mid] == target) {
                return true;
            }

            /*
             * Example demonstrating why we need to handle the case when
             * arr[low] == arr[mid] == arr[high]:
             *
             * arr = [1, 0, 1, 1, 1], target = 0
             * low = 0, high = 4, mid = 2
             * arr[low] = arr[mid] = arr[high] = 1
             *
             * Without special handling, the usual condition arr[low] <= arr[mid] would incorrectly suggest
             * that the left half is sorted. As a result, we wrongly move the search to the right half (low = mid + 1),
             * even though the actual target (0) is in the left unsorted half.
             *
             * To avoid this incorrect elimination, we shrink both ends (low++ and high--) 
             * when arr[low] == arr[mid] == arr[high] to bypass the duplicates and narrow down the search space.
             */
            // If we can't tell which half is sorted, shrink both ends
            if (arr[low] == arr[mid] && arr[mid] == arr[high]) {
                low++;
                high--;
            } else if (arr[low] <= arr[mid]) { // Left half [low..mid] is sorted
                /*
                 * In the following examples, low = 0, high = 8, so mid = 4.
                 * In both cases, the left half [low..mid] is sorted, and the right half [mid+1..high] is unsorted.
                 * 
                 * Examples:
                 * [1, 1, 1, 2, 3, 5, 1, 1, 1]  → target = 5
                 * [1, 1, 1, 2, 3, 5, 1, 1, 1]  → target = 2
                 *
                 * [1, 1, 1, 1, 1, 2, 2, 3, 1]  → target = 3
                 * [1, 1, 1, 1, 1, 2, 2, 3, 1]  → target = 1
                 *
                 * Since the left half is sorted, we check if the target lies within this range:
                 *      if (target >= arr[low] && target < arr[mid])
                 * If it does, we continue the search in the left half by doing high = mid - 1.
                 * Otherwise, the target may be in the right half, so we do low = mid + 1.
                 */

                if (target >= arr[low] && target < arr[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else {  // Right half [mid+1..high] must be sorted 
                // NOTE: In a rotated sorted array (with or without duplicates), at any given mid, one half (either left or right) will always be sorted.
                /*
                * Examples where the right half [mid+1..high] is sorted but the left half contains the pivot or duplicates:
                * 
                * Example:
                * [2, 2, 1, 1, 2, 2, 2, 2], target = 1
                * 
                * In this scenario, since the right half is sorted, we check if the target lies within that half:
                *      if (target >= arr[mid + 1] && target <= arr[high])
                * If yes, search in the right half by setting low = mid + 1.
                * Otherwise, search in the left half by setting high = mid - 1.
                */

                if (target >= arr[mid + 1] && target <= arr[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }

        // Target not found in any segment
        return false;
    }
}
