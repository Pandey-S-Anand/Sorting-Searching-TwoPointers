/**
 * The problem guarantees that `piles.length ≤ h`, ensuring that  
 * Koko can always finish all the bananas within `h` hours.  
 *
 * ### Worst-Case Scenario:  
 * - If `h == piles.length`, Koko has at least one hour per pile.  
 * - Her minimum required speed will match the largest pile’s size (`max(piles) bananas/hour`).  
 * - This guarantees that there always exists a feasible speed that allows  
 *   her to eat all bananas within the given time.  
 *
 * Example:  
 * Given `h = 8` and `piles = [5, 6, 8, 2, 10, 7, 4, 3]`:  
 * - The largest pile has `10` bananas.  
 * - If Koko eats at `k = 10` bananas per hour, she will finish the largest pile in `1` hour.  
 * - The remaining piles take `1` hour each.  
 * - Since `h = 8`, she will finish exactly within the given time.  
 *
 * ### Key Observations:  
 * - The **maximum possible eating speed per hour** is equal to the **largest pile size**.  
 * - Eating at a speed greater than this value is unnecessary because **it won't reduce the total hours**.  
 * - Eating speed can **never be `0`**, because Koko must eat **all** the bananas.  
 *   - If `speed = 0`, Koko wouldn't eat anything, violating the problem constraints.  
 *
 * ### When `k = 1` Occurs:  
 * - `k = 1` happens when Koko has **a lot of hours (`h`)** compared to the total number of bananas.  
 * - This situation is possible when `h` is **very large** relative to the sum of bananas.  
 *
 * ### Search Range for Speed:  
 * - The valid range for `k` is **from `1` to `max(piles)`**.  
 */

//Brutefoce approach

class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int maxSpeedPerHour = findMaxInArray(piles); // Find max pile size

        // Try each possible eating speed from 1 to maxSpeedPerHour
        for (int speedPerHour = 1; speedPerHour <= maxSpeedPerHour; speedPerHour++) {
            int hoursNeeded = calculateHours(piles, speedPerHour);

            // If we can eat all bananas within h hours, return this speed
            if (hoursNeeded <= h) {
                return speedPerHour;
            }
        }

        return -1; // Should never be reached since h ≥ piles.length
    }

    private int findMaxInArray(int[] arr) {
        int low = 0, high = arr.length - 1;
        int max = Integer.MIN_VALUE;

        while (low <= high) {
            max = Math.max(arr[low], max);
            max = Math.max(arr[high], max);
            low++;
            high--;
        }

        return max;
    }

    private int calculateHours(int[] piles, int speedPerHour) {
        int hoursNeeded = 0;
        // Calculate total hours required for this eating speed
        for (int bananas : piles) {
            // Using Math.ceil((double) bananas / speedPerHour) to calculate hours per pile
            hoursNeeded += Math.ceil((double) bananas / speedPerHour);
        }

        return hoursNeeded;
    }
}


// Optimal Approach: (We can optimize using **Binary Search** because the search space is sorted. The possible values for minimum eating speed  range from `1` (slowest possible speed) to `max(piles)` forming a sorted sequence)

class Solution {
    public int minEatingSpeed(int[] piles, int h) {
        int maxSpeedPerHour = findMaxInArray(piles); // Find the largest pile size (upper bound)

        int low = 1, high = maxSpeedPerHour;
        int minimumValidSpeed = -1; // To store the minimum valid speed

        while (low <= high) {
            int speedPerHour = low + (high - low) / 2;
            int hoursNeeded = calculateHours(piles, speedPerHour);

            // If Koko can eat all bananas within `h` hours, try a smaller speed
            if (hoursNeeded <= h) {
                minimumValidSpeed = speedPerHour; // Store the valid speed
                high = speedPerHour - 1; // Search in the left half (try a smaller speed)
            } else {
                // If not possible within h hours, increase speed to eat faster
                low = speedPerHour + 1;
            }
        }

        return minimumValidSpeed; // Return the minimum valid eating speed
    }

    private int findMaxInArray(int[] arr) {
        int low = 0, high = arr.length - 1;
        int max = Integer.MIN_VALUE;

        while (low <= high) {
            max = Math.max(arr[low], max);
            max = Math.max(arr[high], max);
            low++;
            high--;
        }

        return max;
    }

    private int calculateHours(int[] piles, int speedPerHour) {
        int hoursNeeded = 0;
        // Calculate total hours required for this eating speed
        for (int bananas : piles) {
            // Using Math.ceil((double) bananas / speedPerHour) to calculate hours per pile
            hoursNeeded += Math.ceil((double) bananas / speedPerHour);
        }

        return hoursNeeded;
    }
}
