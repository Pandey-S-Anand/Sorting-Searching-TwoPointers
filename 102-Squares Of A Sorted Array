// Bruteforce Approach

class Solution {
    public int[] sortedSquares(int[] arr) {
        int[] squares = new int[arr.length];

        for (int i = 0; i < arr.length; i++) {
            squares[i] = arr[i] * arr[i];
        }

        Arrays.sort(squares);

        return squares;
    }
}

// Optimal Approach

class Solution {
    public int[] sortedSquares(int[] arr) {
        int index = arr.length - 1, left = 0, right = arr.length - 1;
        int[] squares = new int[arr.length];

        while (left <= right) {
            int leftSqr = arr[left] * arr[left];
            int rightSqr = arr[right] * arr[right];

            if (leftSqr >= rightSqr) {
                squares[index--] = leftSqr;
                left++;
            } else {
                squares[index--] = rightSqr;
                right--;
            }
        }

        return squares;
    }
}
