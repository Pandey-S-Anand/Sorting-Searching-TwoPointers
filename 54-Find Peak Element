//Bruteforce Approach

// In this question, we are guaranteed to always have a peak element. This is because we assume: arr[-1] = -∞ and arr[arr.length] = -∞
class Solution {
    public int findPeakElement(int[] arr) {
        // Edge Case 1: If the array has only one element, it is trivially the peak.
        if (arr.length == 1) {
            return 0;
        }

        // Edge Case 2: If the first element is greater than the second, it's a peak. Since arr[-1] is -∞ (as per question assumption), compare only arr[0] and arr[1].
        if (arr[0] > arr[1]) {
            return 0;
        }

        // Edge Case 3: If the last element is greater than the second-last, it's a peak. Since arr[n] is -∞, only compare arr[n-1] and arr[n-2].
        if (arr[arr.length - 1] > arr[arr.length - 2]) {
            return arr.length - 1;
        }

        // General Case: Check for peak element in the middle of the array. A peak is defined as an element greater than both its neighbors.
        for (int i = 1; i < arr.length - 1; i++) {
            if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {
                return i; // Found a peak
            }
        }

        // This line should never be reached due to the problem guarantee of a peak.
        return -1;
    }
}



//Optimal Solution

class Solution {
    public int findPeakElement(int[] arr) {
        // Edge Case 1: If the array has only one element, it is trivially the peak.
        // Edge Case 2: If the first element is greater than the second, it's a peak. Since arr[-1] is -∞ (as per question assumption), compare only arr[0] and arr[1].
        if (arr.length == 1 || arr[0] > arr[1]) {
            return 0;
        }

        // Edge Case 3: If the last element is greater than the second-last, it's a peak. Since arr[n] is -∞, only compare arr[n-1] and arr[n-2].
        if (arr[arr.length - 1] > arr[arr.length - 2]) {
            return arr.length - 1;
        }

        /**
         * Now, search in the middle part of the array.
         * We set low = 1 and high = arr.length - 2 because we already checked the boundaries.
         */
        int low = 1, high = arr.length - 2;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            /** 
             * Case 1:
             * If the middle element is a peak, return it.
             */
            if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) {
                return mid;
            }

            /** 
             * Case 2:
             * If arr[mid] is greater than its left neighbor but less than its right neighbor,
             * then the slope is rising to the right.
             *
             * This implies that on the right side, either the sequence continues increasing
             * (in which case the rightmost element is a peak, since we assume -∞ after the last element),
             * or the sequence eventually drops, making the element just before the drop a peak.
             *
             * Moreover, even if there are multiple ups and downs, multiple peaks may exist in the right half,
             * but we are guaranteed that at least one peak is present on the right side.
             *
             * Therefore, we move right by setting low = mid + 1.
             * Note: A peak could exist on the left as well but is not guaranteed...
             * so we will move to the right where a peak is guaranteed.
             */
            else if (arr[mid] > arr[mid - 1] && arr[mid] < arr[mid + 1]) {
                low = mid + 1;
            }

            /** 
             * Case 3:
             * If arr[mid] is less than its left neighbor but greater than its right neighbor,
             * then the slope is rising to the left.
             *
             * This implies that on the left side, either the sequence continues increasing
             * (in which case the leftmost element is a peak, since we assume -∞ before the first element),
             * or the sequence eventually drops, making the element just after the drop a peak.
             *
             * Moreover, even if there are multiple ups and downs, multiple peaks may exist in the left half,
             * but we are guaranteed that at least one peak is present on the left side.
             *
             * Therefore, we move left by setting high = mid - 1.
             * Note: A peak could exist on the right as well but is not guaranteed...
             * so we will move to the left where a peak is guaranteed.
             */

            /**
            * Case 4:
            * In a valley situation where the middle element is less than both its left and right neighbors,
            * for example in the array [1, 2, 1, 2, 1] at index 2 (value 1, with left and right both 2),
            * you could move right just as well as moving left.
            *
            * Both directions will eventually lead to a region containing a peak
            * because a peak is guaranteed to exist on at least one side.
            *
            * In our implementation, we consistently choose to move left
            * (i.e., set high = mid - 1) to maintain a deterministic strategy.
            */
            else {
                high = mid - 1;
            }
        }

        return -1; // This line should never be reached due to the problem guarantee of a peak.
    }
}


/*
Note:
In binary search (while low <= high), 
the mid value (mid = low + (high - low) / 2) will be equal to 0 if and only if (low = 0 and high = 0) or (low = 0 and high = 1).
Similarly, the mid value will be equal to (arr.length - 1) if and only if (low = arr.length - 1 and high = arr.length - 1).
*/
