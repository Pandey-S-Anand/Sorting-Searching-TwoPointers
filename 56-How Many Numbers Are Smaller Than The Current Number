

//Better Approach

class Solution {
    public int[] smallerNumbersThanCurrent(int[] arr) {
        int[] sortedCopy = arr.clone();
        Arrays.sort(sortedCopy);

        for (int i = 0; i < arr.length; i++) {
            arr[i] = firstIndex(sortedCopy, arr[i]);
        }

        return arr;
    }

    private int firstIndex(int[] arr, int key) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                high = mid - 1;
            } else if (key > arr[mid]) {
                low = mid + 1;
            } else { // if(key<arr[mid])
                high = mid - 1;
            }
        }

        return low;
    }
}

/*
Why low Points to the First Occurrence?
The loop terminates when low > high. At this point, low is at the index where the key would fit or the first occurrence of key in the array. 
This index also represents the count of elements smaller than key in the sorted array.
*/

//Better Approach

class Solution {
    public int[] smallerNumbersThanCurrent(int[] arr) {
        int[] sortedArray = arr.clone();
        Arrays.sort(sortedArray);

        // Create a hash map to store the first occurrence index of each element
        Map<Integer, Integer> valueIndexMap = new HashMap<>();

        for (int i = 0; i < sortedArray.length; i++) {
            valueIndexMap.putIfAbsent(sortedArray[i], i);
        }

        for (int i = 0; i < arr.length; i++) {
            arr[i] = valueIndexMap.get(arr[i]);
        }

        return arr;
    }
}


//Optimal Approach (Inspired By Count Sort)

class Solution {
    public int[] smallerNumbersThanCurrent(int[] arr) {
        int[] count = new int[101];

        // Find the frequency of each value in the array
        for (int val : arr) {
            count[val]++;
        }

        /*
         * Find the actual position(position=index+1) of each value in the sorted array
         * count[val] = the position(position=index+1) in the array where the last
         * occurence of the 'val' will be scored
         * i.e count[val] = count of elements <= val
         */
        for (int val = 1; val <= 100; val++) {
            count[val] += count[val - 1];
        }

        // count[val-1]=Count of numbers which are < arr[val] (minus 1 because we only want smaller elements than 'val')
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0) {
                arr[i] = 0;
            } else {
                arr[i] = count[arr[i] - 1];
            }
        }

        return arr;
    }
}
