//Bruteforce approach

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        // Iterate through each row in the matrix
        for (int[] row : matrix) {
            // Perform binary search on the current row
            if (binarySearch(row, target)) {
                return true; // If found, return true
            }
        }

        // If target is not found in any row
        return false;
    }

    private boolean binarySearch(int[] arr, int target) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                return true; 
            } else if (target > arr[mid]) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return false;
    }
}


//Optimal approach

class Solution {
    /*
    * Why start from the top-right corner?
    *
    * - The current element helps us eliminate search space efficiently.
    * - Since each row and column is sorted in ascending order:
    *     - All elements to the **left** of the current element (in the same row) are smaller (←)
    *     - All elements **below** the current element (in the same column) are larger (↓)
    *
    * Therefore:
    *     - If the target is smaller than the current element, move left.
    *     - If the target is larger than the current element, move down.
    *
    * This lets us discard one full row or column at each step — reducing time complexity to O(n + m).
    *
    * Note:
    * - You could also start from the bottom-left corner using the same logic.
    * - But in this implementation, we use the top-right corner for simplicity.
    */

    public boolean searchMatrix(int[][] matrix, int target) {
        int row = 0, col = matrix[0].length - 1;

        while (col >= 0 && row < matrix.length) {
            int value = matrix[row][col];

            if (target == value) {
                return true;
            }

            if (target < value) {
                col--; // Move left
            } else {
                row++; // Move down
            }
        }

        return false;
    }
}
