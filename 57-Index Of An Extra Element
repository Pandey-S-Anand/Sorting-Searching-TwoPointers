//Bruteforce Approach

class Solution {

    /**
     * ✅ Examples:
     *
     * Test Case 1:
     * arr1 = [2, 4, 6, 8, 11, 12, 13]
     * arr2 = [2, 4, 6, 8, 12, 13]
     * Output: 4 (extra element is 11 at index 4)
     *
     * Test Case 2:
     * arr1 = [2, 4, 6, 8, 11, 12, 13]
     * arr2 = [2, 4, 6, 8, 11, 12]
     * Output: 6 (extra element is 13 at index 6 — end of the array)
     *
     */

    public int findExtra(int[] arr1, int[] arr2) {
        int i = 0, j = 0;

        // Compare elements from both arrays until a mismatch is found
        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] != arr2[j]) {
                // Found the first mismatching element — this is the extra element in arr1
                return i;
            }
            i++;
            j++;
        }

        /*
         * If all previous elements matched, then the extra element must be the last one
         * (at the end of arr1). Since arr1 has exactly one extra element,
         * this is guaranteed to be correct.
         */
        return arr1.length - 1;
    }
}


//Optimal Approach

class Solution {
    /**
     * ✅ Examples:
     *
     * Test Case 1:
     * arr1 = [2, 4, 6, 8, 11, 12, 13, 14, 15, 16]
     * arr2 = [2, 4, 6, 8, 12, 13, 14, 15, 16]
     * Output: 4 (extra element is 11 at index 4)
     *
     * Test Case 2:
     * arr1 = [2, 4, 6, 8, 11, 12, 13]
     * arr2 = [2, 4, 6, 8, 11, 12]
     * Output: 6 (extra element is 13 at index 6 — end of the array)
     *
     * ✅ Note:
     * - arr1 has exactly one extra element compared to arr2.
     * - Both arrays are sorted.
     * - It is never possible that the missing number is in arr2.
     */

    public int findExtra(int[] arr1, int[] arr2) {
        // Iterate over the smaller array (arr2)
        int low = 0, high = arr2.length - 1;

        /*
         * Use binary search to find the index where the mismatch occurs.
         * arr1 is longer than arr2 by one element.
         *
         * At every step, we compare arr1[mid] and arr2[mid]:
         * - If they are equal → mismatch must be on the right side.
         * - If not equal → mismatch occurred at or before mid.
         */
        int mismatchIndex = arr1.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr1[mid] == arr2[mid]) {
                // No mismatch yet, move to right half
                low = mid + 1;
            } else {
                // Mismatch found or could be before, move to left half
                mismatchIndex = mid;
                high = mid - 1;
            }
        }

        return mismatchIndex;
    }
}
