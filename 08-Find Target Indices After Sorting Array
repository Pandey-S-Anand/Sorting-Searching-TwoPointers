//Naive Approach

class Solution {
    public List<Integer> targetIndices(int[] arr, int target) {
        // Step 1: Sort the array so that duplicates of target appear consecutively
        Arrays.sort(arr);

        // Step 2: Find the index of the first occurrence of target
        int firstIndex = findFirstOccurrence(arr, target);

        // Step 3: If target not found, return empty list
        if (firstIndex == -1) {
            return Collections.emptyList();
        }

        List<Integer> result = new ArrayList<>();
        int index = firstIndex;

        // Step 4: Collect all indices where arr[index] == target
        while (index < arr.length && arr[index] == target) {
            result.add(index);
            index++;
        }

        return result;
    }

    private int findFirstOccurrence(int[] arr, int key) {
        int low = 0, high = arr.length - 1;
        int firstMatchIndex = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                // Potential first occurrence found, keep searching left
                firstMatchIndex = mid;
                high = mid - 1;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return firstMatchIndex;
    }
}


// Optimal Approach

class Solution {

    /**
     * This is done without actually sorting the array.
     * 
     * Logic:
     * - Count how many elements are smaller than the target → this tells us the first index where target would appear after sorting
     * - Count how many times the target appears → this gives the number of consecutive positions it will occupy.
     * - The result will be indices: [countSmaller, countSmaller+1, ..., countSmaller + targetCount - 1]
     */
    public List<Integer> targetIndices(int[] arr, int target) {
        int countSmaller = 0;  // Number of elements smaller than target
        int targetCount = 0;   // Number of elements equal to target

        // Count how many elements are smaller than and equal to the target
        for (int num : arr) {
            if (num < target) {
                countSmaller++;
            } else if (num == target) {
                targetCount++;
            }
        }

        // The first index where target would appear after sorting
        int index = countSmaller;

        // Build the list of target indices based on the target count
        List<Integer> targetIndices = new ArrayList<>();
        while (targetCount > 0) {
            targetIndices.add(index);
            index++;
            targetCount--;
        }

        return targetIndices;
    }
}
