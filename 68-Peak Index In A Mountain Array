/*
Since the given array is a mountain array, it will always have a single peak element.
A mountain array first strictly increases to a peak and then strictly decreases.
The peak element in a mountain array will always be greater than both its neighbors.
Note: The first and last elements of the array cannot be the peak,because a peak requires both left and right neighbors to compare.
*/

//Bruteforce Approach

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        for (int i = 1; i < arr.length - 1; i++) {
            if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {
                return i;
            }
        }
        // This return statement will never be reached as the array is guaranteed to be a mountain array.
        return -1;
    }
}


//Optimal Approach

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        /*
         * Since the array is a mountain array (strictly increasing then strictly decreasing),
         * the peak will never be at index 0 or index n - 1.
         * So we can safely search between index 1 and n - 2.
         */
        int low = 1;
        int high = arr.length - 2;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Case 1: arr[mid] is the peak (greater than both neighbors)
            if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) {
                return mid; // Found the peak element
            }

            if (arr[mid] > arr[mid - 1] && arr[mid] < arr[mid + 1]) {
                /*
                 * Case 2: We are in the increasing part of the mountain array
                 * i.e., arr[mid] > arr[mid - 1] && arr[mid] < arr[mid+1] → Move right
                 * because the peak lies in the right half
                 */
                low = mid + 1;
            } else if (arr[mid] < arr[mid - 1] && arr[mid] > arr[mid + 1]) {
                /*
                * Case 3: We are in the decreasing part of the mountain array
                * i.e., arr[mid] < arr[mid - 1] && arr[mid] > arr[mid + 1] → Move left
                * because the peak lies in the left half
                */
                high = mid - 1;
            }
        }

        // This line should never be reached if the input is a valid mountain array
        return -1;
    }
}
