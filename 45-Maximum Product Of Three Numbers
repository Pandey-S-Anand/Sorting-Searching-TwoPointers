/*
Case-1 :(If Array Contains All +ve Elements)
If array contains all positive Elements(0 included) then the Maximum Product of Three Numbers will be product of last three elements of the Sorted array.(Ascending order).

Ex: arr[]={6,5,1,6,2,0};

      After Sorting :
      arr[]={0,1,2,5,6,6};
      
      MaxProduct=5*6*6=180.

Case-2 :(If Array Contains All -ve Elements)
If the array contains only negative numbers, then the maximum product of three numbers will be the product of the last three elements in the sorted (ascending) array. 
Since all numbers are negative, the product will definitely be negative. To maximize this (i.e., get the largest possible negative value), we want to minimize the magnitude of the negative product. 
This is achieved by choosing the three negative numbers with the smallest absolute values, which are the last three elements in the sorted array. 
In other words, a smaller magnitude of negative numbers results in a larger product value on the negative scale.

Ex: arr[]={-6,-8,-7,-100,-7};

    After Sorting :
    arr[]={-100,-8,-7,-7,-6};
      
    MaxProduct=-7*-7*-6=-294.

Case-3 :(If Array Contains Mixed Elements (Some +ve(0 included) and some -ve Elements)
In the case of a mixed array (containing both positive and negative numbers), the maximum product of three numbers will always be positive and can only come from one of two possibilities:
1 : The product of the last three elements in the sorted (ascending) array â€” these are the three largest numbers.
2 : The product of the first two elements (both negative, which when multiplied give a positive product) and the last element (the largest positive number).


Ex:1 arr[]={3,1,4,-9,2};

    After Sorting :
    arr[]={-9,1,2,3,4};
      
    MaxProduct= 2*3*4= 24.
        
    
Ex:2 arr[]={-9,-6,1,-7};

    After Sorting :
    arr[]={-9,-7,-6,1};
      
    MaxProduct= -9*-7*1= 63.
   
   
Ex:3 arr[]={-9,1,0,-7};

    After Sorting :
    arr[]={-9,-7,-7,-6,0};
      
    MaxProduct= -9*-7*0=0.
 
 
Ex:4 arr[]={-9,-7,-7,1,2,1};

    After Sorting :
    arr[]={-9,-7,-7,1,1,2};
      
    MaxProduct= -9*-7*2=126.


Ex:5 arr[]={-9,-7,-7,1,2,1};

    After Sorting :
    arr[]={-9,-7,-7, 2};
      
    MaxProduct= -9*-7*2=126.
 
*/

// Method 1 - Via Sorting

// Naive Implementation
class Solution {
    public int maximumProduct(int[] arr) {
        // Sort the array in ascending order
        Arrays.sort(arr);

        // Check if all elements are either positive or all negative
        if (allPositiveOrAllNegative(arr)) {
            // If all positive or all negative, product of last three elements is max
            return (arr[arr.length - 1] * arr[arr.length - 2] * arr[arr.length - 3]);
        }
        /* 
         For mixed arrays, max product is either:
         1: Product of first two (possibly negative) and last element OR
         2: Product of last three elements
         */
        return Math.max(arr[0] * arr[1] * arr[arr.length - 1], arr[arr.length - 1] * arr[arr.length - 2] * arr[arr.length - 3]);
    }

    private boolean allPositiveOrAllNegative(int[] arr) {
        int countPositive = 0;

        for (int val : arr) {
            if (val >= 0) {
                countPositive++;
            }
        }

        // Return true if all are positive or none is positive (all negative)
        return (countPositive == arr.length || countPositive == 0);
    }
}


// Optimal Implementation
class Solution {
    public int maximumProduct(int[] arr) {
        // Sort array in ascending order
        Arrays.sort(arr);

        // Directly return the max of:  product of first two and last element OR product of last three elements
        return Math.max(arr[0] * arr[1] * arr[arr.length - 1], arr[arr.length - 1] * arr[arr.length - 2] * arr[arr.length - 3]);
    }
}



//Without Sorting

class Solution {
    public int maximumProduct(int[] arr) {
        // Initialize three variables to track the top 3 maximum values
        int maxIndex = -1, secondMaxIndex = -1, thirdMaxIndex = -1;

        // Initialize two variables to track the two smallest values (minimums)
        int minIndex = -1, secondMinIndex = -1;

        // Traverse the array once to find required max and min values
        for (int i = 0; i < arr.length; i++) {
            // Update the top three maximum values
            if (maxIndex == -1 || arr[i] > arr[maxIndex]) {
                // Shift max and secondMax down, assign new max
                thirdMaxIndex = secondMaxIndex;
                secondMaxIndex = maxIndex;
                maxIndex = i;
            } else if (secondMaxIndex == -1 || arr[i] > arr[secondMaxIndex]) {
                // Shift secondMax to thirdMax, assign new secondMax
                thirdMaxIndex = secondMaxIndex;
                secondMaxIndex = i;
            } else if (thirdMaxIndex == -1 || arr[i] > arr[thirdMaxIndex]) {
                // Update thirdMax if val fits here
                thirdMaxIndex = i;
            }

            // Update the two minimum values
            if (minIndex == -1 || arr[i] < arr[minIndex]) {
                // Shift min to secondMin, assign new min
                secondMinIndex = minIndex;
                minIndex = i;
            } else if (secondMinIndex == -1 || arr[i] < arr[secondMinIndex]) {
                // Update secondMin if val fits here
                secondMinIndex = i;
            }
        }

        /*
        The maximum product of three numbers can be either:
         1. Product of two smallest (could be negative) and the largest number
         2. Product of three largest numbers
        */
        return Math.max(arr[minIndex] * arr[secondMinIndex] * arr[maxIndex], arr[maxIndex] * arr[secondMaxIndex] * arr[thirdMaxIndex]);
    }
}
