//Bruteforce Approach

class Solution {
    public List<List<Integer>> minimumAbsDifference(int[] arr) {
        int sum = 0;
        Arrays.sort(arr);
        List<Integer> minAbsDiffOfEachElement = new ArrayList<>();

        minAbsDiffOfEachElement.add(arr[1] - arr[0]);
        for (int i = 1; i < (arr.length - 1); i++) {
            minAbsDiffOfEachElement.add(Math.min(arr[i] - arr[i - 1], arr[i + 1] - arr[i]));
        }
        minAbsDiffOfEachElement.add(arr[arr.length - 1] - arr[arr.length - 2]);

        int minAbsDiff = Collections.min(minAbsDiffOfEachElement);

        List<List<Integer>> pairs = new ArrayList<>();

        for (int i = 0; i < arr.length - 1; i++) {
            if ((arr[i + 1] - arr[i]) == minAbsDiff) {
                pairs.add(Arrays.asList(arr[i], arr[i + 1]));
            }
        }

        return pairs;
    }
}


//Optimal Approach

class Solution {
    public List<List<Integer>> minimumAbsDifference(int[] arr) {
        Arrays.sort(arr);
        int minAbsDiff = Integer.MAX_VALUE;

        for (int i = 0; i < arr.length - 1; i++) {
            minAbsDiff = Math.min(minAbsDiff, arr[i + 1] - arr[i]);
        }

        List<List<Integer>> pairs = new ArrayList<>();

        for (int i = 0; i < arr.length - 1; i++) {
            if ((arr[i + 1] - arr[i]) == minAbsDiff) {
                pairs.add(Arrays.asList(arr[i], arr[i + 1]));
            }
        }

        return pairs;
    }
}
