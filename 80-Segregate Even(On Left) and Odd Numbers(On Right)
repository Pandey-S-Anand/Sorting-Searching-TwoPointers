//Bruteforce Approach

class Solution {
   public static void segregateEvenAndOdd(int[]arr){
       int temp[]=new int[arr.length];
       int k=0;
       
       for(int num:arr){
          if((num%2)==0){
             temp[k++]=num;
          }
       }
       
       for(int num:arr){
          if((num%2)==1){
             temp[k++]=num;
          }
       }
             
       System.arraycopy(temp,0,arr,0,arr.length);
   }
}


//Better Approach

class Solution{
   public static void segregateEvenAndOdd(int[]arr){
      int start=0,end=arr.length-1;
      
      while(start<end){
          while(start<arr.length && (arr[start]%2)==0){
            start++;
          }
            
          while(end>=0 && (arr[end]%2)!=0){
            end--;
          }
            
          if(start<end){
            swap(arr,start,end);
            start++;
            end--;
          }
      }
   }

   public static void swap(int[]arr,int i,int j){
      int temp=arr[i];
      arr[i]=arr[j];
      arr[j]=temp;
   }
}


//Optimal Approach

class Solution {
    public static void segregateEvenAndOdd(int[]arr){
       int oddIdxTracker=0;
       
       for(int i=0;i<arr.length;i++){
         if((arr[i]%2)==0){
            swap(arr,i,oddIdxTracker);          
            oddIdxTracker++;
         }
       }
   } 

   public static void swap(int[]arr,int i,int j){
      int temp=arr[i];
      arr[i]=arr[j];
      arr[j]=temp;
   }
}
