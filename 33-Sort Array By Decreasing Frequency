class Solution {
    public int[] frequencySort(int[] arr) {
        Map<Integer, Integer> frequencyMap = new LinkedHashMap<>();
        
        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        int[][] frequencyArray = new int[frequencyMap.size()][2];

        int index = 0;
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            frequencyArray[index][0] = entry.getKey();
            frequencyArray[index][1] = entry.getValue();
            index++;
        }

        Arrays.sort(frequencyArray, new FrequencyComparator());

        index = 0;

        for (int i = 0; i < frequencyArray.length; i++) {
            int frequency = frequencyArray[i][1];

            while (frequency != 0) {
                arr[index++] = frequencyArray[i][0];
                frequency--;
            }
        }

        return arr;
    }
}

class FrequencyComparator implements Comparator<int[]> {
    public int compare(int[] arr1, int[] arr2) {
        if (arr1[1] < arr2[1]) {
            return 1;
        } else if (arr1[1] > arr2[1]) {
            return -1;
        } else {
            return 0;
        }
    }
}


//Aliter

class Solution {
    public int[] frequencySort(int[] arr) {
        Map<Integer, Integer> frequencyMap = new LinkedHashMap<>();
        
        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        int[][] frequencyArray = new int[frequencyMap.size()][2];

        int index = 0;
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            frequencyArray[index][0] = entry.getKey();
            frequencyArray[index][1] = entry.getValue();
            index++;
        }

        Arrays.sort(frequencyArray, (arr1, arr2) -> {
            if (arr1[1] != arr2[1]) {
                return arr2[1] - arr1[1];
            }
            return 0;
        });

        index = 0;

        for (int i = 0; i < frequencyArray.length; i++) {
            int frequency = frequencyArray[i][1];

            while (frequency != 0) {
                arr[index++] = frequencyArray[i][0];
                frequency--;
            }
        }

        return arr;
    }
}


//Aliter

class Solution {
    public static int[] frequencySort(int[] arr) {
        Map<Integer, Integer> frequencyMap = new LinkedHashMap<>();
        
        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        List<Map.Entry<Integer, Integer>> elementFrequencyList = new ArrayList<>(frequencyMap.entrySet());

        Collections.sort(elementFrequencyList, (entry1, entry2) -> {
            if (!entry1.getValue().equals(entry2.getValue())) {
                return Integer.compare(entry2.getValue(), entry1.getValue()); // Sort by frequency in descending order if frequencies are equal
            }
            return 0;
        });

        int index = 0;
        for (Map.Entry<Integer, Integer> elementFrequency : elementFrequencyList) {
            int value = elementFrequency.getKey();
            int frequency = elementFrequency.getValue();
            while (frequency != 0) {
                arr[index++] = value;
                frequency--;
            }
        }

        return arr;
    }
}
