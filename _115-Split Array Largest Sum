//Bruteforce approach

class Solution {
    public int splitArray(int[] arr, int k) {
        /*
        The search range should start from the maximum value in the array and end at the sum of all values in the array. 
        
        The goal is to minimize the largest sum among all `k` subarrays.
        
        **Why?**
        
        * **Lower Bound (max value in the array):**
          - Each subarray must be **non-empty**, meaning it must contain at least one element.
          - The minimum possible sum of any subarray must be **at least the maximum value** in the array.
          - If we try to set a smaller limit, at least one element will be left unassigned, making the partition invalid.
          - This is particularly important when the number of subarrays (`k`) is **equal to the number of elements**, 
            as each subarray will contain exactly one element.
        
        * **Upper Bound (sum of all elements in the array):**
          - If there is only **one subarray** (`k = 1`), it must include all elements.
          - In the worst case, the largest sum of a subarray would be the total sum of the array.
          - Setting a limit beyond this sum is meaningless, as we aim to **minimize the maximum subarray sum**.
        
        * **Edge Case:**
          - If the number of elements is **less than `k`**, return `-1` as it is impossible to create `k` subarrays while keeping them non-empty.
        
        **Example 1 (`n > k`):**
        
        Given an array: `[10, 20, 30, 40, 50]`  
        Required `k = 4` subarrays.  
        
        Possible valid partitions:
        
        1. `[10] [20] [30] [40, 50]` → Largest sum = `90`  
        2. `[10] [20] [30, 40] [50]` → Largest sum = `70`  
        3. `[10] [20, 30] [40] [50]` → Largest sum = `60`  
        4. `[10, 20] [30] [40] [50]` → Largest sum = `50`  
        
        The optimal partition is the one that **minimizes the largest sum**.  
        In this case, **option 4 is best**, with a minimized largest sum of **50**.
        
        ---
        
        **Example 2 (`n == k`):**
        
        Given an array: `[5, 10, 15, 20]`  
        Required `k = 4` subarrays.  
        
        Possible valid partitions:
        
        1. `[5] [10] [15] [20]` → Largest sum = `20`  
        
        Since the number of subarrays (`k`) is equal to the number of elements,  
        each subarray must contain exactly **one element**.  
        The optimal partition is **[5] [10] [15] [20]**, with a minimized largest sum of **20**.
        */

        if (arr.length < k) {
            return -1; // Not enough elements to split into 'k' non-empty subarrays
        }

        int[] maxAndTotalSum = findMaxAndTotalSum(arr);
        int minSubarraySum = maxAndTotalSum[0]; // Smallest possible subarray sum (max element in the array)
        int maxSubarraySum = maxAndTotalSum[1]; // Largest possible subarray sum (sum of all elements)

        // Iterate linearly from the smallest to the largest possible maxPages limit
        for (int subarraySum = minSubarraySum; subarraySum <= maxSubarraySum; subarraySum++) {
            if (canSplit(arr, subarraySum, k)) {
                return subarraySum;
            }
        }

        return -1; // This line will never be reached due to constraints
    }

    private boolean canSplit(int[] arr, int maxSubarraySum, int k) {
        int subarraysUsed = 1; // Start with one subarray
        int currentSubarraySum = 0; // Sum of the current subarray

        for (int num : arr) {
            if (currentSubarraySum + num > maxSubarraySum) {
                // Create a new subarray
                subarraysUsed++;
                currentSubarraySum = num; // Start new subarray with current element

                // If we need more subarrays than allowed, return false
                if (subarraysUsed > k) {
                    return false;
                }
            } else {
                // Add element to the current subarray
                currentSubarraySum += num;
            }
        }

        /*  
        ### Key Insight:  
        - If the array can be split into **fewer than `k` subarrays**,  we can always redistribute elements to form exactly `k` subarrays  
          without exceeding the allowed maximum sum per subarray.  
        - Redistribution ensures each subarray contains at least one element.  
        
        ### Edge Case:  
        - Given `arr = [15, 10, 19, 10, 5, 18, 7]`, `k = 5`  
        - If the **maximum sum per subarray** is set to `25`, one valid split is:  `[15,10]`, `[19]`, `[10,5]`, `[18,7]` → Uses only **4 subarrays**.  
        - However, we can adjust it to: `[15,10]`, `[19]`, `[10,5]`, `[18]`, `[7]`,  ensuring **exactly 5 subarrays** while keeping the max sum ≤ `25`.  
        - Since all elements are included, this remains a **valid partition**.  
        - If we set the limit **below `25`**, more than `5` subarrays would be required (**invalid**).  
        - If we increase the limit **beyond `25`**, the number of subarrays used  **will only decrease or remain the same**.  
        - Therefore, enforcing `subarraysUsed == k` is **not necessary**,  as long as all elements are distributed correctly.  
        */

        return true; // Successfully split into `k` or fewer subarrays.
    }


    private int[] findMaxAndTotalSum(int[] arr) {
        int max = Integer.MIN_VALUE, sum = 0, low = 0, high = arr.length - 1;

        while (low <= high) {
            max = Math.max(max, Math.max(arr[low], arr[high]));
            sum += arr[low];
            if (low != high) {
                sum += arr[high];
            }

            low++;
            high--;
        }

        return new int[] { max, sum };
    }
}


//Optimal appraoch (We can optimize using Binary Search because the range is sorted →  The possible values for the minimum maximum subarray sum, ranging from (max element) to (sum of all elements), form a sorted sequence.)

class Solution {
    public int splitArray(int[] arr, int k) {
        if (arr.length < k) {
            return -1;  // Not enough elements to form `k` non-empty subarrays.
        }

        // Get the max and total sum of the array
        int[] maxAndTotalSum = findMaxAndTotalSum(arr);
        int low = maxAndTotalSum[0]; // Smallest possible subarray sum (max element in the array)
        int high = maxAndTotalSum[1]; // Largest possible subarray sum (sum of all elements)

        int minOfMaxSubarraySum = 0; // Stores the optimal allocation.

        while (low <= high) {
            int subarraySum = low + (high - low) / 2; // Midpoint as the candidate for the minimum possible maximum subarray sum

            if (canSplit(arr, subarraySum, k)) {
                // If it's possible to split with this sum, try a smaller sum
                minOfMaxSubarraySum = subarraySum;
                high = subarraySum - 1; // Search in the lower half
            } else {
                // If it's not possible, increase the allowed subarray sum
                low = subarraySum + 1;
            }
        }

        return minOfMaxSubarraySum; // Return the optimal allocation found
    }

    private boolean canSplit(int[] nums, int maxSubarraySum, int k) {
        int subarraysUsed = 1;
        int currentSubarraySum = 0;

        for (int num : nums) {
            if (currentSubarraySum + num > maxSubarraySum) {
                subarraysUsed++;
                currentSubarraySum = num;

                if (subarraysUsed > k) {
                    return false;
                }
            } else {
                currentSubarraySum += num;
            }
        }

        return true;
    }

    private int[] findMaxAndTotalSum(int[] arr) {
        int max = Integer.MIN_VALUE, sum = 0, low = 0, high = arr.length - 1;

        while (low <= high) {
            max = Math.max(max, Math.max(arr[low], arr[high]));
            sum += arr[low];
            if (low != high) {
                sum += arr[high];
            }

            low++;
            high--;
        }

        return new int[] { max, sum };
    }
}
