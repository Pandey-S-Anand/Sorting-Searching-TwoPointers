//Bruteforce Approach

class Solution {
    public void sortColors(int[] arr) {
        int count0 = 0, count1 = 0;

        // First pass: Count 0s and 1s
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0) {
                count0++;
            } else if (arr[i] == 1) {
                count1++;
            }
            // No need to count 2s — they will occupy remaining positions
        }

        // Second pass: Overwrite the array with 0s, then 1s, then 2s
        Arrays.fill(arr, 0, count0, 0); // Fill 0s from index 0 to count0-1
        Arrays.fill(arr, count0, count0 + count1, 1); // Fill 1s after that
        Arrays.fill(arr, count0 + count1, arr.length, 2); // Fill remaining with 2s
    }
}


// Optimal Approach (Dutch National Flag Algorithm)

class Solution {
    /*
     * Pointer meanings:
     *   p0 → Boundary for placing the next 0 (i.e., all indices < p0 hold 0)
     *   i  → Current index being evaluated
     *   p2 → Boundary for placing the next 2 (i.e., all indices > p2 hold 2)
     *
     * Dry run for input array: [2, 0, 2, 1, 1, 0, 1]
     * Initial pointers: p0 = 0, i = 0, p2 = 6
     * 
     * Step-by-step execution:
     *
     * 1) i = 0, arr[i] = 2 → swap arr[i] with arr[p2=6] (i.e., swap 2 and 1)
     *    → array becomes [1, 0, 2, 1, 1, 0, 2]
     *    → decrement p2 to 5
     *    → DO NOT increment i, because the value swapped into index i (1) hasn't been processed yet
     *
     * 2) i = 0, arr[i] = 1 → middle value, just move ahead
     *    → i = 1
     *
     * 3) i = 1, arr[i] = 0 → swap arr[i] with arr[p0=0]
     *    → array becomes [0, 1, 2, 1, 1, 0, 2]
     *    → increment both p0 and i → p0 = 1, i = 2
     *
     * 4) i = 2, arr[i] = 2 → swap arr[i] with arr[p2=5] (swap 2 and 0)
     *    → array becomes [0, 1, 0, 1, 1, 2, 2]
     *    → decrement p2 to 4
     *    → DO NOT increment i, because the new arr[2] = 0 still needs processing
     *
     * 5) i = 2, arr[i] = 0 → swap arr[i] with arr[p0=1]
     *    → array becomes [0, 0, 1, 1, 1, 2, 2]
     *    → increment both p0 and i → p0 = 2, i = 3
     *
     * 6) i = 3, arr[i] = 1 → middle value, just i++
     *    → i = 4
     *
     * 7) i = 4, arr[i] = 1 → middle value, just i++
     *    → i = 5
     *
     * Loop ends when i > p2 → i = 5, p2 = 4
     *
     * Final sorted array: [0, 0, 1, 1, 1, 2, 2]
     *
     * Why we DO NOT do i++ when arr[i] == 2:
     *
     * When arr[i] is 2, we swap it with arr[p2], but the value that comes into index i
     * from the right end (arr[p2]) is **unknown** — it could be 0, 1, or another 2.
     * If we increment i blindly, we would skip processing that new element at index i.
     *
     * So we need to **re-evaluate arr[i] after the swap**, hence we **don't move i forward** in this case.
     */
    public void sortColors(int[] arr) {
        int p0 = 0, i = 0, p2 = arr.length - 1;

        while (i <= p2) {
            if (arr[i] == 0) {
                swap(arr, p0, i);
                p0++;
                i++;
            } else if (arr[i] == 2) {
                swap(arr, i, p2);
                p2--;
            } else {
                i++;
            }
        }
    }

    private void swap(int[] arr, int i, int j) {
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
}

