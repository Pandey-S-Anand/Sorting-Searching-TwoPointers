//Bruteforce approach

class Solution {
    public int countDays(int totalDays, int[][] meetingIntervals) {
        /*
         * Using a Set to store all individual days when meetings occur.
         * This ensures that each meeting day is counted only once,
         * even if it appears in multiple overlapping intervals.
         */
        Set<Integer> meetingDays = new HashSet<>();

        // Add all days within each meeting interval to the set
        for (int[] interval : meetingIntervals) {
            for (int day = interval[0]; day <= interval[1]; day++) {
                meetingDays.add(day); // Automatically ignores duplicates
            }
        }

        // Count days that are not part of any meeting
        int nonMeetingDayCount = 0;
        for (int day = 1; day <= totalDays; day++) {
            if (!meetingDays.contains(day)) {
                nonMeetingDayCount++;
            }
        }

        return nonMeetingDayCount;
    }
}


//Better approach

class Solution {
    public int countDays(int totalDays, int[][] meetingIntervals) {
        // Step 1: Merge all overlapping meeting intervals into non-overlapping meeting intervals
        List<int[]> nonOverlappingMeetings = mergeOverlappingIntervals(meetingIntervals);

        // Step 2: Track meeting days using a boolean array.
        boolean[] isMeetingDay = new boolean[totalDays + 1]; // 1-based indexing

        for (int[] interval : nonOverlappingMeetings) {
            // Mark all days from interval[0] to interval[1] as meeting days
            for (int day = interval[0]; day <= interval[1]; day++) {
                isMeetingDay[day] = true;
            }
        }

        // Step 3: Count how many days from 1 to totalDays are not marked as meeting days
        int nonMeetingDayCount = 0;
        for (int day = 1; day <= totalDays; day++) {
            if (!isMeetingDay[day]) {
                nonMeetingDayCount++;
            }
        }

        // Step 4: Return the total number of non-meeting days
        return nonMeetingDayCount;
    }

    private List<int[]> mergeOverlappingIntervals(int[][] intervals) {
        List<int[]> mergedIntervalsList = new ArrayList<>();

        Arrays.sort(intervals, (interval1, interval2) -> Integer.compare(interval1[0], interval2[0]));

        int[] currentMerged = { intervals[0][0], intervals[0][1] };

        for (int i = 1; i < intervals.length; i++) {
            if (isOverlapping(currentMerged, intervals[i])) {
                mergeIntoCurrent(currentMerged, intervals[i]);
            } else {
                mergedIntervalsList.add(currentMerged);
                currentMerged = intervals[i];
            }
        }

        mergedIntervalsList.add(currentMerged);
        return mergedIntervalsList;
    }

    private boolean isOverlapping(int[] interval1, int[] interval2) {
        return interval1[1] >= interval2[0];
    }

    private void mergeIntoCurrent(int[] baseInterval, int[] newInterval) {
        baseInterval[1] = Math.max(baseInterval[1], newInterval[1]);
    }
}


//Optimal approach

class Solution {
    public int countDays(int totalDays, int[][] meetingIntervals) {
        // Step 1: Merge all overlapping meeting intervals
        List<int[]> nonOverlappingMeetings = mergeOverlappingIntervals(meetingIntervals);

        // Step 2: Calculate total meeting days directly from the intervals
        int totalMeetingDays = 0;
        for (int[] interval : nonOverlappingMeetings) {
            totalMeetingDays += (interval[1] - interval[0] + 1);
        }

        // Step 3: Subtract meeting days from total days to get non-meeting days
        return totalDays - totalMeetingDays;
    }

    private List<int[]> mergeOverlappingIntervals(int[][] intervals) {
        List<int[]> mergedIntervalsList = new ArrayList<>();

        Arrays.sort(intervals, (interval1, interval2) -> Integer.compare(interval1[0], interval2[0]));

        int[] currentMerged = { intervals[0][0], intervals[0][1] };

        for (int i = 1; i < intervals.length; i++) {
            if (isOverlapping(currentMerged, intervals[i])) {
                mergeIntoCurrent(currentMerged, intervals[i]);
            } else {
                mergedIntervalsList.add(currentMerged);
                currentMerged = intervals[i];
            }
        }

        mergedIntervalsList.add(currentMerged);
        return mergedIntervalsList;
    }

    private boolean isOverlapping(int[] interval1, int[] interval2) {
        return interval1[1] >= interval2[0];
    }

    private void mergeIntoCurrent(int[] baseInterval, int[] newInterval) {
        baseInterval[1] = Math.max(baseInterval[1], newInterval[1]);
    }
}
