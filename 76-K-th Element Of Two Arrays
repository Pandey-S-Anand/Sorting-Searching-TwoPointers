//Bruteforce Approach

class Solution {
    public long kthElement(int arr1[], int arr2[], int m, int n, int k) {
        int[] merged = mergeTwoSortedArrayIntoThirdSortedArray(arr1, m, arr2, n);
        return merged[k - 1];
    }

    private int[] mergeTwoSortedArrayIntoThirdSortedArray(int[] arr1, int m, int[] arr2, int n) {
        int[] merged = new int[m + n];
        int i = 0, j = 0, k = 0;

        while (i < m && j < n) {
            if (arr1[i] <= arr2[j]) {
                merged[k++] = arr1[i++];
            } else {
                merged[k++] = arr2[j++];
            }
        }

        if (i < m) {
            System.arraycopy(arr1, i, merged, k, m - i);
        }

        if (j < n) {
            System.arraycopy(arr2, j, merged, k, n - j);
        }

        return merged;
    }
}



//Better Approach

class Solution {
    public long kthElement(int arr1[], int arr2[], int m, int n, int k) {
        int[] merged = new int[k];
        int i = 0, j = 0, index = 0;

        while (index <= (k - 1)) {
            if (i < m && j < n) {
                if (arr1[i] <= arr2[j]) {
                    merged[index++] = arr1[i++];
                } else {
                    merged[index++] = arr2[j++];
                }
            } else if (i < m) {
                merged[index++] = arr1[i++];
            } else { // if (j < n)
                merged[index++] = arr2[j++];
            }
        }

        return merged[k - 1];
    }
}


//Good Approach

class Solution {
    public long kthElement(int arr1[], int arr2[], int m, int n, int k) {
        int i = 0, j = 0, currentValue = 0;

        for (int count = 1; count <= k; count++) {
            if (i < m && j < n) {
                if (arr1[i] <= arr2[j]) {
                    currentValue = arr1[i++];
                } else {
                    currentValue = arr2[j++];
                }
            } else if (i < m) {
                currentValue = arr1[i++];
            } else { // if (j < n)
                currentValue = arr2[j++];
            }
        }

        return currentValue;
    }
}


//Optimal Approach


class Solution {
    public long kthElement(int arr1[], int arr2[], int m, int n, int k) {
        // Ensure binary search happens on the smaller array
        if (arr1.length > arr2.length) {
            return kthElement(arr2, arr1, n, m, k);
        }

        int low = 0, high = m;

        while (low <= high) {
            int elementsChosenFromArr1ForLeftPart = low + (high - low) / 2;
            // Below line ensures that the total number of elements in the left part of the combined array is exactly k.
            int elementsChosenFromArr2ForLeftPart = k - elementsChosenFromArr1ForLeftPart;
            /*
             * If elementsChosenFromArr2ForLeftPart is negative, it means we are trying to
             * choose more than 'k' elements from arr1.
             * since choosing a negative number of elements from arr2 is not possible,
             * Adjust 'high' to consider fewer elements from arr1.
             */
            if (elementsChosenFromArr2ForLeftPart < 0) {
                high = elementsChosenFromArr1ForLeftPart - 1;
                continue;
            }
            /*
             * If elementsChosenFromArr2ForLeftPart exceeds the length of arr2 (n), it
             * indicates that we are choosing too few elements from arr1.
             * Consequently, the number of elements required from arr2 exceeds its capacity.
             * Adjust 'low' to consider more elements from arr1.
             */
            if (elementsChosenFromArr2ForLeftPart > n) {
                low = elementsChosenFromArr1ForLeftPart + 1;
                continue;
            }

            int maxInLeftPartFromArr1 = (elementsChosenFromArr1ForLeftPart == 0) ? Integer.MIN_VALUE : arr1[elementsChosenFromArr1ForLeftPart - 1];
            int maxInLeftPartFromArr2 = (elementsChosenFromArr2ForLeftPart == 0) ? Integer.MIN_VALUE : arr2[elementsChosenFromArr2ForLeftPart - 1];
            int minInRightPartFromArr1 = (elementsChosenFromArr1ForLeftPart == m) ? Integer.MAX_VALUE : arr1[elementsChosenFromArr1ForLeftPart];
            int minInRightPartFromArr2 = (elementsChosenFromArr2ForLeftPart == n) ? Integer.MAX_VALUE : arr2[elementsChosenFromArr2ForLeftPart];

            if (maxInLeftPartFromArr1 <= minInRightPartFromArr2 && maxInLeftPartFromArr2 <= minInRightPartFromArr1) {
                return Math.max(maxInLeftPartFromArr1, maxInLeftPartFromArr2);
            } else if (maxInLeftPartFromArr1 > minInRightPartFromArr2) {
                high = elementsChosenFromArr1ForLeftPart - 1;
            } else {
                low = elementsChosenFromArr1ForLeftPart + 1;
            }
        }

        // This return statement is never reached
        return -1;
    }
}
