//Bruteforce Approach

class Solution {
    ArrayList<Long> findMissing(long arr1[], long arr2[], int m, int n) {
        ArrayList<Long> missing = new ArrayList<>();

        for (long val : arr1) {
            if (!linearSearch(val, arr2, n)) {
                missing.add(val);
            }
        }

        return missing;
    }

    private boolean linearSearch(long key, long[] arr, int n) {
        int low = 0, high = n - 1;

        while (low <= high) {
            if ((arr[low] == key) || (arr[high] == key)) {
                return true;
            }
            low++;
            high--;
        }

        return false;
    }
}

// Improved Approach

class Solution {
    ArrayList<Long> findMissing(long arr1[], long arr2[], int m, int n) {
        if (n > m) {
            return findMissing(arr2, arr1, n, m);
        }

        Arrays.sort(arr2);
        ArrayList<Long> missing = new ArrayList<>();

        for (long val : arr1) {
            if (!binarySearch(val, arr2, n)) {
                missing.add(val);
            }
        }

        return missing;
    }

    public boolean binarySearch(long key, long[] arr, int n) {
        int low = 0, high = n - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                return true;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else { // if(key>arr[mid])
                low = mid + 1;
            }
        }

        return false;// key doesnot exists
    }
}

// Better Approach

class Solution {
    ArrayList<Long> findMissing(long arr1[], long arr2[], int m, int n) {
        ArrayList<Long> missing = new ArrayList<>();
        HashSet<Long> set = new HashSet<>();

        for (long val : arr2) {
            set.add(val);
        }

        for (long val : arr1) {
            if (!set.contains(val)) {
                missing.add(val);
            }
        }

        return missing;
    }
}

// Optimal Approach

class Solution {
    ArrayList<Long> findMissing(long arr1[], long arr2[], int m, int n) {
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        ArrayList<Long> missings = new ArrayList<>();

        int i = 0, j = 0;

        while (i < m && j < n) {
            if (arr1[i] == arr2[j]) {
                i++;
                j++;
            } else if (arr1[i] < arr2[j]) {
                missings.add(arr1[i++]);
            } else {
                j++;
            }
        }

        while (i < m) {
            missings.add(arr1[i++]);
        }

        return missings;
    }
}
