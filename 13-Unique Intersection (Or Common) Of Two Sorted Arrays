//Bruteforce Approach

class Solution {
    ArrayList<Integer> intersection(int[] arr1, int[] arr2) {
        // Step 1: Remove duplicates from both sorted arrays in-place
        int newLen1 = removeDuplicatesFromSortedArray(arr1);
        int newLen2 = removeDuplicatesFromSortedArray(arr2);

        // Step 2: Compute intersection on the cleaned arrays
        return intersectionOfTwoSortedArrays(arr1, newLen1, arr2, newLen2);
    }

    // Removes duplicates from a sorted array in-place and returns new length
    private int removeDuplicatesFromSortedArray(int[] arr) {
        int idx = 0;

        // Traverse from start to second last element
        for (int i = 0; i < (arr.length - 1); i++) {
            // Only keep unique elements
            if (arr[i] != arr[i + 1]) {
                arr[idx++] = arr[i];
            }
        }

        // Always include the last element
        arr[idx++] = arr[arr.length - 1];

        return idx; // New length of the deduplicated array
    }

    // Finds intersection of two sorted arrays (with unique elements only)
    private ArrayList<Integer> intersectionOfTwoSortedArrays(int[] arr1, int m, int[] arr2, int n) {
        ArrayList<Integer> intersection = new ArrayList<>();
        int i = 0, j = 0;

        // Use two-pointer approach since arrays are sorted
        while (i < m && j < n) {
            if (arr1[i] == arr2[j]) {
                // If both elements are equal, it's part of the intersection
                intersection.add(arr1[i]);
                i++;
                j++;
            } else if (arr1[i] < arr2[j]) {
                // Move the pointer in arr1 forward if it's smaller
                i++;
            } else {
                // Move the pointer in arr2 forward if it's smaller
                j++;
            }
        }

        return intersection;
    }
}


// Better Approach

class Solution {
    ArrayList<Integer> intersection(int[] arr1, int[] arr2) {

        // Step 1: Store all elements of arr2 into a HashSet to allow O(1) lookup
        Set<Integer> arr2UniqueElements = new HashSet<>();
        ArrayList<Integer> intersection = new ArrayList<>();

        for (int val : arr2) {
            arr2UniqueElements.add(val); // Ensures only unique values from arr2 are stored
        }

        // Step 2: Iterate over arr1 and check if current element exists in arr2's set
        for (int val : arr1) {
            if (arr2UniqueElements.contains(val)) {
                intersection.add(val);              // Add common element to the result
                arr2UniqueElements.remove(val);     // Remove it from set to ensure uniqueness in result
            }
        }

        // Step 3: Return list containing unique common elements
        return intersection;
    }
}


// Optimal Approach

class Solution {
    ArrayList<Integer> intersection(int[] arr1, int[] arr2) {
        int i = 0, j = 0;
        ArrayList<Integer> intersection = new ArrayList<>();
        
        // Variables to store the indices of last processed elements in arr1 and arr2 to help skip duplicates
        int prevArr1Index = -1;
        int prevArr2Index = -1;

        // Traverse both arrays using two pointers
        while (i < arr1.length && j < arr2.length) {
            // Skip duplicates in arr1
            while (i < arr1.length && (prevArr1Index != -1 && arr1[prevArr1Index] == arr1[i])) {
                i++;
            }

            // Skip duplicates in arr2
            while (j < arr2.length && (prevArr2Index != -1 && arr2[prevArr2Index] == arr2[j])) {
                j++;
            }
            
            // Ensure we don't access out-of-bound indices after skipping duplicates
            if (i == arr1.length || j == arr2.length) { 
                break;
            }
            
            // Store previous values to help skip duplicates in the next loop
            if (arr1[i] == arr2[j]) {
                intersection.add(arr1[i]);
                prevArr1Index = i;
                prevArr2Index = j;
                i++;
                j++;
            } else if (arr1[i] < arr2[j]) {// If arr1[i] is smaller, move i forward because arr1[i] cannot match with any future arr2[j]
                i++;
            } else { // If arr2[j] is smaller, move j forward because arr2[j] cannot match with any future arr1[i]
                j++;
            }
        }

        return intersection;
    }
}

//Aliter

class Solution {
    ArrayList<Integer> intersection(int[] arr1, int[] arr2) {
        int i = 0, j = 0;
        ArrayList<Integer> intersection = new ArrayList<>();

        // Traverse both arrays using two pointers
        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] == arr2[j]) {
                /*
                 Check for equality AND ensure no duplicate is added to result:
                 - intersection.isEmpty() handles the first insertion case.
                 - intersection.get(intersection.size() - 1) != arr1[i] avoids inserting duplicates.
                */
                if (intersection.isEmpty() || intersection.get(intersection.size() - 1) != arr1[i]) {
                    intersection.add(arr1[i]);
                }
                i++;
                j++;
            } else if (arr1[i] < arr2[j]) {
                i++;
            } else {
                j++;
            }
        }

        return intersection;
    }
}
