class Solution {
    /**
     * Forms the largest number by arranging the given array of integers.
     * 
     * 🚫 Why normal descending sort won't work:
     * -----------------------------------------
     * Sorting integers in descending order doesn't always produce the largest concatenated number.
     * Example:
     *   Input: [9, 91]
     *   Descending sort → [91, 9] → "919" ❌
     *   But the correct largest number is: "991" ✅
     *   Because: "9" + "91" = "991" > "91" + "9" = "919"
     * 
     * What we are doing instead:
     * -----------------------------
     * - Convert all numbers to strings.
     * - Sort using a custom comparator: Compare two strings s1 and s2 by checking which of (s1 + s2) or (s2 + s1) forms a larger string.
     * - This ensures the optimal order for concatenation.
     * 
     * Example:
     *   Input: [3, 30, 34, 5, 9]
     *   After sorting by custom rule:
     *     → ["9", "5", "34", "3", "30"]
     *   Concatenation → "9534330" ✅
     */
    public String largestNumber(int[] arr) {
        String[] numStrings = new String[arr.length];

        // Step 1: Convert all integers to strings
        for (int i = 0; i < arr.length; i++) {
            numStrings[i] = Integer.toString(arr[i]);
        }

        // Step 2: Sort using custom comparator : Compare (s2 + s1) with (s1 + s2) to decide order
        Arrays.sort(numStrings, (s1, s2) -> (s2 + s1).compareTo(s1 + s2));
        // Alternative: Arrays.sort(strArr, (s1, s2) -> s2.concat(s1).compareTo(s1.concat(s2)));

        // Step 3: Build the result string
        StringBuilder result = new StringBuilder();
        for (String num : numStrings) {
            result.append(num);
        }

        // Step 4: Handle edge case like [0, 0, 0]
        if (result.charAt(0) == '0') {
            return "0";
        }

        return result.toString();
    }
}
