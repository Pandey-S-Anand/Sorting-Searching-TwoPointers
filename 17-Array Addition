//Intuitive Implementation

class Solution {
    public int[] calSum(int arr1[], int arr2[], int m, int n) {
        // Using LinkedList because insertion at front is constant time (O(1))
        LinkedList<Integer> sum = new LinkedList<>();
        int i = m - 1, j = n - 1, carry = 0, base;

        // Traverse both arrays from the end (least significant digit)
        while (i >= 0 && j >= 0) {
            base = (arr1[i] + arr2[j] + carry) % 10;   // Calculate current digit
            carry = (arr1[i] + arr2[j] + carry) / 10;  // Calculate carry
            sum.addFirst(base);                        // Insert at beginning (most significant digit first)
            i--;
            j--;
        }

        // If elements are left in arr1
        while (i >= 0) {
            base = (arr1[i] + carry) % 10;
            carry = (arr1[i] + carry) / 10;
            sum.addFirst(base);
            i--;
        }

        // If elements are left in arr2
        while (j >= 0) {
            base = (arr2[j] + carry) % 10;
            carry = (arr2[j] + carry) / 10;
            sum.addFirst(base);
            j--;
        }

        /*
         * Note:
         * - If carry == 0 → sum.size() == max(m, n)
         * - If carry == 1 → sum.size() == max(m, n) + 1
         */
        if (carry == 1) {
            sum.addFirst(carry);
        }

        // Convert the LinkedList to an int[] array
        int[] arraySum = new int[sum.size()];
        i = 0;
        for (int val : sum) {
            arraySum[i++] = val;
        }

        return arraySum;
    }
}



//Optimal Implementation

class Solution {
    public int[] calSum(int arr1[], int arr2[], int m, int n) {
        LinkedList<Integer> sum = new LinkedList<>();
        int i = m - 1, j = n - 1, carry = 0;

        while (i >= 0 || j >= 0 || carry > 0) {
            int digit1 = (i >= 0) ? arr1[i--] : 0;
            int digit2 = (j >= 0) ? arr2[j--] : 0;
            int base = digit1 + digit2 + carry;
            sum.offerFirst(base % 10);
            carry = base / 10;
        }

        i = 0;
        int[] arraySum = new int[sum.size()];

        for (int val : sum) {
            arraySum[i++] = val;
        }

        return arraySum;
    }
}
