//Bruteforce approach

class Solution {
    /*
     * Problem Constraints:
     * ---------------------------------------------------------------------
     * - Each list of intervals (firstList and secondList) satisfies:
     *     ✅ Pairwise disjoint: No two intervals within a single list overlap.
     *     ✅ Sorted by start times in ascending order.
     *     ✅ In every interval [a, b], it holds that a < b (start time < end time).
     * 
     * Overlap Condition between two intervals [a, b] and [c, d] (where a < b and c < d):
     * ---------------------------------------------------------------------
     * 
     *     a <= d  &&  b >= c
     * 
     * Meaning:
     * - The end of the first interval (b) is not before the start of the second interval (c).
     * - The start of the first interval (a) is not after the end of the second interval (d).
     * 
     * If both these conditions are true, the intervals overlap.
     * 
     * Examples:
     * - [1, 3] and [2, 6] → Overlapping intervals
     * - [1, 6] and [2, 9] → Overlapping intervals
     * - [3, 4] and [2, 3] → Overlapping intervals
     * 
     * Why not just "b >= c"? Why do we also need "a <= d"?
     * ------------------------------------------------------
     * 
     * Reason:
     * Suppose we have:
     * - [8, 3] (a = 8, b = 3) and [1, 6] (c = 1, d = 6).
     * 
     * According to only "b >= c":
     * - 3 (b) >= 1 (c) → true, so it would falsely detect overlap.
     * 
     * However, if you plot the intervals on a timeline:
     * - [8, 3] would start after [1, 6] ends, meaning they do not actually overlap.
     * 
     * Checking "a <= d":
     * - 8 (a) <= 6 (d) → false, correctly indicating no overlap.
     * 
     * ➔ Thus, both conditions are necessary to correctly determine actual overlapping.
     */

    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {
        // List to collect all intersection intervals
        List<int[]> intervalIntersections = new ArrayList<>();

        // Compare each interval from the first list with each interval from the second list
        for (int[] event1 : firstList) {
            for (int[] event2 : secondList) {
                /*
                * Optimization:
                * ------------------------------------------------------
                * - Both firstList and secondList are sorted by start times.
                * - If event2's start (event2[0]) is greater than event1's end (event1[1]),
                *   then all upcoming intervals in secondList will also have their start time
                *   greater than event1's end.
                * 
                * - Therefore, no further intervals in secondList can possibly overlap with event1.
                * - Hence, we can safely break out of the inner loop early.
                */
                if (event2[0] > event1[1]) {
                    break;
                }
                // If the two intervals overlap, calculate the intersection
                if (isOverlapping(event1, event2)) {
                    int overlapStart = Math.max(event1[0], event2[0]);
                    int overlapEnd = Math.min(event1[1], event2[1]);
                    intervalIntersections.add(new int[] { overlapStart, overlapEnd });
                }
            }
        }

        // Convert the list of intersections to a 2D array and return
        return intervalIntersections.toArray(new int[intervalIntersections.size()][2]);
    }

    private boolean isOverlapping(int[] event1, int[] event2) {
        return event1[0] <= event2[1] && event1[1] >= event2[0];
    }
}



//Optimal approach

class Solution {
    public int[][] intervalIntersection(int[][] firstList, int[][] secondList) {
        List<int[]> intervalIntersections = new ArrayList<>();
        int i = 0, j = 0;

        while (i < firstList.length && j < secondList.length) {
            int[] event1 = firstList[i];
            int[] event2 = secondList[j];

            if (isOverlapping(event1, event2)) {
                int overlapStart = Math.max(event1[0], event2[0]);
                int overlapEnd = Math.min(event1[1], event2[1]);
                intervalIntersections.add(new int[] { overlapStart, overlapEnd });
            }

            /*
            * Interval Intersection Two‐Pointer Logic :
            * 
            * Example Input:
            *   firstList  = [[0,2],   [5,10],      [13,23],     [24,25]]
            *   secondList =    [[1,5],    [8,12],      [15,24],    [25,26]]
            * 
            * Number-Line Diagram (indices shown for reference):
            * 
            *    0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26
            *    ─────────────────────────────────────────────────────────────────────────────────────────────────────
            * FL: [0───2]     [5─────────10]     [13──────────23]  [24─25]
            * SL:    [1─────────5]     [8─────12]      [15─────────24]   [25─26]
            * 
            * Two-Pointer Rule:
            * -----------------
            * At each step we compare firstList[i] vs. secondList[j]:
            *   - Record their intersection (if any).
            *   - Then "drop" (advance) the interval that ends first, because:
            * 
            *     1. Each list is sorted by start time and pairwise disjoint (no overlapping intervals in the particular list).
            *        That implies for any consecutive intervals [a,b] and [c,d] in one list:
            *           b < c .
            * 
            *     2. After comparing two intervals A=[s1,e1] and B=[s2,e2]:
            *        • If e1 < e2 → A ends strictly before B ends.
            *          Every subsequentfuture interval in secondList has start > e2 .
            *          Therefore A cannot overlap with any future intervals in secondList.
            *          Otherwise (e2 ≤ e1) → B ends first (or together), so advance j.
            */

            if (event1[1] <= event2[1]) {
                i++;
            } else {
                j++;
            }
        }

        return intervalIntersections.toArray(new int[intervalIntersections.size()][2]);
    }

    private boolean isOverlapping(int[] event1, int[] event2) {
        return event1[0] <= event2[1] && event1[1] >= event2[0];
    }
}
