//Bruteforce Approach

class Solution {
    public int search(int[] arr, int target) {
        // Iterate over each element in the array
        for (int i = 0; i < arr.length; i++) {
            // If current element matches the target, return its index
            if (arr[i] == target) {
                return i;
            }
        }

        // Target not found in the entire array, return -1
        return -1;
    }
}


//Good Approach

class Solution {
    public int search(int[] arr, int target) {
        // Step 1: Find the index where the rotation has happened. This will be the index of the largest element.
        int pivotIndex = findPivotIndex(arr);

        /*
         * Step 2: Once we know the pivot, the array is split into two sorted subarrays:
         * - From index 0 to pivot (first part)
         * - From pivot + 1 to end (second part)
         * 
         * Perform binary search in both subarrays to find the target.
         */
        // Search in the left sorted subarray
        int index = binarySearch(arr, 0, pivotIndex, target);
        if (index != -1) {
            return index;
        }

        // If not found in left, search in the right sorted subarray
        return binarySearch(arr, pivotIndex + 1, arr.length - 1, target);
    }

    private int findPivotIndex(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                return i;
            }
        }
        //If the array is **not rotated at all** (it is already fully sorted). In this case, the pivot is effectively the last index of the array.
        return arr.length - 1;
    }

    private int binarySearch(int[] arr, int low, int high, int target) {
        if (low > high) {
            return -1;
        }

        int mid = low + (high - low) / 2;

        if (arr[mid] == target) {
            return mid;
        }

        if (arr[mid] < target) {
            return binarySearch(arr, mid + 1, high, target);
        }

        return binarySearch(arr, low, mid - 1, target);
    }
}


//Optimal Approach

class Solution {
    public int search(int[] arr, int target) {
        // Step 1: Find the pivot index (i.e., the index of the largest element)
        int pivotIndex = findPivotIndex(arr);

        // Step 2: Perform binary search in the left sorted portion [0...pivot]
        int index = binarySearch(arr, 0, pivotIndex, target);
        if (index != -1) {
            return index;
        }

        // Step 3: If not found in the left, search in the right sorted portion [pivot+1...end]
        return binarySearch(arr, pivotIndex + 1, arr.length - 1, target);
    }

    private int binarySearch(int[] arr, int low, int high, int target) {
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                return mid; // Found the target
            }

            if (target < arr[mid]) {
                high = mid - 1; // Search left half
            } else {
                low = mid + 1; // Search right half
            }
        }

        return -1; //Target not found
    }

    private int findPivotIndex(int[] arr) {
        /* 
         Edge Case 1: Single element array → it's the pivot
         Edge Case 2: Array is already sorted (not rotated) → last element is the largest
        */
        if (arr.length == 1 || arr[0] < arr[arr.length - 1]) {
            return arr.length - 1;
        }

        // If the above condition is false, it confirms that the array is both sorted and rotated
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Case 1: mid is the pivot if it is greater than the next element
            if (arr[mid] > arr[mid + 1]) {
                return mid;
            }

            /*
                🔹 How to determine if the left half is sorted?
                   If arr[low] < arr[mid], then the segment [low...mid] is sorted.
                   In a rotated sorted array with all unique elements, a properly sorted
                   half will always have the first element < the last element.
            
                ✅ Example:
                   arr = [4, 5, 6, 7, 0, 1, 2]
                   low = 0, mid = 3 → arr[low] = 4, arr[mid] = 7 → 4 < 7 → left half is sorted
            
                🔸 Binary Search Use Case:
                   - If the pivot is not in the sorted half, eliminate that half
                   - Continue searching in the unsorted half
             */

            /*
                🔹 Why is the condition (low == mid) important?
            
                ⚠️ Edge Case Example: [8, 9, 2, 3, 4]
                Step-by-step:
                - Initially: low = 0, high = 4
                - mid = (0 + 4) / 2 = 2
                - arr[mid] = 2, arr[low] = 8
            
                Since arr[low] > arr[mid], pivot lies in the left half
                → Move left: low = 0, high = 1
            
                Now:
                - mid = (0 + 1) / 2 = 0
            
                If we check: arr[low] < arr[mid] → 8 < 8 → false
                This would incorrectly indicate an unsorted left half.
                We move left → high = mid - 1 = -1 → out of bounds!
            
                ❌ Problem: We exit the loop without finding the pivot.
            
                ✅ Solution:
                When low == mid, it means the left half contains only one element,
                which is trivially sorted. So, we must move to the right (low = mid + 1)
                to avoid incorrect movement.
             */

            // Note:  Since the array is rotated (Ascending order), the largest element (pivot) cannot be at the last index, so mid will never equal arr.length - 1 during pivot search
            if (low == mid || arr[low] < arr[mid]) {
                // Left half is sorted or only one element → pivot is in the right half
                low = mid + 1;
            } else {
                // Right half is sorted, so pivot must be in the left half → move search to left half
                /*
                      Important note:
                      So, in a rotated sorted array (with or without duplicates), at least one half (left or right) is always sorted.
                      
                      Example: arr = [6, 7, 1, 2, 3, 4, 5]
                      low = 0, high = 6, mid = 3, arr[mid] = 2
                
                      Check left half [low..mid]: arr[low] = 6, arr[mid] = 2
                      Since 6 > 2, left half is NOT sorted.
                      That means right half [mid..high] is sorted.
                      Therefore, pivot must lie in the left half.
                      So, we move 'high' pointer to mid - 1 to search left half.
                */
                high = mid - 1;
            }
        }

        // Ideally unreachable for a valid rotated sorted array
        return -1;
    }
}
