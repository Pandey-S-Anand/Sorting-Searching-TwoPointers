//Bruteforce Approach

class Solution {
    /**
     * Checks if a given number is a perfect square.
     *
     * Logic:
     * ----------
     * - Uses `Math.sqrt()` to compute the square root of the input number.
     * - If the square root is an integer (i.e., no decimal part),
     *   then the number is a perfect square.
     *
     *
     * Dry Run Example:
     * -------------------
     * Input: 16
     * sqrt = Math.sqrt(16) = 4.0
     * (int) sqrt = 4
     * 4.0 == 4 → true → 16 is a perfect square
     *
     * Input: 18
     * sqrt = Math.sqrt(18) ≈ 4.24
     * (int) sqrt = 4
     * 4.24 != 4 → false → 18 is not a perfect square
     */
    public boolean isPerfectSquare(int num) {
        double sqrt = Math.sqrt(num);             // Compute square root
        return sqrt == (int) (sqrt);              // Compare float vs integer version
    }
}


//Optimal Approach

class Solution {
    public boolean isPerfectSquare(int num) {
        int low = 0, high = num;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Use long to avoid overflow from mid * mid
            long square = (long) mid * mid;

            if (square == num) {
                return true; // Perfect square root found
            } else if (square < num) {
                low = mid + 1; // Try finding a higher root
            } else {
                high = mid - 1; // Try lower half
            }
        }

        return false; // num is not a perfect square
    }
}
