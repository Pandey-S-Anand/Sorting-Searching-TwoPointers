//Bruteforce approach

class Solution {
    public int minDays(int[] bloomDay, int requiredBouquets, int flowersPerBouquet) {
        int totalFlowersNeeded = requiredBouquets * flowersPerBouquet; // Total flowers required to form 'requiredBouquets' bouquets
        int totalFlowersAvailable = bloomDay.length; // Total flowers in the garden

        // If we don't have enough flowers, it's impossible to form 'requiredBouquets' bouquets
        if (totalFlowersAvailable < totalFlowersNeeded) {
            return -1;
        }

        /*
        * Why do we find the minimum and maximum bloom days?
        * - The minimum bloom day tells us the **earliest possible** time when any flower blooms.
        * - We start checking from this day because we want the **minimum number of wait days**.
        * - The maximum bloom day is the last day when all flowers will have bloomed.
        * - On this day, we **will definitely** be able to form 'm' bouquets.
        * - Hence, our answer **must** lie between [min bloom day, max bloom day].
        */
        // Find the minimum and maximum bloom days
        int[] minMaxDays = getBloomDayRange(bloomDay);
        int earliestBloomDay = minMaxDays[0];
        int latestBloomDay = minMaxDays[1];

        // Brute-force checking from the earliest possible bloom day to the latest
        for (int candidateDay = earliestBloomDay; candidateDay <= latestBloomDay; candidateDay++) {
            //Check if it's possible to form 'm' bouquet on this current day
            if (canMakeBouquetsOnDay(bloomDay, candidateDay, flowersPerBouquet, requiredBouquets)) {
                return candidateDay;
            }
        }
        // This return statement will NEVER be reached because we've already checked that there are enough flowers to form bouquets.
        return -1;
    }

    private int[] getBloomDayRange(int[] bloomDay) {
        int left = 0, right = bloomDay.length - 1;
        int minDay = Integer.MAX_VALUE, maxDay = Integer.MIN_VALUE;

        // Two-pointer approach to find the min and max bloom days efficiently
        while (left <= right) {
            minDay = Math.min(minDay, Math.min(bloomDay[left], bloomDay[right]));
            maxDay = Math.max(maxDay, Math.max(bloomDay[left], bloomDay[right]));
            left++;
            right--;
        }

        return new int[] { minDay, maxDay };
    }

    private boolean canMakeBouquetsOnDay(int[] bloomDay, int day, int flowersPerBouquet, int requiredBouquets) {
        int consecutiveFlowers = 0; // Count of consecutive bloomed flowers
        int bouquetsFormed = 0; // Number of bouquets formed so far

        // Iterate over each flower in bloomDay to check if it's bloomed by 'day'
        for (int flowerBloomDay : bloomDay) {
            if (flowerBloomDay <= day) {
                consecutiveFlowers++; // This flower has bloomed, count it
            } else {
                // If flowers are not consecutive, check how many bouquets were formed
                bouquetsFormed += (consecutiveFlowers / flowersPerBouquet);
                consecutiveFlowers = 0; // Reset consecutive count

                if (bouquetsFormed >= requiredBouquets) {
                    return true; // If enough bouquets are formed, return the day
                }
            }
        }

        // Check for any remaining bouquets that can be formed at the end
        bouquetsFormed += (consecutiveFlowers / flowersPerBouquet);

        return bouquetsFormed >= requiredBouquets;
    }
}


//Optimal approach (We can optimize this using Binary Search because: The range is sorted â†’ The minimum bloom day to the maximum bloom day forms a sorted sequence.)

class Solution {
    public int minDays(int[] bloomDay, int requiredBouquets, int flowersPerBouquet) {
        int totalFlowersNeeded = requiredBouquets * flowersPerBouquet;
        int totalFlowersAvailable = bloomDay.length;

        if (totalFlowersAvailable < totalFlowersNeeded) {
            return -1;
        }

        int[] minMaxDays = getBloomDayRange(bloomDay);
        int low = minMaxDays[0];
        int high = minMaxDays[1];
        int earliestPossibleDay = -1;

        // Apply binary search on bloom days
        while (low <= high) {
            int candidateDay = low + (high - low) / 2;

            // Check if we can make at least 'requiredBouquets' bouquets on the current day
            if (canMakeBouquetsOnDay(bloomDay, candidateDay, flowersPerBouquet, requiredBouquets)) {
                earliestPossibleDay = candidateDay; // Store the valid answer
                high = candidateDay - 1; // Try for an earlier possible day
            } else {
                low = candidateDay + 1; // Increase days if we can't form enough bouquets
            }
        }

        return earliestPossibleDay;
    }

    private int[] getBloomDayRange(int[] bloomDay) {
        int left = 0, right = bloomDay.length - 1;
        int minDay = Integer.MAX_VALUE, maxDay = Integer.MIN_VALUE;

        while (left <= right) {
            minDay = Math.min(minDay, Math.min(bloomDay[left], bloomDay[right]));
            maxDay = Math.max(maxDay, Math.max(bloomDay[left], bloomDay[right]));
            left++;
            right--;
        }

        return new int[] { minDay, maxDay };
    }

    private boolean canMakeBouquetsOnDay(int[] bloomDay, int candidateDay, int flowersPerBouquet, int requiredBouquets) {
        int consecutiveFlowers = 0;
        int bouquetsFormed = 0;

        for (int flowerBloomDay : bloomDay) {
            if (flowerBloomDay <= candidateDay) {
                consecutiveFlowers++;
            } else {
                bouquetsFormed += (consecutiveFlowers / flowersPerBouquet);
                consecutiveFlowers = 0;

                if (bouquetsFormed >= requiredBouquets) {
                    return true;
                }
            }
        }

        bouquetsFormed += (consecutiveFlowers / flowersPerBouquet);

        return bouquetsFormed >= requiredBouquets;
    }
}
