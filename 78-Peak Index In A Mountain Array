/*
Since the given array is a mountain array, it will always have a single peak element.
A mountain array first strictly increases to a peak and then strictly decreases.
The peak element in a mountain array will always be greater than both its neighbors.
Note: The first and last elements of the array cannot be the peak,because a peak requires both left and right neighbors to compare.
*/

//Bruteforce Approach

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        for (int i = 1; i < arr.length - 1; i++) {
            if (arr[i] > arr[i - 1] && arr[i] > arr[i + 1]) {
                return i;
            }
        }
        // This return statement will never be reached as the array is guaranteed to be a mountain array.
        return -1;
    }
}

//Optimal Approach

class Solution {
    public int peakIndexInMountainArray(int[] arr) {
        return findPeakElementIndex(arr);
    }

    private int findPeakElementIndex(int[] arr) {
        int low = 1, high = arr.length - 2, mid = 0;

        while (low <= high) {
            mid = low + (high - low) / 2;

            if ((arr[mid] > arr[mid - 1]) && (arr[mid] > arr[mid + 1])) {
                return mid;
            } else if (arr[mid] > arr[mid - 1] && arr[mid] < arr[mid + 1]) {
                low = mid + 1;
            } else { // if (arr[mid]< arr[mid-1] && arr[mid] > arr[mid + 1])
                high = mid - 1;
            }
        }

        return mid;
    }
}
