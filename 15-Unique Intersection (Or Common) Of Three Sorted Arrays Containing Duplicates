//Bruteforce Approach

class Solution {
    // Function to find common elements in three sorted arrays
    public List<Integer> commonElements(List<Integer> arr1, List<Integer> arr2, List<Integer> arr3) {
        // Remove duplicates from each sorted array and get their new lengths
        int len1 = removeDuplicatesFromSortedArray(arr1);
        int len2 = removeDuplicatesFromSortedArray(arr2);
        int len3 = removeDuplicatesFromSortedArray(arr3);

        // Step 1: Find intersection of arr1 and arr2
        List<Integer> intersectionOfTwoSortedArrays = findIntersectionOfTwoSortedArrays(arr1, len1, arr2, len2);

        // Step 2: Find intersection of above result with arr3
        return findIntersectionOfTwoSortedArrays(intersectionOfTwoSortedArrays, intersectionOfTwoSortedArrays.size(), arr3, len3);
    }

    private List<Integer> findIntersectionOfTwoSortedArrays(List<Integer> arr1, int m, List<Integer> arr2, int n) {
        int i = 0, j = 0;
        List<Integer> intersection = new ArrayList<>();

        while (i < m && j < n) {
            if (arr1.get(i).equals(arr2.get(j))) {
                intersection.add(arr1.get(i));
                i++;
                j++;
            } else if (arr1.get(i).compareTo(arr2.get(j)) < 0) {
                i++;
            } else {
                j++;
            }
        }

        return intersection;
    }

    private int removeDuplicatesFromSortedArray(List<Integer> arr) {
        int index = 0;

        for (int i = 0; i < arr.size() - 1; i++) {
            if (!arr.get(i).equals(arr.get(i + 1))) {
                arr.set(index++, arr.get(i));
            }
        }

        arr.set(index, arr.get(arr.size() - 1));

        return index + 1;
    }
}


// Optimal Approach

class Solution {
    public List<Integer> commonElements(List<Integer> arr1, List<Integer> arr2, List<Integer> arr3) {
        int i = 0, j = 0, k = 0;

        // Variables to store the indices of last processed elements in arr1 and arr2 to help skip duplicates
        int prevArr1Index = -1;
        int prevArr2Index = -1;
        int prevArr3Index = -1;

        List<Integer> intersection = new ArrayList<>();

        while (i < arr1.size() && j < arr2.size() && k < arr3.size()) {
            // Skip duplicates in arr1
            while (i < arr1.size() && (prevArr1Index != -1 && arr1.get(i).equals(arr1.get(prevArr1Index)))) {
                i++;
            }

            // Skip duplicates in arr2
            while (j < arr2.size() && (prevArr2Index != -1 && arr2.get(j).equals(arr2.get(prevArr2Index)))) {
                j++;
            }

            // Skip duplicates in arr3
            while (k < arr3.size() && (prevArr3Index != -1 && arr3.get(k).equals(arr3.get(prevArr3Index)))) {
                k++;
            }

            // Ensure indices are still valid after skipping
            if (i == arr1.size() || j == arr2.size() || k == arr3.size()) {
                break;
            }

            int val1 = arr1.get(i), val2 = arr2.get(j), val3 = arr3.get(k);

            // If all three values are equal, it's a common element
            if (val1 == val2 && val2 == val3) {
                intersection.add(val1);
                prevArr1Index = i;
                prevArr2Index = j;
                prevArr3Index = k;
                i++;
                j++;
                k++;
            } else {
                // Move the pointer with the smallest value forward
                int min = Math.min(val1, Math.min(val2, val3));
                if (min == val1) {
                    i++;
                } else if (min == val2) {
                    j++;
                } else {
                    k++;
                }
            }
        }

        return intersection;
    }
}


// Aliter

class Solution {
    public List<Integer> commonElements(List<Integer> arr1, List<Integer> arr2, List<Integer> arr3) {
        int i = 0, j = 0, k = 0;

        // List to store the final common elements
        List<Integer> intersection = new ArrayList<>();

        // Traverse all three arrays simultaneously
        while (i < arr1.size() && j < arr2.size() && k < arr3.size()) {
            // Get current values from each list
            int val1 = arr1.get(i);
            int val2 = arr2.get(j);
            int val3 = arr3.get(k);

            // Case 1: If all three values are equal, we found a common element
            if (val1 == val2 && val2 == val3) {
                /*
                To avoid duplicates in the result:
                - intersection.isEmpty(): ensures the first element is always added
                - intersection.get(intersection.size() - 1) != val1: 
                prevents adding a duplicate when consecutive values are equal
                */
                if (intersection.isEmpty() || intersection.get(intersection.size() - 1) != val1) {
                    intersection.add(val1);
                }

                // Move all pointers forward
                i++;
                j++;
                k++;
            } else {
                // Case 2: Advance the pointer(s) at the smallest value
                int min = Math.min(val1, Math.min(val2, val3));

                if (min == val1) {
                    i++;
                } else if (min == val2) {
                    j++;
                } else {
                    k++;
                }
            }
        }

        return intersection;
    }
}
