//Bruteforce approach

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        // Create a new array to hold all intervals including the new one
        int[][] updatedIntervals = new int[intervals.length + 1][2];
        int idx = 0;

        // Copy existing intervals into the new array
        for (int[] interval : intervals) {
            updatedIntervals[idx++] = interval;
        }

        // Add the new interval at the end
        updatedIntervals[idx] = newInterval;

        // Merge overlapping intervals and return the result
        return mergeOverlappingIntervals(updatedIntervals);
    }

    private int[][] mergeOverlappingIntervals(int[][] intervals) {
        if (intervals.length == 1) {
            return intervals;
        }

        Arrays.sort(intervals, (interval1, interval2) -> Integer.compare(interval1[0], interval2[0]));

        List<int[]> merged = new ArrayList<>();

        int[] currentInterval = intervals[0];

        for (int i = 1; i < intervals.length; i++) {
            int[] nextInterval = intervals[i];

            if (isOverlapping(currentInterval, nextInterval)) {
                mergeIntoCurrent(currentInterval, nextInterval);
            } else {
                merged.add(currentInterval);
                currentInterval = nextInterval;
            }
        }

        merged.add(currentInterval);

        return merged.toArray(new int[merged.size()][2]);
    }

    private boolean isOverlapping(int[] intervalA, int[] intervalB) {
        return intervalA[1] >= intervalB[0]; // end of A is >= start of B
    }

    private void mergeIntoCurrent(int[] intervalA, int[] intervalB) {
        intervalA[1] = Math.max(intervalA[1], intervalB[1]);
    }
}


//Better approach

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        // Inserts the new interval into the correct position so that the array remains sorted by start times.
        int[][] updatedIntervals = insertInSortedOrder(intervals, newInterval);

        // Step 2: Merge overlapping intervals and return the result
        return mergeOverlappingIntervals(updatedIntervals);
    }

    private int[][] insertInSortedOrder(int[][] intervals, int[] newInterval) {
        int left = 0, right = intervals.length - 1;
        int lastSmallerIndex = -1; // Last index where interval[i][0] <= newInterval[0]
        int newIntervalStart = newInterval[0];

        // Binary search to find position to insert based on start time
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int currentIntervalStart = intervals[mid][0];
            /*
            We break out of the binary search when we find an interval whose start
            exactly matches the start of the newInterval. because the input constraint guarantees that all intervals 
            are non-overlapping and sorted by start time. Therefore, no two intervals 
            can have the same start value — having the same start would cause 
            overlapping, which violates the constraints.
            */

            if (currentIntervalStart == newIntervalStart) {
                lastSmallerIndex = mid;
                break;
            } else if (currentIntervalStart < newIntervalStart) {
                lastSmallerIndex = mid;
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }

        int[][] updatedIntervals = new int[intervals.length + 1][2];
        int index = 0;

        // Step 1: Copy intervals before insertion point
        while (index <= lastSmallerIndex) {
            updatedIntervals[index] = intervals[index];
            index++;
        }

        // Step 2: Insert new interval
        updatedIntervals[index++] = newInterval;

        // Step 3: Copy remaining intervals
        int originalIndex = lastSmallerIndex + 1;
        while (index < updatedIntervals.length) {
            updatedIntervals[index++] = intervals[originalIndex++];
        }

        return updatedIntervals;
    }

    private int[][] mergeOverlappingIntervals(int[][] intervals) {
        if (intervals.length == 1) {
            return intervals;
        }

        List<int[]> nonOverlappingIntervals = new ArrayList<>();

        int[] currentInterval = intervals[0];

        for (int i = 1; i < intervals.length; i++) {
            int[] nextInterval = intervals[i];

            if (isOverlapping(currentInterval, nextInterval)) {
                mergeIntoCurrent(currentInterval, nextInterval);
            } else {
                nonOverlappingIntervals.add(currentInterval);
                currentInterval = nextInterval;
            }
        }

        nonOverlappingIntervals.add(currentInterval);

        return nonOverlappingIntervals.toArray(new int[merged.size()][2]);
    }

    private boolean isOverlapping(int[] intervalA, int[] intervalB) {
        return intervalA[1] >= intervalB[0];
    }

    private void mergeIntoCurrent(int[] intervalA, int[] intervalB) {
        intervalA[1] = Math.max(intervalA[1], intervalB[1]);
    }
}

//Optimal approach

class Solution {
    public int[][] insert(int[][] intervals, int[] newInterval) {
        /*
            Input Intervals: [[1,3], [6,7], [8,10], [13,15], [18,20], [22,25]]
            New Interval: [7,19]
        
            Step 1: Add all intervals ending before 7 (i.e., intervals[i][1] < 7)
                → [1,3] → ends at 3 < 7 → add to nonOverlappingIntervals
                → [6,7] → ends at 7 == 7 → not < 7 → stop here
        
            Step 2: Merge all intervals that overlap with [7,19]
                → [6,7] overlaps since 6 <= 19 → merge → newInterval = [6,19]
                → [8,10] overlaps since 8 <= 19 → merge → newInterval = [6,19]
                → [13,15] overlaps since 13 <= 19 → merge → newInterval = [6,19]
                → [18,20] overlaps since 18 <= 19 → merge → newInterval = [6,20]
                → [22,25] → 22 > 20 → stop merging
        
            Step 3: Add merged interval [6,20] to nonOverlappingIntervals
        
            Step 4: Add remaining intervals
                → [22,25] → add to nonOverlappingIntervals
        
            Final Result: [[1,3], [6,20], [22,25]]
        */

        List<int[]> nonOverlappingIntervals = new ArrayList<>();
        int i = 0;

        // Step 1: Add all intervals that end before newInterval starts
        while (i < intervals.length && intervals[i][1] < newInterval[0]) {
            nonOverlappingIntervals.add(intervals[i++]);
        }

        // Step 2: Merge overlapping intervals with newInterval
        while (i < intervals.length && newInterval[1] >= intervals[i][0]) {
            newInterval[0] = Math.min(newInterval[0], intervals[i][0]);
            newInterval[1] = Math.max(newInterval[1], intervals[i][1]);
            i++;
        }

        // Add the merged interval
        nonOverlappingIntervals.add(newInterval);

        // Step 3: Add remaining intervals
        while (i < intervals.length) {
            nonOverlappingIntervals.add(intervals[i++]);
        }

        return nonOverlappingIntervals.toArray(new int[nonOverlappingIntervals.size()][]);
    }
}
