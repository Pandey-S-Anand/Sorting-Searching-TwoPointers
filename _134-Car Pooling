//Bruteforce approach

class Solution {
    /*
    * Dry Run at location = 7 to explain why we use `location < to`:
    *
    * Trips:
    * [3,1,8], [5,3,10], [1,6,7], [2,7,11], [2,12,20]
    *
    * At location = 7:
    * - Trip1: 1 ≤ 7 < 8  → in car (3)
    * - Trip2: 3 ≤ 7 < 10 → in car (5)
    * - Trip3: 6 ≤ 7 < 7  → ❌ dropped at 7 (not in car)
    * - Trip4: 7 ≤ 7 < 11 → just picked up (2)
    * - Trip5: not started
    *
    * Total passengers = 3 + 5 + 2 = 10 (✅ within capacity)
    *
    * If we used `<= to`, Trip3 would wrongly be counted → total = 11 ❌
    *
    * Hence, correct condition is: `location >= from && location < to`
    */

    public boolean carPooling(int[][] trips, int capacity) {
        // Simulate every km from 1 to 1000
        for (int location = 0; location <= 1000; location++) {
            int currentPassengers = 0;

            // Check each trip: is it active at this km?
            for (int[] trip : trips) {
                int numPassengers = trip[0];
                int from = trip[1];
                int to = trip[2];

                // If trip is active now (picked up but not yet dropped off)
                if (location >= from && location < to) {
                    currentPassengers += numPassengers;
                }
            }

            // If car is overloaded
            if (currentPassengers > capacity) {
                return false;
            }
        }

        return true; // Never overloaded at any km
    }
}


// Improved approach

class Solution {
    public boolean carPooling(int[][] trips, int capacity) {
        // Sort trips by the pickup location (from)
        Arrays.sort(trips, (trip1, trip2) -> Integer.compare(trip1[1], trip2[1]));

        // Iterate through each possible location (km from 0 to 1000)
        for (int location = 0; location <= 1000; location++) {
            int currentPassengers = 0;

            // Loop through all trips and add/remove passengers based on the location
            for (int i = 0; i < trips.length; i++) {
                int[] trip = trips[i];
                int numPassengers = trip[0];
                int from = trip[1];
                int to = trip[2];

                /*
                 * If from > location for a particular trip, that means the car is still before the trip starts.
                 * Since the trips are sorted by 'from', all subsequent trips will also have 'from' > location
                 * and will not be active at this location either.
                 */
                if (from > location) {
                    break; // No need to check further trips as they won't be active at this location
                }

                // If the current location is before the drop-off, add passengers
                if (location < to) {
                    currentPassengers += numPassengers;
                }
            }

            // If the number of passengers exceeds the car's capacity, return false
            if (currentPassengers > capacity) {
                return false; // Car is overloaded
            }
        }

        return true; // Never overloaded at any km
    }
}


//Optimal approach

/*
 * Explanation of the approach:
 *
 * 1. The TreeMap stores the **change in the number of passengers** at each location.
 *    - For each trip, we add passengers at the pick-up location (`from`), and we remove passengers at the drop-off location (`to`).
 *    - The TreeMap automatically keeps the locations sorted, which allows us to process them in increasing order (from the smallest location to the largest).
 *    - This allows us to process events in chronological order without additional sorting logic.
 *    
 * 2. The key idea here is that the TreeMap does **not directly store the number of passengers** at each location.
 *    - Instead, it tracks the **change** in passengers (i.e., how many to pick up or drop off).
 *    - We use the `currentPassengers` variable to **track the running total** of passengers in the car as we process the sorted locations.
 *
 * 3. Example Dry Run:
 *    Input: trips = [[3,1,5], [2,2,7], [4,3,6], [1,4,7], [3,6,8]], capacity = 10
 *
 *    After building the TreeMap, we have:
 *    events = {1=3, 2=2, 3=4, 4=1, 5=-3, 6=-1, 7=-3, 8=-3}
 *
 *    Processing in order:
 *    - Location 1: +3 → currentPassengers = 3
 *    - Location 2: +2 → currentPassengers = 5
 *    - Location 3: +4 → currentPassengers = 9
 *    - Location 4: +1 → currentPassengers = 10
 *    - Location 5: -3 → currentPassengers = 7
 *    - Location 6: -1 → currentPassengers = 6
 *    - Location 7: -3 → currentPassengers = 3
 *    - Location 8: -3 → currentPassengers = 0
 *
 *    At no point did we exceed the capacity, so the result is `true`.
 */
class Solution {
    public boolean carPooling(int[][] trips, int capacity) {
        TreeMap<Integer, Integer> events = new TreeMap<>();

        // Record pick-up and drop-off events for each trip
        for (int[] trip : trips) {
            int numPassengers = trip[0];
            int from = trip[1];
            int to = trip[2];

            // Increment passenger count at pickup location
            events.put(from, events.getOrDefault(from, 0) + numPassengers);

            // Decrement passenger count at drop-off location
            events.put(to, events.getOrDefault(to, 0) - numPassengers);
        }

        int currentPassengers = 0;

        // Process each location in sorted order
        for (int location : events.keySet()) {
            currentPassengers += events.get(location);

            // If capacity exceeded, return false
            if (currentPassengers > capacity) {
                return false;
            }
        }

        return true; // All trips are possible within capacity
    }
}
