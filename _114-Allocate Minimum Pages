//Bruteforce approach

class Solution {
    public static int findPages(int[] arr, int k) {
        /*
        The search range for binary search should start from the maximum value in the array 
        (i.e., the book with the most pages) and end at the sum of all pages in the array. 
        
        The goal is to minimize the maximum number of pages assigned to any student.
        
        Why?
        
        * Lower Bound (max value in the array):
        - Each student must receive at least one book.
        - The minimum possible pages assigned to any student must be at least the maximum 
          number of pages in a single book.
        - If we try to assign fewer pages than this, at least one book will remain unallocated, 
          making the distribution invalid.
        - This scenario is especially relevant when the number of books is equal to the number 
          of students, as each student will get exactly one book.
        
        * Upper Bound (sum of all pages in the array):
        - If there is only one student, they must take all the books.
        - In the worst case, the maximum pages assigned to a student would be the sum of all pages.
        - There is no point in allocating more pages than the total sum of all pages, 
          because we are trying to minimize the maximum number of pages assigned.
        
        * Edge Case:
        - If the number of books is less than the number of students, return -1.
        - This is because each student must receive at least one book, making such a scenario invalid.
        
        Example 1 (Books > Students):
        
        Given 5 books with pages: [10, 20, 30, 40, 50]  
        Number of students: 4  
        
        Possible valid allocations (each group represents a student’s assigned books):
        
        1. [10] [20] [30] [40, 50] → Maximum pages assigned = 90  
        2. [10] [20] [30, 40] [50] → Maximum pages assigned = 70  
        3. [10] [20, 30] [40] [50] → Maximum pages assigned = 60  
        4. [10, 20] [30] [40] [50] → Maximum pages assigned = 50  
        
        The optimal allocation is the one that minimizes the maximum number of pages assigned to any student.  
        In this case, **option 4 is the best**, as it minimizes the maximum pages assigned to a student to **50**.
        
        ---
        
        Example 2 (Books = Students):
        
        Given 4 books with pages: [5, 10, 15, 20]  
        Number of students: 4  
        
        Possible valid allocations:
        
        1. [5] [10] [15] [20] → Maximum pages assigned = 20  
        
        Since the number of books is equal to the number of students, each student must receive exactly one book.  
        Thus, the optimal allocation is **[5] [10] [15] [20]**, with the maximum pages assigned being **20**.
        */

        if (arr.length < k) {
            return -1; // Not enough books for every student to get at least one
        }

        int[] maxAndTotalSum = findMaxAndTotalSum(arr);
        int minAllocatedPages = maxAndTotalSum[0]; // The largest single book's pages (minimum possible limit).
        int maxAllocatedPages = maxAndTotalSum[1]; // The sum of all book pages (maximum possible limit).

        // Iterate linearly from the smallest to the largest possible maxPages limit
        for (int allocatedPages = minAllocatedPages; allocatedPages <= maxAllocatedPages; allocatedPages++) {
            if (canAllocate(arr, allocatedPages, k)) {
                return allocatedPages;
            }
        }

        return -1; // This line will never be reached due to constraints
    }

    private static boolean canAllocate(int[] arr, int allocatedPages, int k) {
        int studentsUsed = 1; // Start with one student
        int currentPages = 0; // Pages assigned to the current student

        for (int i = 0; i < arr.length; i++) {
            if (currentPages + arr[i] > allocatedPages) {
                // Allocate to a new student
                studentsUsed++;
                currentPages = arr[i]; // Start new student with current book

                // If at any point we need more students than available, return false
                if (studentsUsed > k) {
                    return false;
                }
            } else {
                // Assign book to current student
                currentPages += arr[i];
            }
        }

        /*  
        ### Key Insight:  
        - If books can be allocated among **fewer than `k` students**,  
          we can always adjust the allocation to exactly `k` students  without exceeding the maximum page limit.  
        - Redistribution ensures each student gets at least one book.  
        
        ### Edge Case:  
        - Given books: `[15, 10, 19, 10, 5, 18, 7]`, `k = 5`  
        - If the **maximum pages per student** is set to `25`, one valid allocation is:  `[15,10]`, `[19]`, `[10,5]`, `[18,7]` → Uses only **4 students**.  
        - However, we can adjust it to: `[15,10]`, `[19]`, `[10,5]`, `[18]`, `[7]`,  ensuring **each student gets at least one book**.  
        - Since all books are allocated correctly, this is still a **valid allocation**.  
        - If we set the limit **below `25`**, more than `5` students would be required (**invalid**).  
        - If we increase the limit **beyond `25`**, the number of students used remains **4**, not `5`.  
        - Therefore, enforcing `studentsUsed == k` is **not necessary**,  
          as long as all books are distributed correctly.  
        */

        return true;
    }

    private static int[] findMaxAndTotalSum(int[] arr) {
        int max = Integer.MIN_VALUE, sum = 0, low = 0, high = arr.length - 1;

        while (low <= high) {
            max = Math.max(max, Math.max(arr[low], arr[high]));
            sum += arr[low];
            if (low != high) {
                sum += arr[high];
            }

            low++;
            high--;
        }

        return new int[] { max, sum };
    }
}


//Optimal approach

class Solution {
    public static int findPages(int[] arr, int k) {
        if (arr.length < k) {
            return -1;  // Not enough books for every student to get at least one
        }

        // Get the max (largest book) and total sum (all pages)
        int[] maxAndTotalSum = findMaxAndTotalSum(arr);
        int low = maxAndTotalSum[0];  // Minimum possible allocation (largest book).
        int high = maxAndTotalSum[1]; // Maximum possible allocation (sum of all pages).
        int minOfMaxPagesAllocated = 0; // Stores the optimal allocation.

        while (low <= high) {
            int allocatedPages = low + (high - low) / 2; // Midpoint as candidate max allocation
            
            if (canAllocate(arr, allocatedPages, k)) {
                // If allocation is valid, try to minimize further
                minOfMaxPagesAllocated = allocatedPages;
                high = allocatedPages - 1; // Search in the lower half
            } else {
                // If allocation is invalid, increase the limit
                low = allocatedPages + 1;
            }
        }
        
        return minOfMaxPagesAllocated; // Return the optimal allocation found
    }

    private static boolean canAllocate(int[] arr, int allocatedPages, int k) {
        int studentsUsed = 1; 
        int currentPages = 0; 

        for (int i = 0; i < arr.length; i++) {
            if (currentPages + arr[i] > allocatedPages) {
                studentsUsed++;
                currentPages = arr[i];

                if (studentsUsed > k) {
                    return false;
                }
            } else {
                currentPages += arr[i];
            }
        }

        return true;
    }

    private static int[] findMaxAndTotalSum(int[] arr) {
        int max = Integer.MIN_VALUE, sum = 0, low = 0, high = arr.length - 1;

        while (low <= high) {
            max = Math.max(max, Math.max(arr[low], arr[high]));
            sum += arr[low];
            if (low != high) {
                sum += arr[high];
            }

            low++;
            high--;
        }

        return new int[] { max, sum };
    }
}
