//Bruteforce Approach

class Solution {
    /**
     * Counts the number of reverse pairs in the array.
     * A reverse pair is defined as (i, j) such that:
     *   - i < j
     *   - arr[i] > 2 * arr[j]
     *
     *
     * Example:
     *   Input: [1, 3, 2, 3, 1]
     *   Reverse Pairs: (3,1), (3,1)
     *   Output: 2
     */
    public int reversePairs(int[] arr) {
        int countInversion = 0;

        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                // Use long to avoid integer overflow when doing 2 * arr[j]
                if (arr[i] > 2 * (long) arr[j]) {
                    countInversion++;
                }
            }
        }

        return countInversion;
    }
}

//Optimal Approach

class Solution {
    public int reversePairs(int[] arr) {
        return countReversePairs(arr, 0, arr.length - 1);
    }

    private int countReversePairs(int[] arr, int low, int high) {
        int count = 0;

        if (low < high) {
            int mid = low + (high - low) / 2;
            count += countReversePairs(arr, low, mid);
            count += countReversePairs(arr, mid + 1, high);
            count += mergeAndCount(arr, low, mid, high);
        }

        return count;
    }

    private int mergeAndCount(int[] arr, int low, int mid, int high) {
        int count = 0;

        int leftSize = mid - low + 1;
        int rightSize = high - mid;

        int[] left = new int[leftSize];
        int[] right = new int[rightSize];

        for (int i = 0; i < leftSize; i++) {
            left[i] = arr[low + i];
        }

        for (int i = 0; i < rightSize; i++) {
            right[i] = arr[mid + 1 + i];
        }

        // Count reverse pairs: i.e., left[i] > 2 * right[j]
        int i = 0, j = 0;
        while (i < leftSize && j < rightSize) {
            if ((long) left[i] <= 2L * right[j]) {
                i++;
            } else {
                count += (leftSize - i);
                j++;
            }
        }

        // Now perform standard merge
        i = 0;
        j = 0;
        int k = low;
        while (i < leftSize && j < rightSize) {
            if (left[i] <= right[j]) {
                arr[k++] = left[i++];
            } else {
                arr[k++] = right[j++];
            }
        }

        while (i < leftSize) {
            arr[k++] = left[i++];
        }

        while (j < rightSize) {
            arr[k++] = right[j++];
        }

        return count;
    }
}
