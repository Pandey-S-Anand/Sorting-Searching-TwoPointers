//Bruteforce Approach

class Solution{
    public void threeWayPartition(int arr[], int a, int b){
        Arrays.sort(arr);
    }
}


//Better Approach

class Solution {
    public void threeWayPartition(int arr[], int a, int b) {
        int[] temp = new int[arr.length];
        int idx = 0;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < a) {
                temp[idx++] = arr[i];
            }
        }

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] >= a && arr[i] <= b) {
                temp[idx++] = arr[i];
            }
        }

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > b) {
                temp[idx++] = arr[i];
            }
        }

        System.arraycopy(temp, 0, arr, 0, arr.length);
    }
}


//Optimal Approach (Dutch National Flag Algorithm)

class Solution {
    public void threeWayPartition(int arr[], int lowerBound, int upperBound) {
        int lowIndex = 0, currentIndex = 0, highIndex = arr.length - 1;

        while (currentIndex <= highIndex) {
            if (arr[currentIndex] < lowerBound) {
                swap(arr, lowIndex, currentIndex);
                lowIndex++;
                currentIndex++;
            } else if (arr[currentIndex] > upperBound) {
                swap(arr, currentIndex, highIndex);
                highIndex--;
            } else {
                currentIndex++;
            }
        }
    }

    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
