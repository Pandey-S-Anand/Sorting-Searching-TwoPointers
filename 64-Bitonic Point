//Bruteforce Approach

class Solution {
    int findMaximum(int[] arr, int n) {
        Arrays.sort(arr);
        return arr[n - 1]; // Maximum element
    }
}


//Improved Approach

class Solution {
    int findMaximum(int[] arr, int n) {
        int low = 0, high = n - 1, maximum = Integer.MIN_VALUE;

        while (low <= high) {
            maximum = Math.max(maximum, Math.max(arr[low++], arr[high--]));
        }

        return maximum;
    }
}


//Good Approach

class Solution {
    int findMaximum(int[] arr, int n) {
        return findPeakElement(arr, n);
    }

    private int findPeakElement(int[] arr, int n) {
        for (int i = 0; i < n - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                return arr[i];
            }
        }
        return arr[n - 1];
    }
}


//Optimal Approach

//Intuitive Implementation

class Solution {
    int findMaximum(int[] arr, int n) {
        return findPeakElement(arr,n);
    }

    private int findPeakElement(int[] arr, int n) {
        int low = 0, high = n - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (mid == 0) {
                if (arr[mid] > arr[mid + 1]) {
                    return arr[mid];
                } else {
                    low = mid + 1;
                }
            } else if (mid == n - 1) {
                /*
                 * 'mid' will only reach 'arr.length -1' if the given array is strictly
                 * increasing ,in this case maximum element will be the last element
                 */
                return arr[mid];
            } else {
                if ((arr[mid] > arr[mid - 1]) && (arr[mid] > arr[mid + 1])) {
                    //this block will be reached when arr[mid] is greater than both its neighbors, it's a peak.
                    return arr[mid];
                } else if ((arr[mid] > arr[mid - 1]) && (arr[mid] < arr[mid + 1])) {
                    // this block will come in play when the array is in increasing phase
                    low = mid + 1;
                } else { // if ((arr[mid]<arr[mid-1]) && (arr[mid] > arr[mid + 1]))
                    // this block will come in play when the array is in decreasing phase
                    high = mid - 1;
                }
            }
        }
        // This return statement will never be reached
        return -1;
    }
}


//Optimal Implementation

class Solution {
    int findMaximum(int[] arr, int n) {
        return findPeakElement(arr, n);
    }

    private int findPeakElement(int[] arr, int n) {
        int low = 0, high = n - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if ((mid == 0 && (arr[mid] > arr[mid + 1])) || mid == n - 1 || mid > 0 && ((arr[mid] > arr[mid - 1]) && (arr[mid] > arr[mid + 1]))) {
                return arr[mid];
            } else if ((mid == 0 && (arr[mid] < arr[mid + 1])) || (arr[mid] > arr[mid - 1]) && (arr[mid] < arr[mid + 1])) {
                low = mid + 1;
            } else { // if ((arr[mid]<arr[mid-1]) && (arr[mid] > arr[mid + 1]))
                high = mid - 1;
            }
        }
        // This return statement will never be reached
        return -1;
    }
}

/*
  Examples:
  int[]arr={7, 8, 9, 6, 4, 2};
  Output: 9

  int[]arr={9, 1, 2, 3, 4, 5};
  Output: 9

  int[]arr={7, 6, 5, 4, 3, 2};
  Output: 7

  int[]arr={7, 8, 9, 11, 13, 15};
  Output: 15
*/
