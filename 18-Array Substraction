class Solution {
    /**
     * Subtracts arr1 from arr2 (arr2 - arr1), where both are represented as arrays.
     * Assumes arr2 >= arr1 and both arrays represent non-negative integers
     * with digits stored in reverse order (least significant digit at index 0).
     */
    public void subtract(int[] arr1, int[] arr2) {
        // The result will be stored in this array; its size is the size of the bigger number (arr2)
        int[] difference = new int[arr2.length];

        // i for arr1, j for arr2, k for the result array index (right to left)
        int i = arr1.length - 1, j = arr2.length - 1, k = arr2.length - 1, borrow = 0, digitDiff = 0;

        // Traverse both arrays from the end (least significant digit to most significant)
        while (i >= 0 && j >= 0) {
            digitDiff = arr2[j] - borrow - arr1[i];

            // digitDiff will always be between 0 and 9 after adjustment
            // If borrow is 1, the digitDiff could temporarily go negative but will be adjusted by adding 10
            if (digitDiff >= 0) {
                // No borrow required, store the result
                difference[k] = digitDiff;
                borrow = 0;
            } else {
                // Borrow from the higher digit by adding 10 to the current digitDiff
                difference[k] = digitDiff + 10;
                borrow = 1; // Set borrow for the next iteration
            }

            // Move to the next digit (left)
            i--;
            j--;
            k--;
        }

        // If digits are left in arr2 after arr1 is exhausted
        while (j >= 0) {
            digitDiff = arr2[j] - borrow;

            // digitDiff will always be between 0 and 9 after adjustment
            if (digitDiff >= 0) {
                // No borrow required, store the result
                difference[k] = digitDiff;
                borrow = 0;
            } else {
                // Borrow from the higher digit
                difference[k] = digitDiff + 10;
                borrow = 1;
            }

            // Move to the next digit (left)
            j--;
            k--;
        }

        // Remove leading zeroes from the result
        k = 0;
        while (k < difference.length && difference[k] == 0) {
            k++;
        }

        // If the result is empty (i.e., the result is 0), print 0
        if (k == difference.length) {
            System.out.println(0);
        } else {
            // Print the final result
            while (k < difference.length) {
                System.out.print(difference[k++] + " ");
            }
        }
    }
}
