//Bruteforce Approach

class Solution {
    public List<List<Integer>> fourSum(int[] arr, int target) {
        List<List<Integer>> quadruplets = new ArrayList<>();
        Arrays.sort(arr);

        for (int i = 0; i < arr.length - 3; i++) {
            if (i < (arr.length - 3) && (long) arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3] > target) {
                break;
            }

            if ((long) arr[i] + arr[arr.length - 1] + arr[arr.length - 2] + arr[arr.length - 3] < target) {
                continue;
            }

            for (int j = i + 1; j < arr.length - 2; j++) {
                int k = j + 1;
                int l = arr.length - 1;

                while (k < l) {
                    long sum = (long) arr[i] + arr[j] + arr[k] + arr[l];

                    if (sum == target) {
                        if (!quadruplets.contains(Arrays.asList(arr[i], arr[j], arr[k], arr[l]))) {
                            quadruplets.add(Arrays.asList(arr[i], arr[j], arr[k], arr[l]));
                        }
                        k++;
                        l--;
                    } else if (sum < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }

        return quadruplets;
    }
}


//Better Approach

class Solution {
    public List<List<Integer>> fourSum(int[] arr, int target) {
        Set<List<Integer>> set = new HashSet<>();
        List<List<Integer>> quadruplets = new ArrayList<>();
        Arrays.sort(arr);

        for (int i = 0; i < arr.length - 3; i++) {
            if (i < (arr.length - 3) && (long) arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3] > target) {
                break;
            }

            if ((long) arr[i] + arr[arr.length - 1] + arr[arr.length - 2] + arr[arr.length - 3] < target) {
                continue;
            }

            for (int j = i + 1; j < arr.length - 2; j++) {
                int k = j + 1;
                int l = arr.length - 1;

                while (k < l) {
                    long sum = (long) arr[i] + arr[j] + arr[k] + arr[l];

                    if (sum == target) {
                        set.add(Arrays.asList(arr[i], arr[j], arr[k++], arr[l--]));
                    } else if (sum < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }

        quadruplets.addAll(set);

        return quadruplets;
    }
}


//Optimal Approach

class Solution {
    public List<List<Integer>> fourSum(int[] arr, int target) {
        Arrays.sort(arr);
        List<List<Integer>> quadruplets = new ArrayList<>();

        for (int i = 0; i < arr.length - 3; i++) {
            if (i > 0 && (arr[i - 1] == arr[i])) {
                continue;
            }

            if ((long) arr[i] + arr[i + 1] + arr[i + 2] + arr[i + 3] > target) {
                break; // Early termination
            }
            if ((long) arr[i] + arr[arr.length - 1] + arr[arr.length - 2] + arr[arr.length - 3] < target) {
                continue; // Skip if too small
            }

            for (int j = i + 1; j < arr.length - 2; j++) {
                if ((j - 1) > i && arr[j] == arr[j - 1]) { // To Avoid Duplicates
                    continue;
                }
                int k = j + 1;
                int l = arr.length - 1;

                while (k < l) {
                    long sum = (long) arr[i] + arr[j] + arr[k] + arr[l];

                    if (sum == target) {
                        quadruplets.add(Arrays.asList(arr[i], arr[j], arr[k++], arr[l--]));

                        while (k < l && arr[k] == arr[k - 1]) { // To Avoid Duplicates
                            k++;
                        }
                        while (k < l && arr[l] == arr[l + 1]) { // To Avoid Duplicates
                            l--;
                        }
                    } else if (sum < target) {
                        k++;
                    } else {
                        l--;
                    }
                }
            }
        }

        return quadruplets;
    }
}
