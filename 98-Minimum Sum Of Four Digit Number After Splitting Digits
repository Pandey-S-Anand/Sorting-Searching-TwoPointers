class Solution {
    /**
     * You are given a 4-digit integer `num`. You need to split its digits into two 2-digit numbers,
     * such that the sum of the two numbers is minimized.
     * 
     * To minimize the sum, we need to minimize the higher place values (i.e., the tens digit) 
     * of the resulting numbers.
     * This means: put the smallest digits in the 10s place of each 2-digit number.
     *
     * Example: num = 2931
     * -------------------------------------
     * Step 1: Extract digits
     * → arr = [1, 9, 3, 2]   // in any order
     * After sorting:
     * → arr = [1, 2, 3, 9]
     *
     * Step 2: Form two 2-digit numbers using optimal pairing:
     * → num1 = arr[0] * 10 + arr[2] = 1*10 + 3 = 13
     * → num2 = arr[1] * 10 + arr[3] = 2*10 + 9 = 29
     *
     * Final Sum = 13 + 29 = 42 (Minimum possible sum)
     *
     * Pairing Strategy:
     * - arr[0] and arr[2] → number 1 (num1)
     * - arr[1] and arr[3] → number 2 (num2)
     *
     * This ensures the smallest digits go into the 10s place, which contributes 10× more than the 1s place.
     * Hence, this is the optimal approach for this specific 4-digit scenario.
     */
    public int minimumSum(int num) {
        int[] arr = new int[4];
        int idx = 0;

        // Step 1: Extract individual digits of num
        while (num != 0) {
            arr[idx++] = num % 10;
            num = num / 10;
        }

        // Step 2: Sort the digits in ascending order
        Arrays.sort(arr);

        // Step 3: Construct the two numbers from sorted digits
        int num1 = arr[0] * 10 + arr[2];  // smallest + 3rd smallest
        int num2 = arr[1] * 10 + arr[3];  // 2nd smallest + largest

        // Step 4: Return their sum
        return num1 + num2;
    }
}
