//Bruteforce Approach

class Solution {
    void segregate0and1(int[] arr, int n) {
        int count0 = 0, k = n - 1;
        int[] aux = new int[n];

        for (int num : arr) {
            if (num == 1) {
                aux[k--] = 1;
            }
        }

        System.arraycopy(aux, 0, arr, 0, n);
    }
}


//Improved Approach

class Solution {
    void segregate0and1(int[] arr, int n) {
        int count0 = 0;
        for (int num : arr) {
            if (num == 0) {
                count0++;
            }
        }

        Arrays.fill(arr, 0, count0, 0);
        Arrays.fill(arr, count0, n, 1);
    }
}


//Better Approach

class Solution {
    void segregate0and1(int[] arr) {
        int start = 0, end = (arr.length - 1);

        while (start < end) {
            while (start < arr.length && arr[start] == 0) {
                start++;
            }

            while (end >= 0 && arr[end] == 1) {
                end--;
            }

            if (start < end) {
                swap(arr, start, end);
                start++;
                end--;
            }
        }
    }

    private void swap(int[] arr, int start, int end) {
        int temp = arr[start];
        arr[start] = arr[end];
        arr[end] = temp;
    }
}


//Optimal Approach

class Solution {
    void segregate0and1(int[] arr) {
        int oneTracker = 0;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0) {
                swap(arr, i, oneTracker);
                oneTracker++;
            }
        }
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
