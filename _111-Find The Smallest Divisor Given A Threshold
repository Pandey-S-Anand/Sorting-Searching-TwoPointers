// Bruteforce approach

class Solution {
    public int smallestDivisor(int[] arr, int threshold) {
        /**
        * Why start from 1 and stop at max(arr)?
        *
        * - We start with divisor = 1 because it's the smallest possible divisor,
        *   which results in the largest possible sum (i.e., sum(arr)).
        *
        * - As the divisor increases, each element's contribution (ceil(arr[i] / divisor)) decreases,
        *   causing the overall sum to decrease.
        *
        * - The smallest possible value of the sum is arr.length — this happens when the divisor is
        *   greater than or equal to max(arr), because ceil(arr[i] / divisor) becomes 1 for all elements.
        *
        * So the sum varies in the range:
        *     arr.length ≤ sum ≤ sum(arr)
        *
        * - If threshold < arr.length → No divisor can satisfy the condition,
        *   because the smallest achievable sum is arr.length.
        *
        * - But if threshold ≥ arr.length → At least one valid divisor is guaranteed to exist
        *   (e.g., divisor = max(arr)), since it gives the minimum possible sum of arr.length.
        *
        * - Going beyond max(arr) is unnecessary, because the sum does not reduce further — it remains arr.length.
        *   So searching in [1, max(arr)] is both sufficient and optimal.
        */

        // Find the maximum element in the array
        int maximum = findMaxInArray(arr);

        for (int divisor = 1; divisor <= maximum; divisor++) {
            int sumAfterDivision = findSumAfterDivision(arr, divisor);
            if (sumAfterDivision <= threshold) {
                return divisor;
            }
        }

        return -1; // This case is unreachable due to problem constraints
    }

    private int findMaxInArray(int[] arr) {
        int low = 0, high = arr.length - 1, max = Integer.MIN_VALUE;

        while (low <= high) {
            max = Math.max(max, Math.max(arr[low], arr[high]));
            low++;
            high--;
        }

        return max;
    }

    private int findSumAfterDivision(int[] arr, int divisor) {
        int sumAfterDivision = 0;

        for (int num : arr) {
            sumAfterDivision += Math.ceil((double) num / divisor);
        }

        return sumAfterDivision;
    }
}


//Optimal approach (We can optimize this using Binary Search because: The range is sorted → The possible divisors from 1 to max(arr) form a sorted sequence)

class Solution {
    public int smallestDivisor(int[] arr, int threshold) {
        int low = 1, high = findMaxInArray(arr);
        int minDivisor = -1;

        while (low <= high) {
            int divisor = low + (high - low) / 2;
            int sumAfterDivision = findSumAfterDivision(arr, divisor);

            // If the sum is within threshold, store answer and try a smaller divisor
            if (sumAfterDivision <= threshold) {
                minDivisor = divisor;
                high = divisor - 1; // Try to minimize the divisor
            } else {
                low = divisor + 1; // Increase divisor to reduce sum
            }
        }

        return minDivisor; // Return the smallest divisor that satisfies the condition
    }

    private int findMaxInArray(int[] arr) {
        int low = 0, high = arr.length - 1, max = Integer.MIN_VALUE;

        while (low <= high) {
            max = Math.max(max, Math.max(arr[low], arr[high]));
            low++;
            high--;
        }

        return max;
    }

    private int findSumAfterDivision(int[] arr, int divisor) {
        int sumAfterDivision = 0;

        for (int num : arr) {
            sumAfterDivision += Math.ceil((double) num / divisor); // Round up division result
        }

        return sumAfterDivision;
    }
}
