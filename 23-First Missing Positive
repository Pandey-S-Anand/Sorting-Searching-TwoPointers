//Bruteforce Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
        for (int num = 1; num <= arr.length; num++) {
            boolean missing = true;
            for (int val : arr) {
                if (val == num) {
                    missing = false;
                    break;
                }
            }

            if (missing) {
                return num;
            }
        }
        return arr.length + 1;
    }
}

//Improved Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
        Set<Integer> set = new HashSet<>();
        for (int num : arr) {
            set.add(num);
        }

        for (int num = 1; num <= arr.length; num++) {
            if (!set.contains(num)) {
                return num;
            }
        }

        return arr.length + 1;
    }
}


//Good Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
        Arrays.sort(arr);
        int num = 1, previous = 0;

        for (int val : arr) {
            if (val <= 0) {
                continue;
            }

            if (val != previous) {
                if (val != num) {
                    return num;
                }
                previous = val;
                num++;
            }
        }

        return num;
    }
}


//Better Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
        return findMissing(arr, segregatePositiveAndNonPositive(arr));
    }

    private int findMissing(int[] arr, int startIndex) {
        int size = arr.length - startIndex;
        boolean[] visited = new boolean[size];

        for (int i = startIndex; i < arr.length; i++) {
            if (arr[i] <= size && !visited[arr[i] - 1]) { // (visited[x-1]==false) is Optional Condition to handle duplicates
                visited[arr[i] - 1] = true;
            }
        }

        for (int i = 0; i < size; i++) {
            if (!visited[i]) {
                return i + 1;
            }
        }

        // if all indices are marked, then smallest missing positive number is array size + 1.
        return size + 1;
    }

    private int segregatePositiveAndNonPositive(int[] arr) {
        int positiveTracker = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] <= 0) {
                int temp = arr[i];
                arr[i] = arr[positiveTracker];
                arr[positiveTracker] = temp;
                positiveTracker++;
            }
        }

        return positiveTracker;
    }
}


//Optimal Approach

class Solution {
    public int firstMissingPositive(int[] arr) {
        return findMissing(arr, segregatePositiveAndNonPositive(arr));
    }

    private int findMissing(int[] arr, int startIndex) {
        int size = (arr.length - startIndex);

        for (int i = startIndex; i < arr.length; i++) {
            int val = Math.abs(arr[i]);
            if (val <= size && arr[startIndex + (val - 1)] > 0){
                arr[startIndex + (val - 1)] = -arr[startIndex + (val - 1)];
            }
        }

        for (int i = startIndex; i < arr.length; i++){
            if (arr[i] > 0){
                return ((i + 1) - startIndex);
            }
        }

        return (size + 1);
    }

    private int segregatePositiveAndNonPositive(int[] arr) {
        int positiveTracker = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] <= 0) {
                int temp = arr[i];
                arr[i] = arr[positiveTracker];
                arr[positiveTracker] = temp;
                positiveTracker++;
            }
        }

        return positiveTracker;
    }
}
