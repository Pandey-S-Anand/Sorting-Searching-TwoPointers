//Bruteforce Approach

class Solution {
    public int findExtra(int len1, int arr1[], int arr2[]) {
        // Iterate over the smaller array (arr2)
        for (int i = 0; i < (len1 - 1); i++) {
            if (!binarySearch(arr2, len1 - 1, arr1[i])) {
                return i;
            }
        }

        // Extra element is at the last index in arr1
        return len1 - 1;
    }

    private boolean binarySearch(int[] arr, int n, int key) {
        int low = 0, high = n - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                return true;
            }

            if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return false;
    }
}



//Optimal Approach

class Solution {
    public int findExtra(int len1, int arr1[], int arr2[]) {
        // Iterate over the smaller array (arr2)
        int low = 0, high = len1 - 2;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (low == high && arr1[mid] != arr2[mid]) {
                return mid;
            }

            if (arr1[mid] == arr2[mid]) {
                low = mid + 1; // Extra element is on the right side
            } else {
                high = mid; // Extra element is on the left side (or mid itself)
            }
        }

        // Extra element is at the last index in arr1
        return len1 - 1;
    }
}

/*
Examples :
 Example 1:
 arr1[] = {2,4,6,8,10,12}
 arr2[] ={4,6,8,10,12}

 Output : 2

 Example 2 :
 arr1[] = {2,4,6,8,10,12,14}
 arr2[] = {2,4,6,8,10,12}

 Output: 14
*/
