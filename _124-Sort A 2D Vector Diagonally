//Buteforce approach

class Solution {
    void diagonalSort(int matrix[][], int n, int m) {
        // List for storing diagonal elements during processing.
        List<Integer> diagonal = new ArrayList<>();

        // Process lower-left diagonals (starting at row 1 in the first column, excluding the major diagonal)
        for (int i = 1; i < n; i++) {
            int row = i, col = 0;

            // Collect all the elements in the current diagonal.
            while (row < n && col < m) {
                diagonal.add(matrix[row][col]);
                row++;
                col++;
            }

            // Sort the collected diagonal elements in ascending order.
            Collections.sort(diagonal);

            // Reset row and col to starting position for this diagonal.
            row = i;
            col = 0;
            int idx = 0; // Index to iterate through the sorted list.
            // Reinsert the sorted elements back into the matrix along the same diagonal
            while (row < n && col < m) {
                matrix[row][col] = diagonal.get(idx++);
                row++;
                col++;
            }

            // Clear the list for the next diagonal.
            diagonal.clear();
        }

        // Process upper-right diagonals (starting at column 1 in the first row, excluding the major diagonal)
        for (int j = 1; j < m; j++) {
            int row = 0, col = j;

            // Collect all the elements in the current diagonal.
            while (row < n && col < m) {
                diagonal.add(matrix[row][col]);
                row++;
                col++;
            }

            // Sort the collected diagonal elements in descending order.
            diagonal.sort(Collections.reverseOrder());

            // Reset row and col to starting position for this diagonal.
            row = 0;
            col = j;
            int idx = 0; // Index for placing the sorted elements back.
            // Reinsert the sorted elements back into the matrix along the same diagonal
            while (row < n && col < m) {
                matrix[row][col] = diagonal.get(idx++);
                row++;
                col++;
            }

            // Clear the list for the next diagonal.
            diagonal.clear();
        }
    }
}


//Optimal approach

/*
 * Diagonal Identification using (i - j):
 *
 * For a given matrix of size N x M, each diagonal from top-left to bottom-right
 * can be uniquely identified using the expression (i - j), where:
 *   - 'i' is the row index
 *   - 'j' is the column index
 *
 * Here's how (i - j) behaves across a sample 4x5 matrix:
 *
 *     j â†’   0   1   2   3   4
 *   i â†“
 *   0     [ 0  -1  -2  -3  -4 ]
 *   1     [ 1   0  -1  -2  -3 ]
 *   2     [ 2   1   0  -1  -2 ]
 *   3     [ 3   2   1   0  -1 ]
 *
 * - All elements on the same diagonal from top-left to bottom-right have the same (i - j) value.
 * - That makes (i - j) a unique key to identify each diagonal.
 *
 * ------------------------------
 * ðŸ”‘ How We Use the Key (i - j):
 * ------------------------------
 * - If (i - j == 0): â†’ This is the major diagonal (top-left to bottom-right).
 *                    â†’ We do NOT modify this diagonal.
 *
 * - If (i - j > 0):  â†’ This is a lower-left diagonal (below the major diagonal).
 *                    â†’ We sort this diagonal in **ascending order**.
 *
 * - If (i - j < 0):  â†’ This is an upper-right diagonal (above the major diagonal).
 *                    â†’ We sort this diagonal in **descending order**.
 *
 * ----------------------------------
 * âœ… Examples:
 * ----------------------------------
 *   - Major diagonal (i == j): (0,0), (1,1), (2,2), (3,3) => key = 0
 *   - Lower-left diagonal (i - j = 1): (1,0), (2,1), (3,2)
 *   - Lower-left diagonal (i - j = 2): (2,0), (3,1)
 *   - Upper-right diagonal (i - j = -1): (0,1), (1,2), (2,3), (3,4)
 *   - Upper-right diagonal (i - j = -2): (0,2), (1,3), (2,4)
 *
 * This key-based logic makes it easy to group, sort, and reinsert the diagonal values efficiently.
 */

//Naive implementation

class Solution{
    void diagonalSort(int matrix[][], int n, int m){
         // Create a Map to store each diagonal's elements.
        Map<Integer, List<Integer>> diagonalMap = new HashMap<>();

        // First pass: Collect all elements from each diagonal (except the major diagonal)  by iterating through the matrix.
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                // The key is (i - j), which is unique for each diagonal.
                int key = i - j; 
                
                // Skip the major diagonal (key == 0) as it must remain unchanged.
                if (key == 0) {
                    continue;
                }
                
                // For each diagonal, get its list from the map or create a new list if not present.
                diagonalMap.computeIfAbsent(key, k -> new ArrayList<>()).add(matrix[i][j]);
            }
        }
        
        /* Second pass: Sort the lists for each diagonal as per problem requirements.
         - For lower-left diagonals (key > 0): sort in ascending order.
         - For upper-right diagonals (key < 0): sort in descending order.
         */
        for (int key : diagonalMap.keySet()) {
            List<Integer> diagonal= diagonalMap.get(key);
            if (key > 0) {
                // Lower-left diagonal: sort in ascending order.
                Collections.sort(diagonal);
            } else {
                // Upper-right diagonal: sort in descending order.
                Collections.sort(diagonal, Collections.reverseOrder());
            }
        }
        
        // Third pass: Reinsert the sorted elements back into the matrix.
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int key = i - j;
                if (key == 0) {
                    continue; // Major diagonal remains unchanged.
                }
                // Retrieve the list for the current diagonal.
                List<Integer> sortedDiagonal = diagonalMap.get(key);
                // Remove the first element (which is in sorted order) and place it in the matrix.
                matrix[i][j] = sortedDiagonal.remove(0);
            }
        }
    }
}


//Optimal implementation

class Solution {
    void diagonalSort(int matrix[][], int n, int m) {
        // We'll use Queue to store elements for O(1) retrieval later
        Map<Integer, Queue<Integer>> diagonalMap = new HashMap<>();

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int key = i - j;

                if (key == 0) {
                    continue;
                }

                diagonalMap.computeIfAbsent(key, k -> new LinkedList<>()).add(matrix[i][j]);
            }
        }

        for (int key : diagonalMap.keySet()) {
            List<Integer> diagonal = new ArrayList<>(diagonalMap.get(key)); // Convert queue to list for sorting

            if (key > 0) {
                Collections.sort(diagonal);
            } else {
                Collections.sort(diagonal, Collections.reverseOrder());
            }

            // Replace the original queue with sorted values (converted to a new LinkedList)
            diagonalMap.put(key, new LinkedList<>(diagonal));
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int key = i - j;

                if (key == 0) {
                    continue;
                }

                // Get the sorted queue for the current diagonal and insert the next element
                matrix[i][j] = diagonalMap.get(key).poll(); // poll() is O(1)
            }
        }
    }
}
