public class Solution {
    public static ArrayList<Integer> findArrayIntersection(ArrayList<Integer> arr1, int m, ArrayList<Integer> arr2, int n) {
        ArrayList<Integer> intersection = new ArrayList<>();
        int i = 0, j = 0;

        // Traverse both arrays using two pointers
        while (i < m && j < n) {
            // If elements at both pointers are equal, it's part of the intersection
            if (arr1.get(i).equals(arr2.get(j))) {
                intersection.add(arr1.get(i));
                i++;
                j++;
            } else if (arr1.get(i) < arr2.get(j)) { // If current element in arr1 is smaller, it means this element can't be present in arr2 from this point forward because arrays are sorted. So, we skip it by incrementing i.
                i++;
            } else { // If current element in arr2 is smaller, it can't match any future element in arr1, so skip it by incrementing j.
                j++;
            }
        }

        return intersection;
    }
}
