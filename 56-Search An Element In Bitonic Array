//Bruteforce Approach

public class Solution {
    private enum SortOrder {
        ASCENDING, DESCENDING
    }
    
    public int solve(ArrayList<Integer> arr, int target) {
        // In a bitonic array, the peak element is the maximum element.
        int maxElementIndex = findPivotIndex(arr);

        /*
        * Perform binary search on the increasing part of the array (from index 0 to peak).
        * Since this part is strictly increasing, we pass SortOrder.ASCENDING.
        */
       int index = binarySearch(arr, 0, maxElementIndex, target, SortOrder.ASCENDING);

       if (index != -1) {
         return index; // Target found in the increasing part
       }

       /*
        * If the target is not found in the increasing part, search in the decreasing part.
        * This part is from (peak + 1) to end of the array.
        * Since it is strictly decreasing, we pass SortOrder.DESCENDING.
        */
        return binarySearch(arr, maxElementIndex + 1, arr.size() - 1, target, SortOrder.DESCENDING);
    }
    
    private int findPivotIndex(List<Integer>arr) {
        for (int i = 0; i < arr.size() - 1; i++) {
            if (arr.get(i) > arr.get(i + 1)) {
                return i;
            }
        }

        // This return statement is never reached because the array always contain a bitonic point
        return -1;
    }
    
    private int binarySearch(List<Integer> arr, int low, int high, int target, SortOrder sortOrder) {
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr.get(mid) == target) {
                return mid;
            }

            if (sortOrder.equals(SortOrder.ASCENDING)) {
                if (target < arr.get(mid)) {
                    high = mid - 1;
                } else { // if (target > arr.get(i))
                    low = mid + 1;
                }
            } else {
                if (target > arr.get(mid)) {
                    high = mid - 1;
                } else { // if (target < arr.get(i))
                    low = mid + 1;
                }
            }
        }

        return -1; // key doesnot exists
    }
}


// Optimal Approach

public class Solution {
    private enum SortOrder {
        ASCENDING, DESCENDING
    }
    
    public int solve(ArrayList<Integer> arr, int target) {
        // In a bitonic array, the peak element is the maximum element.
        int maxElementIndex = findPivotIndex(arr);

        /*
        * Perform binary search on the increasing part of the array (from index 0 to peak).
        * Since this part is strictly increasing, we pass SortOrder.ASCENDING.
        */
       int index = binarySearch(arr, 0, maxElementIndex, target, SortOrder.ASCENDING);

       if (index != -1) {
         return index; // Target found in the increasing part
       }

       /*
        * If the target is not found in the increasing part, search in the decreasing part.
        * This part is from (peak + 1) to end of the array.
        * Since it is strictly decreasing, we pass SortOrder.DESCENDING.
        */
        return binarySearch(arr, maxElementIndex + 1, arr.size() - 1, target, SortOrder.DESCENDING);
    }
    
    private int findPivotIndex(List<Integer>arr) {
        int low = 0;
        int high = arr.size() - 1;

         /*
         * According to the problem constraints, the array is bitonic (first strictly increasing and then maybe strictly decreasing and has length >= 3)
         * Therefore, the peak (maximum element) will never be at index 0 or at index n - 1.
         * So, it's safe to access arr[mid - 1] and arr[mid + 1] without risking out-of-bound errors.
         */
        while (low <= high) {
            int mid = low + (high - low) / 2;
            
            // Case 1: arr[mid] is the peak (greater than both neighbors)
            if (arr.get(mid) > arr.get(mid - 1) && arr.get(mid) > arr.get(mid + 1)) {
                return mid; // peak element is the  max element return its index
            }

            /*
             * Case 2: We are in the decreasing part of the array
             * i.e., arr[mid] < arr[mid - 1] && arr[mid] > arr[mid + 1] => Move left
             * because the peak lies in the left half
             */
            if (arr.get(mid) < arr.get(mid - 1)) {
                high = mid - 1;
            } else {
                /*
                 * Case 3: We are in the increasing part of the array
                 * i.e., arr[mid] > arr[mid - 1] && arr[mid] < arr[mid + 1] => Move right
                 * because the peak lies in the right half
                 */
                low = mid + 1;
            }
        }

        // This line should never be reached if the input is a valid bitonic array
        return -1;
    }
    
    private int binarySearch(List<Integer> arr, int low, int high, int target, SortOrder sortOrder) {
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr.get(mid) == target) {
                return mid;
            }

            if (sortOrder.equals(SortOrder.ASCENDING)) {
                if (target < arr.get(mid)) {
                    high = mid - 1;
                } else { // if (target > arr.get(i))
                    low = mid + 1;
                }
            } else {
                if (target > arr.get(mid)) {
                    high = mid - 1;
                } else { // if (target < arr.get(i))
                    low = mid + 1;
                }
            }
        }

        return -1; // key doesnot exists
    }
}
