class GFG {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int arr[] = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = sc.nextInt();
            }
            frequencySort(arr);
        }
    }

    public static void frequencySort(int[] arr) {
        Map<Integer, Integer> frequencyMap = new LinkedHashMap<>();
        
        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        int[][] frequencyArray = new int[frequencyMap.size()][2];

        int index = 0;
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            frequencyArray[index][0] = entry.getKey();
            frequencyArray[index][1] = entry.getValue();
            index++;
        }

        Arrays.sort(frequencyArray, new FrequencyComparator());

        index = 0;

        for (int i = 0; i < frequencyArray.length; i++) {
            int frequency = frequencyArray[i][1];

            while (frequency != 0) {
                arr[index++] = frequencyArray[i][0];
                frequency--;
            }
        }

        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}

class FrequencyComparator implements Comparator<int[]> {
    public int compare(int[] arr1, int[] arr2) {
        if (arr1[1] < arr2[1]) {
            return 1;
        } else if (arr1[1] > arr2[1]) {
            return -1;
        } else if ((arr1[1] == arr2[1]) && arr1[0] < arr2[0]) {
            return -1;
        } else if ((arr1[1] == arr2[1]) && arr1[0] > arr2[0]) {
            return 1;
        } else {
            return 0;
        }
    }
}


//Aliter


class GFG {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int arr[] = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = sc.nextInt();
            }
            frequencySort(arr);
        }
    }

    public static void frequencySort(int[] arr) {
        Map<Integer, Integer> frequencyMap = new LinkedHashMap<>();
        
        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        int[][] frequencyArray = new int[frequencyMap.size()][2];

        int index = 0;
        for (Map.Entry<Integer, Integer> entry : frequencyMap.entrySet()) {
            frequencyArray[index][0] = entry.getKey();
            frequencyArray[index][1] = entry.getValue();
            index++;
        }

        Arrays.sort(frequencyArray, (arr1, arr2) -> {
            if (arr1[1] != arr2[1]) {
                return arr2[1] - arr1[1];
            }
            return arr1[0] - arr2[0];
        });

        index = 0;

        for (int i = 0; i < frequencyArray.length; i++) {
            int frequency = frequencyArray[i][1];

            while (frequency != 0) {
                arr[index++] = frequencyArray[i][0];
                frequency--;
            }
        }

        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}


//Aliter

class GFG {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int arr[] = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = sc.nextInt();
            }
            frequencySort(arr);
        }
    }

    public static void frequencySort(int[] arr) {
        Map<Integer, Integer> frequencyMap = new LinkedHashMap<>();
        
        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        List<Map.Entry<Integer, Integer>> elementFrequencyList = new ArrayList<>(frequencyMap.entrySet());

        Collections.sort(elementFrequencyList, (entry1, entry2) -> {
            if (!entry1.getValue().equals(entry2.getValue())) {
                return Integer.compare(entry2.getValue(), entry1.getValue());
            }
            return Integer.compare(entry1.getKey(), entry2.getKey());
        });

        int index = 0;
        for (Map.Entry<Integer, Integer> elementFrequency : elementFrequencyList) {
            int value = elementFrequency.getKey();
            int frequency = elementFrequency.getValue();
            while (frequency != 0) {
                arr[index++] = value;
                frequency--;
            }
        }
        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}


//Aliter

class GFG {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while (t-- > 0) {
            int n = sc.nextInt();
            int arr[] = new int[n];
            for (int i = 0; i < n; i++) {
                arr[i] = sc.nextInt();
            }
            frequencySort(arr);
        }
    }

    public static void frequencySort(int[] arr) {
        Map<Integer, Integer> frequencyMap = new HashMap<>();
        
        for (int val : arr) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        Queue<Map.Entry<Integer, Integer>> maxHeap = new PriorityQueue<>((entry1, entry2) -> entry1.getValue().equals(entry2.getValue())? Integer.compare(entry1.getKey(), entry2.getKey()): Integer.compare(entry2.getValue(), entry1.getValue()));

        maxHeap.addAll(frequencyMap.entrySet());

        int index = 0;
        while (!maxHeap.isEmpty()) {
            Map.Entry<Integer, Integer> entry = maxHeap.poll();
            int frequency = entry.getValue();
            while (frequency != 0) {
                arr[index++] = entry.getKey();
                frequency--;
            }
        }

        for (int num : arr) {
            System.out.print(num + " ");
        }
        System.out.println();
    }
}
