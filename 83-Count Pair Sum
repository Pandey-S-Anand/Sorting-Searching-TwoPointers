//Bruteforce Approach

class Solution {
    int countPairs(int arr1[], int arr2[], int target) {
        // Always use the smaller array for iteration to reduce time complexity
        if (arr1.length > arr2.length) {
            return countPairs(arr2, arr1, target);
        }

        int count = 0;

        // For each element in arr1, check if (target - element) exists in arr2
        for (int val : arr1) {
            if (binarySearch(arr2, target - val)) {
                count++;
            }
        }

        return count;
    }

    private boolean binarySearch(int[] arr, int key) {
        int low = 0, high = arr.length - 1;

        // Standard binary search loop
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                return true; // Key found
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return false; // Key not found
    }
}


// Optimal Approach

class Solution {
    static int countPairs(int arr1[], int arr2[], int target) {
        int i = 0; // Pointer for arr1 (left to right)
        int j = arr2.length - 1; // Pointer for arr2 (right to left)
        int count = 0; // Count of valid pairs

        /*
         * Move both pointers based on the sum:
         * - If sum equals target → valid pair found → move both pointers
         * - If sum < target → move i to get a larger value from arr1
         * - If sum > target → move j to get a smaller value from arr2
         */
        while (i < arr1.length && j >= 0) {
            int sum = arr1[i] + arr2[j];

            if (sum == target) {
                count++;
                i++;
                j--;
            } else if (sum < target) {
                i++;
            } else { // sum > target
                j--;
            }
        }

        return count;
    }
}
