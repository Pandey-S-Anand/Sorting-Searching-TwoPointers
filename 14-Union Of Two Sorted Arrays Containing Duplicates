//Bruteforce Approach

class Solution {
    public List<Integer> unionOfTwoSortedArraysContainingDuplicates(int[] arr1, int[] arr2) {
        Set<Integer> set = new TreeSet<>();

        for (int val : arr1) {
            set.add(val);
        }

        for (int val : arr2) {
            set.add(val);
        }

        return new ArrayList<>(set);
    }
}


// Better Approach

class Solution {
    public ArrayList<Integer> findUnion(int arr1[], int arr2[], int n, int m) {
        int newLen1 = removeDuplicatesFromSortedArray(arr1, n);
        int newLen2 = removeDuplicatesFromSortedArray(arr2, m);
        return unionOfTwoSortedArrays(arr1, newLen1, arr2, newLen2);
    }

    private int removeDuplicatesFromSortedArray(int[] arr, int n) {
        int index = 0;
        for (int i = 0; i < (n - 1); i++) {
            if (arr[i] != arr[i + 1]) {
                arr[index++] = arr[i];
            }
        }

        arr[index++] = arr[n - 1];

        return index;
    }

    private ArrayList<Integer> unionOfTwoSortedArrays(int[] arr1, int m, int[] arr2, int n) {
        int i = 0, j = 0;
        ArrayList<Integer> union = new ArrayList<>();

        while (i < m && j < n) {
            if (arr1[i] == arr2[j]) {
                union.add(arr1[i]);
                i++;
                j++;
            } else if (arr1[i] < arr2[j]) {
                union.add(arr1[i++]);
            } else {
                union.add(arr2[j++]);
            }
        }

        while (i < m) {
            union.add(arr1[i++]);
        }

        while (j < n) {
            union.add(arr2[j++]);
        }

        return union;
    }
}


// Optimal Approach

class Solution {
    public ArrayList<Integer> findUnion(int arr1[], int arr2[]) {
        int i = 0, j = 0;

        // Variables to store the indices of last processed elements in arr1 and arr2 to help skip duplicates
        int prevArr1Index = -1;
        int prevArr2Index = -1;

        ArrayList<Integer> union = new ArrayList<>();

        // Traverse both arrays using two pointers
        while (i < arr1.length && j < arr2.length) {
            // Skip duplicates in arr1 by comparing with last added value
            while (i < arr1.length && (prevArr1Index != -1 && arr1[i] == arr1[prevArr1Index])) {
                i++;
            }

            // Skip duplicates in arr2 by comparing with last added value
            while (j < arr2.length && (prevArr2Index != -1 && arr2[j] == arr2[prevArr2Index])) {
                j++;
            }

            // Ensure we are not accessing out-of-bound indices
            if (i < arr1.length && j < arr2.length) {
                if (arr1[i] == arr2[j]) { // Case 1: Equal elements → add once, move both pointers
                    union.add(arr1[i]);
                    prevArr1Index = i;
                    prevArr2Index = j;
                    i++;
                    j++;
                } else if (arr1[i] < arr2[j]) { // Case 2: arr1[i] is smaller → add it, move i
                    union.add(arr1[i]);
                    prevArr1Index = i;
                    i++;
                } else { // Case 3: arr2[j] is smaller → add it, move j
                    union.add(arr2[j]);
                    prevArr2Index = j;
                    j++;
                }
            }
        }

        // Process remaining elements in arr1
        while (i < arr1.length) {
            if (prevArr1Index == -1 || arr1[i] != arr1[prevArr1Index]) {
                union.add(arr1[i]);
                prevArr1Index = i;
            }
            i++;
        }

        // Process remaining elements in arr2
        while (j < arr2.length) {
            if (prevArr2Index == -1 || arr2[j] != arr2[prevArr2Index]) {
                union.add(arr2[j]);
                prevArr2Index = j;
            }
            j++;
        }

        return union;
    }
}


// Aliter

class Solution {
    public ArrayList<Integer> findUnion(int arr1[], int arr2[]) {
        int i = 0, j = 0;
        ArrayList<Integer> union = new ArrayList<>();

        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] == arr2[j]) {
                append(arr1[i], union);
                i++;
                j++;
            } else if (arr1[i] < arr2[j]) {
                append(arr1[i], union);
                i++;
            } else {
                append(arr2[j], union);
                j++;
            }
        }

        while (i < arr1.length) {
            append(arr1[i], union);
            i++;
        }

        while (j < arr2.length) {
            append(arr2[j], union);
            j++;
        }

        return union;
    }

    /*
     * Appends the value to the union list only if it's not a duplicate:
     * - union.isEmpty(): ensures first element is always added
     * - union.get(union.size() - 1) != val: ensures we don't add the same value again
     *   since arrays are sorted, duplicates would be consecutive
     */
    private void append(int val, List<Integer> union) {
        if (union.isEmpty() || union.get(union.size() - 1) != val) {
            union.add(val);
        }
    }
}
