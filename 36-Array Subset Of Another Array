//Bruteforce Approach

class Compute {
    public String isSubset(long arr1[], long arr2[], long m, long n) {
        Map<Long, Integer> frequencyMap1 = new HashMap<>();
        Map<Long, Integer> frequencyMap2 = new HashMap<>();

        for (long val : arr1) {
            frequencyMap1.put(val, frequencyMap1.getOrDefault(val, 0) + 1);
        }

        for (long val : arr2) {
            frequencyMap2.put(val, frequencyMap2.getOrDefault(val, 0) + 1);
        }

        for (long val : frequencyMap2.keySet()) {
            if (!frequencyMap1.containsKey(val) || frequencyMap2.get(val) > frequencyMap1.get(val)) {
                return "No";
            }
        }

        return "Yes";
    }
}

//Better Approach

class Compute {
    public String isSubset(long arr1[], long arr2[], long m, long n) {
        Map<Long, Integer> frequencyMap = new HashMap<>();
        
        for (long val : arr1) {
            frequencyMap.put(val, frequencyMap.getOrDefault(val, 0) + 1);
        }

        for (long val : arr2) {
            if (!frequencyMap.containsKey(val) || frequencyMap.get(val) == 0) {
                return "No";
            }
            frequencyMap.put(val, frequencyMap.get(val) - 1);
        }

        return "Yes";
    }
}



//Optimal Approach

class Compute {
    public String isSubset(long arr1[], long arr2[], long m, long n) {
        Arrays.sort(arr1);
        Arrays.sort(arr2);

        int i = 0, j = 0;
        while (i < m && j < n) {
            if (arr2[j] == arr1[i]) {
                i++;
                j++;
            } else if (arr2[j] > arr1[i]) {
                i++;
            } else { // if(arr2[j]<arr1[i])
                return "No";
            }
        }

        if (j == n) {
            return "Yes";
        }
        return "No";
    }
}
