//Bruteforce Approach

public class Solution {
    public static int[] getFloorAndCeil(int[] arr, int n, int x) {
        return new int[] { findFloor(arr, n, x), findCeil(arr, n, x) };
    }

    private static int findFloor(int[] arr, int n, int x) {
        int floor = -1;

        for (int i = 0; i < n; i++) {
            if (arr[i] == x) {
                floor = arr[i];
                break;
            } else if (arr[i] < x) {
                floor = arr[i];
            } else {
                break;
            }
        }
        return floor;
    }

    private static int findCeil(int[] arr, int n, int x) {
        int ceil = -1;

        for (int i = n - 1; i >= 0; i--) {
            if (arr[i] == x) {
                ceil = arr[i];
                break;
            } else if (arr[i] > x) {
                ceil = arr[i];
            } else {
                break;
            }
        }

        return ceil;
    }
}


//Better Approach

public class Solution {
    public static int[] getFloorAndCeil(int[] arr, int n, int x) {
        return new int[] { findFloor(arr, n, x), findCeil(arr, n, x) };
    }

    private static int findFloor(int[] arr, int n, int key) {
        int low = 0, high = n - 1, floor = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                floor = arr[mid];
                break;
            }

            if (arr[mid] < key) {
                floor = arr[mid];
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        return floor;
    }

    private static int findCeil(int[] arr, int n, int key) {
        int low = 0, high = n - 1, ceil = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                ceil = arr[mid];
                break;
            }

            if (arr[mid] < key) {
                low = mid + 1;
            } else {
                ceil = arr[mid];
                high = mid - 1;
            }
        }

        return ceil;
    }
}


//Optimal Approach

public class Solution {
    public static int[] getFloorAndCeil(int[] arr, int n, int x) {
        int low = 0, high = n - 1, floor = -1, ceil = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == x) {
                floor = arr[mid];
                ceil = arr[mid];
                break;
            } else if (arr[mid] < x) {
                floor = arr[mid];
                low = mid + 1;
            } else {
                ceil = arr[mid];
                high = mid - 1;
            }
        }

        return new int[] { floor, ceil };
    }
}
