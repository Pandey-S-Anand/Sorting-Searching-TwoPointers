// Bruteforce Approach

class Solution {
    public int[] searchRange(int[] arr, int target) {
        int index = binarySearch(arr, target);
        if (index == -1) {
            return new int[] { -1, -1 };
        }

        int[] result = new int[2];
        int firstIndex = index - 1;
        while (firstIndex >= 0 && arr[firstIndex] == target) {
            firstIndex--;
        }

        result[0] = ++firstIndex;

        int lastIndex = index + 1;
        while (lastIndex < arr.length && arr[lastIndex] == target) {
            lastIndex++;
        }

        result[1] = --lastIndex;

        return result;
    }

    private int binarySearch(int[] arr, int key) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                return mid;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return -1;// key doesnot exists
    }
}

// Optimal Approach

class Solution {
    public int[] searchRange(int[] arr, int target) {
        int firstIndex = firstIndex(arr, target);

        if (firstIndex == -1) {
            return new int[] { -1, -1 };
        }

        return new int[] { firstIndex, lastIndex(arr, target) };
    }

    private int firstIndex(int[] arr, int key) {
        int low = 0, high = arr.length - 1, first = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                first = mid;
                high = mid - 1;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return first;
    }

    private int lastIndex(int[] arr, int key) {
        int low = 0, high = arr.length - 1, last = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                last = mid;
                low = mid + 1;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return last;
    }
}
