//Bruteforce Approach

class Solution {
    public int[] twoSum(int[] arr, int target) {
      for(int i=0;i<arr.length;i++){
        for(int j=i+1;j<arr.length;j++){
           if((arr[i]+arr[j])==target){
              return new int[]{i+1,j+1};
           }
        }
      }
           
      return new int[0];          
    }
}


//Improved Approach

class Solution {
    public int[] twoSum(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            int j = lastIndex(arr, target - arr[i]);
            if (j != -1) {
                return new int[] { i + 1, j + 1 };
            }
        }

        return new int[0];
    }

    private int lastIndex(int[] arr, int key) {
        int low = 0, high = arr.length - 1, lastIndex = -1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                lastIndex = mid;
                low = mid + 1;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return lastIndex;
    }
}



//Better Approach

class Solution {
    public int[] twoSum(int[] arr, int target) {
        Map<Integer, Integer> valueIndexMap = new HashMap<>();

        for (int i = 0; i < arr.length; i++) {
            if (valueIndexMap.containsKey(target - arr[i])) {
                return new int[] { valueIndexMap.get(target - arr[i]) + 1, i + 1 };
            }
            valueIndexMap.put(arr[i], i);
        }

        return new int[0];
    }
}


//Optimal Approach

class Solution {
    public int[] twoSum(int[] arr, int target) {
        int i = 0, j = (arr.length - 1);
        while (i < j) {
            if ((arr[i] + arr[j]) == target) {
                return new int[] { i + 1, j + 1 };
            } else if ((arr[i] + arr[j]) < target)
                i++;
            else {
                j--;
            }
        }

        return new int[0];
    }
}
