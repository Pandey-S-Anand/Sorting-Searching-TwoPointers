//Bruteforce approach

class Solution {
    public int[] rowAndMaximumOnes(int[][] mat) {
        int maxOnes = 0; // Track the maximum number of 1s found in any row so far
        int rowIndexWithMaxOnes = -1; // Store the index of the row with the most 1s

        // Iterate through each row of the matrix
        for (int rowIndex = 0; rowIndex < mat.length; rowIndex++) {
            int onesInRow = countOnes(mat[rowIndex]); // Count number of 1s in current row

            // Update if this row has more 1s than previously recorded
            if (onesInRow > maxOnes) {
                maxOnes = onesInRow;
                rowIndexWithMaxOnes = rowIndex;
            }
        }

        // If no row contains any 1s, return {0, 0} as specified in the problem statement
        if (rowIndexWithMaxOnes == -1) {
            return new int[] { 0, 0 };
        }

        return new int[] { rowIndexWithMaxOnes, maxOnes };
    }

    private int countOnes(int[] row) {
        int count = 0;
        for (int val : row) {
            if (val == 1) {
                count++;
            }
        }
        return count;
    }
}


//Good approach

class Solution {
    public int[] rowAndMaximumOnes(int[][] mat) {
        int maxOnes = 0;  // Tracks the maximum number of 1s found in any row
        int rowIndexWithMaxOnes = -1;  // Stores the index of the row with the most 1s

        // Iterate through each row in the matrix
        for (int rowIndex = 0; rowIndex < mat.length; rowIndex++) {
            // Segregate 0s and 1s in the array so that all 0s come before all 1s
            segregate0and1(mat[rowIndex]);

            // Count number of 1s using binary search
            int onesInRow = countOnesInSortedRow(mat[rowIndex]);

            // Update if this row has more 1s than previous rows
            if (onesInRow > maxOnes) {
                maxOnes = onesInRow;
                rowIndexWithMaxOnes = rowIndex;
            }
        }

        // If no row contains any 1s, return {0, 0} as per problem statement
        if (rowIndexWithMaxOnes == -1) {
            return new int[] { 0, 0 };
        }

        // Return row index with max 1s and the count of 1s in that row
        return new int[] { rowIndexWithMaxOnes, maxOnes };
    }

    private int countOnesInSortedRow(int[] row) {
        int firstOneIndex = -1;
        int low = 0, high = row.length - 1;

        // Look for the first occurrence of 1
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (row[mid] == 0) {
                low = mid + 1; // Look in the right half
            } else {
                firstOneIndex = mid; // Potential answer found
                high = mid - 1; // Look for earlier 1 in the left half
            }
        }

        // If no 1s found, return 0. Otherwise, return count of 1s.
        return firstOneIndex == -1 ? 0 : row.length - firstOneIndex;
    }

    private void segregate0and1(int[] arr) {
        int oneTracker = 0; 

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0) {
                swap(arr, i, oneTracker);
                oneTracker++;
            }
        }
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Better approach

class Solution {
    public int[] rowAndMaximumOnes(int[][] mat) {
        int maxOnesCount = 0;
        int rowIndexWithMaxOnes = -1;

        for (int row = 0; row < mat.length; row++) {
            // Segregate 0s and 1s in the array so that all 0s come before all 1s
            segregate0and1(mat[row]);

            int col = mat[0].length - 1; // Start from the rightmost column
            int onesCount = 0; // Count 1s in current row

            // Move leftwards and count 1s
            while (col >= 0 && mat[row][col] == 1) {
                onesCount++;
                col--;
            }

            // Update result if this row has more 1s
            if (onesCount > maxOnesCount) {
                maxOnesCount = onesCount;
                rowIndexWithMaxOnes = row;
            }
        }

        if (rowIndexWithMaxOnes == -1) {
            return new int[] { 0, 0 };
        }

        return new int[] { rowIndexWithMaxOnes, maxOnesCount };
    }

    private void segregate0and1(int[] arr) {
        int oneTracker = 0;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0) {
                swap(arr, i, oneTracker);
                oneTracker++;
            }
        }
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}


//Optimal approach

class Solution {
    public int[] rowAndMaximumOnes(int[][] mat) {
        int maxOnesCount = 0;      
        int rowIndexWithMaxOnes = -1;      
        int col = mat[0].length - 1;       // Start from the top-right corner (last column of first row)

        for (int row = 0; row < mat.length; row++) {
            // Ensure the row has all 0s before 1s
            segregate0and1(mat[row]);

            boolean moreOnes = false;

            // Move left while there are 1s in the current row
            while (col >= 0 && mat[row][col] == 1) {
                moreOnes = true;
                col--; // Move left
            }

            /*
            We don’t reset col after processing each row because:
            col only moves left when we find more 1s in the current row than any previous row.
            Since all rows are sorted in non-decreasing order, if the current row has more leading 1s, it must push the pointer col further left.
            If the current row has equal or fewer 1s, col stays put — and there’s no need to recheck the same or right-side columns again in upcoming rows.
            
            ✅ Example Matrix:
            [
              {0, 0, 1, 1},   → col = 1 after processing
              {0, 1, 1, 1},   → col = 0 after processing
              {1, 1, 1, 1},   → col = -1 after processing
              {0, 0, 0, 1}    → col stays -1, skipped
            ]
            */

            // If more 1s are found in the current row than any previous row, update the row index and the count of 1s.
            if (moreOnes) {
                maxOnesCount = mat[0].length - col - 1; // Number of 1s = total columns - current col - 1
                rowIndexWithMaxOnes = row;
            }
        }

        if (rowIndexWithMaxOnes == -1) {
            return new int[] { 0, 0 };
        }

        return new int[] { rowIndexWithMaxOnes, maxOnesCount };
    }

    private void segregate0and1(int[] arr) {
        int oneTracker = 0;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == 0) {
                swap(arr, i, oneTracker);
                oneTracker++;
            }
        }
    }

    private void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
