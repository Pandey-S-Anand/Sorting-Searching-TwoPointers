//Bruteforce Approach

class Solution {
    public List<Integer> countSmaller(int[] arr) {
        List<Integer> counts = new ArrayList<>();

        for (int i = 0; i < arr.length; i++) {
            int count = 0;
            for (int j = i + 1; j < arr.length; j++) {
                if (arr[j] < arr[i]) {
                    count++;
                }
            }

            counts.add(count);
        }

        return counts;
    }
}


//Good Approach

class Solution {
    public List<Integer> countSmaller(int[] arr) {
        List<Integer> counts = new ArrayList<>();
        List<Integer> sorted = new ArrayList<>();

        for (int val : arr) {
            sorted.add(val);
        }

        Collections.sort(sorted);

        for (int i = 0; i < arr.length; i++) {
            int index = firstIndex(sorted, arr[i]);
            counts.add(index);
            sorted.remove(index);
        }

        return counts;
    }

    public int firstIndex(List<Integer> arr, int key) {
        int low = 0, high = arr.size() - 1, firstIndex = -1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr.get(mid) == key) {
                firstIndex = mid;
                high = mid - 1;
            } else if (key > arr.get(mid)) {
                low = mid + 1;
            } else { // if(key<arr.get(mid))
                high = mid - 1;
            }
        }
        return firstIndex;
    }
}

/*
  For Method 2 :(Dry Run)
  
  Index=>   0 1 2 3 4 5 6 7 8 9 10  
     arr[]={5,2,4,6,1,2,9,1,6,5,8};
     
 Index=>    0 1 2 3 4 5 6 7 8 9 10
  Sorted[]={1,1,2,2,4,5,5,6,6,8,9};
  
  
  Iteration 1 :(i=0,arr[i]=5)
  firstIndex(5)=5
  count[0]=5;
  sorted.remove(5);
  
  (Updated Sorted[])
 Index=>    0 1 2 3 4 5 6 7 8 9
  Sorted[]={1,1,2,2,4,5,6,6,8,9};
  
  Iteration 2 :(i=1,arr[i]=2)
  firstIndex(2)=2
  count[1]=2;
  sorted.remove(2);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 5 6 7 8
  Sorted[]={1,1,2,4,5,6,6,8,9};
  
  Iteration 3 :(i=2,arr[i]=4)
  firstIndex(4)=3
  count[2]=3;
  sorted.remove(3);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 5 6 7 
  Sorted[]={1,1,2,5,6,6,8,9};
  
  Iteration 4 :(i=3,arr[i]=6)
  firstIndex(6)=4
  count[3]=4;
  sorted.remove(4);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 5 6 
  Sorted[]={1,1,2,5,6,8,9};
  
  Iteration 5 :(i=4,arr[i]=1)
  firstIndex(1)=0
  count[4]=0;
  sorted.remove(0);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 5 
  Sorted[]={1,2,5,6,8,9};
  
  Iteration 6 :(i=5,arr[i]=2)
  firstIndex(2)=1
  count[5]=1;
  sorted.remove(1);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 4 
  Sorted[]={1,5,6,8,9};
  
  Iteration 7 :(i=6,arr[i]=9)
  firstIndex(9)=4
  count[6]=4;
  sorted.remove(4);
  
  (Updated Sorted[])
  Index=>   0 1 2 3 
  Sorted[]={1,5,6,8};
  
  Iteration 8 :(i=7,arr[i]=1)
  firstIndex(1)=0
  count[7]=0;
  sorted.remove(0);
  
  (Updated Sorted[])
  Index=>   0 1 2 
  Sorted[]={5,6,8};
  
  Iteration 9 :(i=8,arr[i]=6)
  firstIndex(1)=1
  count[8]=1;
  sorted.remove(1);
  
  (Updated Sorted[])
  Index=>   0 1 
  Sorted[]={5,8};
  
  Iteration 10 :(i=9,arr[i]=5)
  firstIndex(5)=0
  count[9]=0;
  sorted.remove(0);
  
  (Updated Sorted[])
  Index=>   0 
  Sorted[]={8};
  
  Iteration 11 :(i=10,arr[i]=8)
  firstIndex(8)=0
  count[10]=0;
  sorted.remove(0);
  
  (Updated Sorted[])
  Sorted[]={};
  
  Therefore;
  count[]={5 2 3 4 0 1 4 0 1 0 0 }
*/


//Optimal Approach

//Naive Implementation

class Solution {
    public List<Integer> countSmaller(int[] arr) {
        return countSmaller(arr, arr.length);
    }

    public List<Integer> countSmaller(int arr[], int n) {
        int[] counts = new int[n];
        int[] originalIndex = new int[n];
        for (int i = 0; i < n; i++) {
            originalIndex[i] = i;
        }

        mergeSort(arr, 0, n - 1, counts, originalIndex);

        List<Integer> result = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            result.add(counts[i]);
        }

        return result;
    }

    public void mergeSort(int[] arr, int lb, int ub, int[] counts, int[] originalIndex) {
        if (lb < ub) {
            int mid = lb + (ub - lb) / 2;
            mergeSort(arr, lb, mid, counts, originalIndex);
            mergeSort(arr, mid + 1, ub, counts, originalIndex);
            merge(arr, lb, mid, ub, counts, originalIndex);
        }
    }

    public void merge(int[] arr, int lb, int mid, int ub, int[] counts, int[] originalIndex) {
        int i = 0, j = 0, k = lb, leftSize = (mid - lb + 1), rightSize = (ub - mid);

        int[] left = new int[leftSize];
        int[] right = new int[rightSize];
        int[] leftOrginalIndex = new int[leftSize];
        int[] rightOrginalIndex = new int[rightSize];

        System.arraycopy(arr, lb, left, 0, leftSize);
        System.arraycopy(originalIndex, lb, leftOrginalIndex, 0, leftSize);
        System.arraycopy(arr, mid + 1, right, 0, rightSize);
        System.arraycopy(originalIndex, mid + 1, rightOrginalIndex, 0, rightSize);

        while (i < leftSize && j < rightSize) {
            if (left[i] > right[j]) {
                counts[leftOrginalIndex[i]] += (rightSize - j);
                arr[k] = left[i];
                originalIndex[k] = leftOrginalIndex[i];
                i++;
                k++;
            } else {
                arr[k] = right[j];
                originalIndex[k] = rightOrginalIndex[j];
                j++;
                k++;
            }
        }

        System.arraycopy(left, i, arr, k, leftSize - i);
        System.arraycopy(leftOrginalIndex, i, originalIndex, k, leftSize - i);
        System.arraycopy(right, j, arr, k, rightSize - j);
        System.arraycopy(rightOrginalIndex, j, originalIndex, k, rightSize - j);
    }
}


/*
          Index=>0  1  2  3  4  5  6  7  8  9  10  
          arr[]={5 ,2 ,4 ,6 ,1 ,2 ,9 ,1 ,6 ,5 ,8};        
        
 originalIndex[]=6  10 8  3  9  0  2  5  1  7  4     
       Index=>   0  1  2  3  4  5  6  7  8  9  10       
  (Sorted)arr[]={9, 8, 6, 6, 5, 5, 4, 2, 2, 1, 1}
  
(result)count[]={5, 2 ,3 ,4 ,0 ,1 ,4 ,0 ,1 ,0 ,0 }

Note : originalIndex[i]=original index of element present at ith index
        
*/



//Optimal Implementation

class Solution {
    public List<Integer> countSmaller(int[] arr) {
        return countSmaller(arr, arr.length);
    }

    public List<Integer> countSmaller(int arr[], int n) {
        List<Integer> counts = new ArrayList<>(Collections.nCopies(n, 0)); // Intialize the list with 0
        int[] originalIndex = new int[n];
        Arrays.setAll(originalIndex, i -> i); // Populate with original indices

        mergeSort(arr, 0, n - 1, counts, originalIndex);

        return counts;
    }

    public void mergeSort(int[] arr, int lb, int ub, List<Integer> counts, int[] originalIndex) {
        if (lb < ub) {
            int mid = lb + (ub - lb) / 2;
            mergeSort(arr, lb, mid, counts, originalIndex);
            mergeSort(arr, mid + 1, ub, counts, originalIndex);
            merge(arr, lb, mid, ub, counts, originalIndex);
        }
    }

    public void merge(int[] arr, int lb, int mid, int ub, List<Integer> counts, int[] originalIndex) {
        int i = 0, j = 0, k = lb, leftSize = (mid - lb + 1), rightSize = (ub - mid);

        int[] left = new int[leftSize];
        int[] right = new int[rightSize];
        int[] leftOrginalIndex = new int[leftSize];
        int[] rightOrginalIndex = new int[rightSize];

        System.arraycopy(arr, lb, left, 0, leftSize);
        System.arraycopy(originalIndex, lb, leftOrginalIndex, 0, leftSize);
        System.arraycopy(arr, mid + 1, right, 0, rightSize);
        System.arraycopy(originalIndex, mid + 1, rightOrginalIndex, 0, rightSize);

        while (i < leftSize && j < rightSize) {
            if (left[i] > right[j]) {
                counts.set(leftOrginalIndex[i], counts.get(leftOrginalIndex[i]) + (rightSize - j));
                arr[k] = left[i];
                originalIndex[k] = leftOrginalIndex[i];
                i++;
                k++;
            } else {
                arr[k] = right[j];
                originalIndex[k] = rightOrginalIndex[j];
                j++;
                k++;
            }
        }

        System.arraycopy(left, i, arr, k, leftSize - i);
        System.arraycopy(leftOrginalIndex, i, originalIndex, k, leftSize - i);
        System.arraycopy(right, j, arr, k, rightSize - j);
        System.arraycopy(rightOrginalIndex, j, originalIndex, k, rightSize - j);
    }
}

/*
Other Approaches :(Will be Updated Soon) 

->Using Binary Tree 
->Binary Search Tree
->Binary Indexed Tree/Fenwick Tree
->Segment Tree
*/
