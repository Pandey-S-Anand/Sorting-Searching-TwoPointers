// Bruteforce Approach

//Naive Implementation

class Solution {
    public int findKthPositive(int[] arr, int k) {
        int num = 1, missingCount = 0;
        while (true) {
            if (binarySearch(arr, num) == false){
                missingCount++;
            }

            if (missingCount == k){
                break;
            }

            num++;
        }
        return num;
    }

    private boolean binarySearch(int[] arr, int key) {
        int low = 0, high = arr.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == key) {
                return true;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else { // if (key > arr[mid])
                low = mid + 1;
            }
        }
        return false;
    }
}

//Optimal Implementation
/*
          if all the nums in the range [1,n](both Inclusive) are present in the array
          then
          
          1st Missing +ve number is (n+1).
          2nd Missing +ve number is (n+2).
          .
          .
          .
          kth missing number=(n+k).
          
          Example :
          Input: arr = [1,2,3,4], k = 2
          Output: 6
          ----------------------------------------------------------------
          Range : 1<=kth Misisng +ve Number<=(n+k)
          
          Input: arr = [2,3,4,7,11], k = 5
          Output: 9
          The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing
          positive integer is 9.
          
          Input: arr = [2,3,4,9,11], k = 5
          Output: 8
          The missing positive integers are [1,5,6,7,8,10,12,13,...]. The 5th missing
          positive integer is 8.
          
          Input: arr = [2,3,4,5,6], k = 5
          Output: 10
          The missing positive integers are [1,7,8,9,10,11,12,13,...]. The 5th missing
          positive integer is 10.
*/

class Solution {
    public int findKthPositive(int[] arr, int k) {
        int num = 1, missingCount = 0;

        if (arr[arr.length - 1] == arr.length) {
            return (arr.length + k);
        }

        while (num <= (n + k)) {
            if (!binarySearch(arr, num)) {
                missingCount++;
            }

            if (missingCount == k) {
                break;
            }

            num++;
        }

        return num;
    }

    private boolean binarySearch(int[] arr, int key) {
        int low = 0, high = arr.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == key) {
                return true;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else { // if (key > arr[mid])
                low = mid + 1;
            }
        }
        return false;
    }
}


//Good Approach

class Solution {
    public int findKthPositive(int[] arr, int k) {
        if (arr[arr.length - 1] == arr.length) {
            return (arr.length + k);
        }

        int num = 1, missingCount = 0;
        Set<Integer> set = new HashSet<>();

        for (int val : arr) {
            set.add(val);
        }

        while (num <= (arr.length + k)) {
            if (!set.contains(num)) {
                missingCount++;
            }

            if (missingCount == k) {
                break;
            }

            num++;
        }
        return num;
    }
}


//Better Approach

class Solution {
    public int findKthPositive(int[] arr, int k) {
        int num = 1, i = 0;

        while (i < arr.length && k != 0) {
            if (arr[i] == num) {
                i++;
            } else {
                k--;
            }
            num++;
        }

        num--;

        return num + k;
    }
}


//Optimal Approach

class Solution {
    public int findKthPositive(int[] arr, int k) {
        if (arr[arr.length - 1] == arr.length) {
            return (arr.length + k);
        }

        return binarySearch(arr, arr.length, k);
    }

    private int binarySearch(int[] arr, int n, int k) {
        int low = 0, high = n - 1;

        while (low <= high) {
            int mid = low + (high-low) / 2;
            int expectedValueAtMid = (mid + 1);
            int valuePresentAtMid = arr[mid];
            int countOfMissingNumsBeforeArrMid = valuePresentAtMid - expectedValueAtMid;

            if (countOfMissingNumsBeforeArrMid < k) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low + k;
    }
}


/*
For example:
arr[] = {2,3,4,7,11}

index 0:

no. should be present here/Expected Number => index+1 => 1
no which is actually present here => 2
discrepency 2-1=1
therefore there is 1 missing numbers before the number 2 which is 1.


Taking Another example:
arr[] = {2,3,4,7,11}

for index 3:

no. should be present here/Expected Number => index+1 => 4
no which is actually present here => 7
discrepency 7-4=3
therefore there are 3 missing numbers before the number 7 which are [1, 5, 6]

Also we want to push mid to the closest of k, thus, the resultant low + k would be the kth missing no.
*/
