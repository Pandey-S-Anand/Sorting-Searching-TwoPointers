//Bruteforce Approach

class Solution {
    public boolean search(int[] arr, int target) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == target) {
                return true;
            }
        }

        return false; // Target not found
    }
}



//Good Approach

class Solution {
    public boolean search(int[] arr, int target) {
        int partitionIndex = findPartitionIndex(arr);

        // Try to find the target in the first partition
        if (target >= arr[0] && target <= arr[partitionIndex]) {
            return binarySearch(arr, 0, partitionIndex, target);
        }

        // Try to find the target in the second partition
        return binarySearch(arr, partitionIndex + 1, arr.length - 1, target);
    }

    private boolean binarySearch(int[] arr, int low, int high, int target) {
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                return true;
            } else if (target < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return false;
    }

    private int findPartitionIndex(int[] arr) {
        for (int i = 0; i < arr.length - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                return i;
            }
        }
        // If no partition index is found, the array is sorted in ascending order and
        // not rotated
        return arr.length - 1;
    }
}



//Optimal Approach

class Solution {
    public boolean search(int[] arr, int target) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                return true;
            }

            /*
             * if (arr[mid]!=target) and arr[mid]==arr[low]
             * then arr[low]!=target based on this obseravtion
             * we are moving the low pointer.
             * Ex:
             * arr[]=[1,1,1,1,1,1,1,1,1,13,1,1,1,1,1,1,1,1,1,1,1,1]
             * 
             * targetÂ =
             * 13
             * 
             */
            if (arr[mid] == arr[low]) {
                low = low + 1;
                continue;
            }

            // Determine which part is sorted
            if (arr[low] < arr[mid]) {
                // Left part is sorted
                if (target >= arr[low] && target <= arr[mid]) {
                    high = mid - 1;
                } else {
                    low = mid + 1;
                }
            } else {
                // Right part is sorted
                if (target >= arr[mid] && target <= arr[high]) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
        }

        return false; // Target not found
    }
}



/*
 * Note :
 * 1: If the array (containing duplicates) is sorted and rotated by any position
 * (either left or right), the first element will always be greater than or
 * equal to the last element.
 * Ex:
 * arr={1, 1, 2 ,3, 4, 1}. (left rotated by 1)
 * arr={2, 2, 3 ,3, 4, 1}. (left rotated by 1)
 * 
 * 2: If the array (containing duplicates) is sorted and not rotated, the first
 * element will always be less than or equal to the last element. If the first
 * element is less than the last element, we can guarantee that the array is
 * sorted and not rotated. However, if the first element is equal to the last
 * element, we cannot guarantee whether the array is sorted and not rotated, as
 * it may or may not have been rotated.
 * 
 * Ex:
 * arr={1, 1, 1, 1, 3, 4} is sorted and not rotated
 * arr={1, 1, 1, 1, 1, 1} is sorted and may or may not be rotated
 * arr={1, 1, 2, 3, 4, 1} is sorted and rotated (left rotated by 1)
 */
