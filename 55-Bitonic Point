//Bruteforce Approach

class Solution {
    int findMaximum(int[] arr, int n) {
        /*
         * Linear scan approach to find the peak in a bitonic array.
         * As soon as we find an element greater than its next one,
         * we return it â€” this handles both bitonic arrays and strictly
         * descending arrays.
         */
        for (int i = 0; i < n - 1; i++) {
            if (arr[i] > arr[i + 1]) {
                // Found the turning point (peak) in bitonic or descending array
                return arr[i];
            }
        }

        // This line should never be reached due to the problem guarantee of a bitonic point.
        return -1;
    }
}



//Optimal Approach

class Solution {
    public int findMaximum(int[] arr) {
        return findPeakElement(arr);
    }

    private int findPeakElement(int[] arr) {
        /*
         * According to the problem constraints:
         * ðŸ”¹ The array contains exactly one bitonic point.
         * ðŸ”¹ The length is guaranteed to be â‰¥ 3.
         *
         * Therefore, the peak (maximum element) will NEVER be at index 0 or index n - 1.
         * So it's 100% safe to access arr[mid - 1] and arr[mid + 1] without out-of-bound checks.
         */
        int low = 1, high = arr.length - 2;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            /*
             * Case 1: Found the bitonic peak
             * If current element is greater than both its neighbors, it's the peak.
             */
            if (arr[mid] > arr[mid - 1] && arr[mid] > arr[mid + 1]) {
                return arr[mid];
            }

            /*
             * Case 2: We are on the **increasing slope** of the bitonic array.
             * That means the peak lies to the right.
             *
             * Why? Because values are still increasing, and since a bitonic point is guaranteed,
             * there MUST be a peak in the right half.
             */
            if (arr[mid] > arr[mid - 1] && arr[mid] < arr[mid + 1]) {
                low = mid + 1;
            }
            /*
            * Case 3: We are on the **decreasing slope** of the bitonic array.
            * That means the peak lies to the left.
            *
            * Why? Because values are descending now, and the peak was earlier.
            * So move to the left half.
            */
            else if (arr[mid] < arr[mid - 1] && arr[mid] > arr[mid + 1]) {
                high = mid - 1;
            }

            /*
             * Case 4: Case of a valley (i.e., mid < both neighbors)
             * Technically not possible in a strictly bitonic array,
             */
        }

        // Ideally unreachable due to guaranteed bitonic structure
        return -1;
    }
}
