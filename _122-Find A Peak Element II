//Bruteforce approach

class Solution {
    public int[] findPeakGrid(int[][] matrix) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        // Traverse every cell to check if it is a peak
        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {

                int current = matrix[row][col];

                // Get neighbors safely with boundary checks
                int left   = (col > 0) ? matrix[row][col - 1] : -1;
                int right  = (col < cols - 1) ? matrix[row][col + 1] : -1;
                int top    = (row > 0) ? matrix[row - 1][col] : -1;
                int bottom = (row < rows - 1) ? matrix[row + 1][col] : -1;

                // Check if the current cell is greater than all 4 neighbors
                if (current > left && current > right && current > top && current > bottom) {
                    return new int[] { row, col };
                }
            }
        }

        // If no peak is found (theoretically won't happen for valid input)
        return new int[] { -1, -1 };
    }
}


//Optimal approach

class Solution {
    public int[] findPeakGrid(int[][] mat) {
        int rows = mat.length;
        int cols = mat[0].length;

        int left = 0, right = cols - 1;

        while (left <= right) {
            int midCol = left + (right - left) / 2;

            /*
             * Step 1: Find the row with the maximum element in midCol.
             *
             * Why?
             * Among all the elements in midCol, the one with the highest value
             * will be greater than the elements above and below (i.e., top and bottom neighbors),
             * since we are picking the maximum in that column.
             * 
             * So now, to determine if it's a 2D peak, we only need to compare it with its
             * left and right neighbors — just like in the 1D peak-finding approach.
             */
            int maxRow = 0;
            for (int row = 0; row < rows; row++) {
                if (mat[row][midCol] > mat[maxRow][midCol]) {
                    maxRow = row;
                }
            }

            int leftVal = (midCol > 0) ? mat[maxRow][midCol - 1] : -1;
            int rightVal = (midCol < cols - 1) ? mat[maxRow][midCol + 1] : -1;

            /*
             * Case 1: Current element is greater than both neighbors → it's a peak.
             * (Note: It's already greater than top and bottom neighbors due to column max selection.)
             */
            if (mat[maxRow][midCol] > leftVal && mat[maxRow][midCol] > rightVal) {
                return new int[] { maxRow, midCol };
            }

            /*
             * Case 2: Left neighbor is greater → move to the left half.
             *
             * Reason:
             * - The current element is the maximum in midCol.
             * - If the left neighbor is greater, it's greater than all elements in midCol.
             * - This forms a slope toward the left, so a peak is guaranteed to exist there
             *   (either in the immediate left column or somewhere further left).
             *
             * On the other hand, the right side may or may not contain a peak — so we skip it.
             */
            else if (mat[maxRow][midCol] < leftVal) {
                right = midCol - 1;
            }

            /*
             * Case 3: Right neighbor is greater → move to the right half.
             *
             * Reason:
             * - The current element is the maximum in midCol.
             * - If the right neighbor is greater, it's greater than all elements in midCol.
             * - This forms a slope toward the right, so a peak is guaranteed to exist there
             *   (either in the immediate right column or further right).
             *
             * On the other hand, the left side may or may not contain a peak — so we skip it.
             */
            else if (mat[maxRow][midCol] < rightVal) {
                left = midCol + 1;
            }

            /*
             * Case 4: Valley Case — element is smaller than both neighbors.
             *
             * Example: [1, 5, 4, 8, 1] → element at index 2 (value 4) is a valley.
             *
             * In this case, both left and right neighbors are greater.
             * This means a peak exists on both sides — we can go either way.
             * For consistency and determinism, we choose to move right
             * (i.e., left = midCol + 1).
             *
             * Note:
             * You could also move left and still find a peak.
             * From a valley, both directions lead to rising slopes due to the problem constraints.
             */
            else {
                left = midCol + 1;
            }
        }

        // This line is theoretically unreachable due to problem constraints.
        return new int[] { -1, -1 };
    }
}
