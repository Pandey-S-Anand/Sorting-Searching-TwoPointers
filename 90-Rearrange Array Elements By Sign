// Method 1 (Order of Appearence is Maintained) // TC: O(n), SC: O(n)

class Solution {
    public int[] rearrangeArray(int[] arr) {
        List<Integer> positiveList = new ArrayList<>();
        List<Integer> negativeList = new ArrayList<>();

        // Separate positive and negative elements into two lists
        for (int num : arr) {
            if (num >= 0) {
                positiveList.add(num);
            } else {
                negativeList.add(num);
            }
        }

        // Rebuild the array with alternating positive and negative numbers
        int i = 0, positiveIndex = 0, negativeIndex = 0;

        while (i < arr.length) {
            arr[i++] = positiveList.get(positiveIndex++);
            arr[i++] = negativeList.get(negativeIndex++);
        }

        return arr;
    }
}


// Method 2 (Order of Appearence is Maintained) // TC: O(n^2), SC: O(1)

class Solution {
    /**
     * Rearranges the array so that positive and negative numbers appear in alternating positions,
     * starting with a positive number. The relative order of appearance is preserved.
     *
     *  Steps:
     * 1. Segregate the array in-place so that all non-negative (positive or 0) numbers
     *    appear first, followed by negatives, maintaining the original relative order.
     * 2. Alternate positive and negative numbers using two pointers into a new result array.
     *
     * Dry Run Example:
     * -------------------
     * Input: [3, -1, 2, -2, -5, 4]
     *
     * ➤ Step 1: segregateMaintainingOrder()
     * Initial: [3, -1, 2, -2, -5, 4]
     *
     * i = 0 → 3 ≥ 0 → shift(0,0) → no change → [3, -1, 2, -2, -5, 4] → nextNonNegativeElementIndex = 1
     * i = 1 → -1 < 0 → skip
     * i = 2 → 2 ≥ 0 → shift(1,2)
     *        - Move -1 to index 2
     *        - Insert 2 at index 1 → [3, 2, -1, -2, -5, 4] → next = 2
     * i = 3 → -2 → skip
     * i = 4 → -5 → skip
     * i = 5 → 4 ≥ 0 → shift(2,5)
     *        - Move -1, -2, -5 to index 3,4,5
     *        - Insert 4 at index 2 → [3, 2, 4, -1, -2, -5] → next = 3
     *
     * ➤ Final segregated: [3, 2, 4, -1, -2, -5]
     * ➤ Positive index = 0, Negative index = 3
     *
     * ➤ Alternating fill into result:
     * [3, -1, 2, -2, 4, -5]
     */
    public int[] rearrangeArray(int[] arr) {
        int[] rearrangedArray = new int[arr.length];

        int firstNegativeIndex = segregateMaintainingOrder(arr);
        int positiveIndex = 0, negativeIndex = firstNegativeIndex, i = 0;

        while (i < arr.length) {
            rearrangedArray[i++] = arr[positiveIndex++];
            rearrangedArray[i++] = arr[negativeIndex++];
        }

        return rearrangedArray;
    }

    /**
     * Rearranges the array such that all non-negative numbers appear at the front
     * while maintaining their relative order. Returns the index where the first negative begins.(If present)
     */
    private int segregateMaintainingOrder(int[] arr) {
        int nextNonNegativeElementIndex = 0;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] >= 0) {
                rightShiftBy1(arr, nextNonNegativeElementIndex, i);
                nextNonNegativeElementIndex++;
            }
        }
        //At the end of the loop, 'nextNonNegativeElementIndex' ends up pointing to the index of the first negative (if any exist).
        return nextNonNegativeElementIndex;
    }

    private void rightShiftBy1(int[] arr, int start, int end) {
        int temp = arr[end];
        for (int i = end; i > start; i--) {
            arr[i] = arr[i - 1];
        }
        arr[start] = temp;
    }
}


// Method 3 (Time Optimised) (Order of Appearence is Maintained) // TC: O(n), SC: O(n)

class Solution {
    /**
     * Rearranges the given array such that:
     * - Positive and negative numbers alternate.
     * - The first element is positive.
     * - It assumes the number of positive and negative numbers are equal (as per constraint).
     * - The **relative order is preserved**.
     * 
     * 
     * 🔁 Dry Run Example:
     * -------------------
     * Input:  [3, -2, 1, -7, -5, 2]
     * Step-by-step:
     * - Initialize: 
     *   → `nextPositivePlacementIndex = 0` → where next positive number will go
     *   → `nextNegativePlacementIndex = 1` → where next negative number will go
     * 
     * i = 0 → 3 > 0 → place at modifiedArray[0] → [3, _, _, _, _, _] → nextPositivePlacementIndex = 2
     * i = 1 → -2 < 0 → place at modifiedArray[1] → [3, -2, _, _, _, _] → nextNegativePlacementIndex = 3
     * i = 2 → 1 > 0 → place at modifiedArray[2] → [3, -2, 1, _, _, _] → nextPositivePlacementIndex = 4
     * i = 3 → -7 < 0 → place at modifiedArray[3] → [3, -2, 1, -7, _, _] → nextNegativePlacementIndex = 5
     * i = 4 → -5 < 0 → place at modifiedArray[5] → [3, -2, 1, -7, _, -5] → nextNegativePlacementIndex = 7
     * i = 5 → 2 > 0 → place at modifiedArray[4] → [3, -2, 1, -7, 2, -5] → nextPositivePlacementIndex = 6
     * 
     * Final Output: [3, -2, 1, -7, 2, -5]
     */
    public int[] rearrangeArray(int[] arr) {
        int[] modifiedArray = new int[arr.length];
        int nextPositivePlacementIndex = 0;
        int nextNegativePlacementIndex = 1;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > 0) {
                modifiedArray[nextPositivePlacementIndex] = arr[i];
                nextPositivePlacementIndex += 2;
            } else {
                modifiedArray[nextNegativePlacementIndex] = arr[i];
                nextNegativePlacementIndex += 2;
            }
        }

        return modifiedArray;
    }
}
