// Method 1 (Order of Appearence is Maintained) // TC: O(n), SC: O(n)

class Solution {
    public int[] rearrangeArray(int[] arr) {
        List<Integer> positiveList = new ArrayList<>();
        List<Integer> negativeList = new ArrayList<>();

        for (int num : arr) {
            if (num >= 0) {
                positiveList.add(num);
            } else {
                negativeList.add(num);
            }
        }

        int i = 0, positiveIndex = 0, negativeIndex = 0;

        while (i < arr.length) {
            arr[i++] = positiveList.get(positiveIndex++);
            arr[i++] = negativeList.get(negativeIndex++);
        }

        return arr;
    }
}


// Method 2 (Order of Appearence is Maintained) // TC: O(n^2), SC: O(1)

class Solution {
    public int[] rearrangeArray(int arr[]) {
        int[] modifiedArray = new int[arr.length];
        int firstNegativeIndex = segregateMaintainingOrder(arr);
        int positiveIndex = 0, negativeIndex = firstNegativeIndex, i = 0;

        while (i < arr.length) {
            modifiedArray[i++] = arr[positiveIndex++];
            modifiedArray[i++] = arr[negativeIndex++];
        }

        return modifiedArray;
    }

    private int segregateMaintainingOrder(int arr[]) {
        int negativeTracker = 0;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] >= 0) {
                // This leftShiftBy1() method maintains the order of appearence
                leftShiftBy1(arr, negativeTracker, i);
                negativeTracker++;
            }
        }

        return negativeTracker;
    }

    private void leftShiftBy1(int[] arr, int start, int end) {
        int temp = arr[end];
        for (int i = end; i > start; i--) {
            arr[i] = arr[i - 1];
        }

        arr[start] = temp;
    }
}


// Method 3 (Order of Appearence is Maintained) // TC: O(n log n), SC: O(n)

class Solution {
    public int[] rearrangeArray(int arr[]) {
        segregateMaintainingOrder(arr);

        int firstNegativeIndex = findFirstNegativeIndex(arr);
        int[] modifiedArray = new int[arr.length];
        int positiveIndex = 0, negativeIndex = firstNegativeIndex, i = 0;

        while (i < arr.length) {
            modifiedArray[i++] = arr[positiveIndex++];
            modifiedArray[i++] = arr[negativeIndex++];
        }

        return modifiedArray;
    }

    private void segregateMaintainingOrder(int[] arr) {
        mergeSort(arr, 0, arr.length - 1);
    }

    private void mergeSort(int[] arr, int lb, int ub) {
        if (lb < ub) {
            int mid = lb + (ub - lb) / 2;
            mergeSort(arr, lb, mid);
            mergeSort(arr, mid + 1, ub);
            modifiedMerge(arr, lb, mid, ub);
        }
    }

    private void modifiedMerge(int[] arr, int lb, int mid, int ub) {
        int leftSize = (mid - lb + 1), rightSize = (ub - mid);
        int[] left = new int[leftSize];
        int[] right = new int[rightSize];

        for (int i = 0; i < leftSize; i++) {
            left[i] = arr[lb + i];
        }

        for (int i = 0; i < rightSize; i++) {
            right[i] = arr[mid + 1 + i];
        }

        int positiveIndex = 0, negativeIndex = 0, arrIndex = lb;
        // copy positive elements of left sublist
        while (positiveIndex < leftSize && left[positiveIndex] >= 0) {
            arr[arrIndex++] = left[positiveIndex++];
        }

        // copy positive elements of right sublist
        while (negativeIndex < rightSize && right[negativeIndex] >= 0) {
            arr[arrIndex++] = right[negativeIndex++];
        }

        // Copy negative elements of left sublist
        while (positiveIndex < leftSize) {
            arr[arrIndex++] = left[positiveIndex++];
        }

        // Copy negative elements of right sublist
        while (negativeIndex < rightSize) {
            arr[arrIndex++] = right[negativeIndex++];
        }
    }

    private int findFirstNegativeIndex(int[] arr) {
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] < 0) {
                return i;
            }
        }

        return arr.length; // Return n if no negative number is found
    }
}


// Method 4 (Space Optimised) (Order of Appearence is Maintained)  // TC: O(n ^ 2), SC: O(1)
/*
 * in rearranged array Positive elements are found at Even index(0,2,4,6,8..)
 * and Negative Elements are found at odd index(1,3,5,7,9...)
 * The idea is to process array from left to right. While processing, find the
 * first out of place element in the remaining unprocessed array.
 * An element is out of place if it is positive and at odd index (0 based
 * index), or it is negative and at even index (0 based index) .
 * Once we find an out of place element, we find the first element after it with
 * opposite sign.
 * We right rotate the subarray between these two elements (including these
 * two).
 */

class Solution {
    public int[] rearrangeArray(int[] arr) {
        int wrongIndex = -1;// No Wrong Index

        for (int i = 0; i < arr.length; i++) {
            if (wrongIndex != -1) {
                if ((arr[wrongIndex] < 0 && arr[i] >= 0) || (arr[wrongIndex] >= 0 && arr[i] < 0)) {
                    rightRotate(arr, wrongIndex, i);
                    if ((i - wrongIndex) == 1) {
                        wrongIndex = -1;
                    } else { // ((i - wrongIndex)>= 2)
                        wrongIndex += 2;
                    }
                }
            }

            if (wrongIndex == -1) {
                if (((i % 2) == 0 && arr[i] < 0) || ((i % 2) == 1 && arr[i] >= 0)) {
                    wrongIndex = i;
                }
            }
        }

        return arr;
    }

    private void rightRotate(int[] arr, int wrongIndex, int index) {
        int temp = arr[index];
        for (int i = index; i > wrongIndex; i--) {
            arr[i] = arr[i - 1];
        }

        arr[wrongIndex] = temp;
    }
}


// Method 5 (Time Optimised) (Order of Appearence is Maintained) // TC: O(n), SC: O(n)

class Solution {
    public int[] rearrangeArray(int[] arr) {
        int[] modifiedArray = new int[arr.length];
        int positiveIndex = 0, negativeIndex = 1;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] > 0) {
                modifiedArray[positiveIndex] = arr[i];
                positiveIndex += 2;
            } else {
                modifiedArray[negativeIndex] = arr[i];
                negativeIndex += 2;
            }
        }

        return modifiedArray;
    }
}
