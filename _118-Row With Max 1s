//Bruteforce approach

class Solution {
    public int rowWithMax1s(int[][] matrix) {
        int maxOnes = 0; // Track the maximum number of 1s found in any row so far
        int rowIndexWithMaxOnes = -1; // Store the index of the row with the most 1s

        // Iterate through each row of the matrix
        for (int rowIndex = 0; rowIndex < matrix.length; rowIndex++) {
            int onesInRow = countOnes(matrix[rowIndex]); // Count number of 1s in current row

            // Update if this row has more 1s than previously recorded
            if (onesInRow > maxOnes) {
                maxOnes = onesInRow;
                rowIndexWithMaxOnes = rowIndex;
            }
        }

        // If no 1s found in any row, return -1
        if (maxOnes == 0) {
            return -1;
        }

        return rowIndexWithMaxOnes;
    }

    private int countOnes(int[] row) {
        int count = 0;
        for (int val : row) {
            if (val == 1) {
                count++;
            }
        }
        return count;
    }
}


//Good approach

class Solution {
    public int rowWithMax1s(int[][] matrix) {
        int maxOnesCount = 0;
        int rowIndexWithMaxOnes = -1;

        // Traverse each row in the matrix
        for (int rowIndex = 0; rowIndex < matrix.length; rowIndex++) {
            // Use binary search to count number of 1s in the current row (sorted (only 0s and 1s))
            int onesCount = countOnesInSortedRow(matrix[rowIndex]);

            if (onesCount > maxOnesCount) {
                maxOnesCount = onesCount;
                rowIndexWithMaxOnes = rowIndex;
            }
        }

        return maxOnesCount == 0 ? -1 : rowIndexWithMaxOnes;
    }

    private int countOnesInSortedRow(int[] row) {
        int firstOneIndex = -1;
        int low = 0, high = row.length - 1;

        // Binary search to find the first occurrence of 1
        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (row[mid] == 0) {
                low = mid + 1; // Move to the right half
            } else {
                firstOneIndex = mid; // Potential answer found
                high = mid - 1; // Look for earlier occurrence on the left
            }
        }

        // If no 1s found, return 0; else return number of 1s = total length - firstOneIndex
        return firstOneIndex == -1 ? 0 : row.length - firstOneIndex;
    }
}


//Better approach

class Solution {
    public int rowWithMax1s(int matrix[][]) {
        int maxOnesCount = 0; 
        int rowIndexWithMaxOnes = -1;

        // Traverse each row one by one
        for (int row = 0; row < matrix.length; row++) {
            int col = matrix[0].length - 1; // Start from the rightmost column of the current row
            int onesCount = 0; // Counter for 1s in the current row

            // Move leftwards while you find 1s
            while (col >= 0 && matrix[row][col] == 1) {
                onesCount++;
                col--;
            }

            // Update the maximum if current row has more 1s
            if (onesCount > maxOnesCount) {
                maxOnesCount = onesCount;
                rowIndexWithMaxOnes = row;
            }
        }

        // If no 1s found in any row, return -1
        return maxOnesCount == 0 ? -1 : rowIndexWithMaxOnes;
    }
}


//Optimal approach

class Solution {
    public int rowWithMax1s(int[][] matrix) {
        int maxRowIndex = -1; // Stores the index of the row with the maximum number of 1s
        int col = matrix[0].length - 1; // Start from the top-right corner of the matrix

        // Traverse each row from top to bottom
        for (int row = 0; row < matrix.length; row++) {
            boolean foundMore1 = false;

            /*
            We don’t reset col after processing each row because:
            col only moves left when we find more 1s in the current row than any previous row.
            Since all rows are sorted in non-decreasing order, if the current row has more leading 1s, it must push the pointer col further left.
            If the current row has equal or fewer 1s, col stays put — and there’s no need to recheck the same or right-side columns again in upcoming rows.
            
            ✅ Example Matrix:
            [
              {0, 0, 1, 1},   → col = 1 after processing
              {0, 1, 1, 1},   → col = 0 after processing
              {1, 1, 1, 1},   → col = -1 after processing
              {0, 0, 0, 1}    → col stays -1, skipped
            ]
            */
            // Move left as long as the current cell contains a 1
            while (col >= 0 && matrix[row][col] == 1) {
                foundMore1 = true;
                col--; // Move left to find more 1s in the current row
            }

            // If this row had more 1s (i.e., we moved left), update the answer
            if (foundMore1) {
                maxRowIndex = row;
            }
        }

        return maxRowIndex;
    }
}
