//Bruteforce Approach

class Solution {
    public static List<Integer> intersectionOfTwoSortedArrayContainingDuplicates(int[] arr1, int[] arr2) {
        int newLen1 = removeDuplicatesFromSortedArray(arr1);
        int newLen2 = removeDuplicatesFromSortedArray(arr2);
        return intersectionOfTwoSortedArrays(arr1, newLen1, arr2, newLen2);
    }

    private static int removeDuplicatesFromSortedArray(int[] arr) {
        int idx = 0;

        for (int i = 0; i < (arr.length - 1); i++) {
            if (arr[i] != arr[i + 1]) {
                arr[idx++] = arr[i];
            }
        }

        arr[idx++] = arr[arr.length - 1];

        return idx;
    }

    private static List<Integer> intersectionOfTwoSortedArrays(int[] arr1, int m, int[] arr2, int n) {
        List<Integer> intersection = new ArrayList<>();
        int i = 0, j = 0;

        while (i < m && j < n) {
            if (arr1[i] == arr2[j]) {
                intersection.add(arr1[i]);
                i++;
                j++;
            } else if (arr1[i] < arr2[j]) {
                i++;
            } else {
                j++;
            }
        }

        return intersection;
    }
}


// Better Approach

class Solution {
    public static List<Integer> intersectionOfTwoSortedArrayContainingDuplicates(int[] arr1, int[] arr2) {
        Set<Integer> arr2UniqueElements = new HashSet<>();
        List<Integer> intersection = new ArrayList<>();

        for (int val : arr2) {
            arr2UniqueElements.add(val);
        }

        for (int val : arr1) {
            if (arr2UniqueElements.contains(val)) {
                intersection.add(val);
                arr2UniqueElements.remove(val);
            }
        }

        return intersection;
    }
}


// Optimal Approach

class Solution {
    public static List<Integer> intersectionOfTwoSortedArraysContainingDuplicates(int[] arr1, int[] arr2) {
        int i = 0, j = 0, prev1 = Integer.MIN_VALUE, prev2 = Integer.MIN_VALUE;
        List<Integer> intersection = new ArrayList<>();

        while (i < arr1.length && j < arr2.length) {
            while (i < arr1.length && prev1 == arr1[i]) {
                i++;
            }

            while (j < arr2.length && prev2 == arr2[j]) {
                j++;
            }

            if (i < arr1.length && j < arr2.length) {
                if (arr1[i] == arr2[j]) {
                    intersection.add(arr1[i]);
                    prev1 = arr1[i++];
                    prev2 = arr2[j++];
                } else if (arr1[i] < arr2[j]) {
                    prev1 = arr1[i++];
                } else {
                    prev2 = arr2[j++];
                }
            }
        }

        return intersection;
    }
}
