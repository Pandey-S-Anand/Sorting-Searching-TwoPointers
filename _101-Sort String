class Solution {
    // Set of lowercase vowels for quick lookup
    private static final Set<Character> isVowel = Set.of('a', 'e', 'i', 'o', 'u');

    /**
     * Sorts the input string by first separating vowels and consonants, sorting both groups,
     * and then merging them alternately. The merge starts with the type (vowel/consonant)
     * based on the first character of the input string.
     *
     * Example:
     * Input: "banice"
     * Vowels: [a, e, i] -> sorted: [a, e, i]
     * Consonants: [b, n, c] -> sorted: [b, c, n]
     * If input starts with consonant -> Result: b a c e n i
     * Output: "bacen i"
     */
    public String SortedString(String str) {
        // Lists to store separated vowels and consonants
        List<Character> vowels = new ArrayList<>();
        List<Character> consonants = new ArrayList<>();

        // Separate characters into vowels and consonants
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            if (isVowel.contains(ch)) {
                vowels.add(ch);
            } else {
                consonants.add(ch);
            }
        }

        // Sort both lists individually
        Collections.sort(vowels);
        Collections.sort(consonants);

        StringBuilder sortedString = new StringBuilder();

        // Determine the starting group based on the first character
        boolean startWithVowel = isVowel.contains(str.charAt(0));

        int i = 0, j = 0;

        // Merge vowels and consonants alternatively
        while (i < vowels.size() && j < consonants.size()) {
            if (startWithVowel) {
                sortedString.append(vowels.get(i++));
            } else {
                sortedString.append(consonants.get(j++));
            }
            // Alternate between vowel and consonant
            startWithVowel = !startWithVowel;
        }

        // Append remaining vowels, if any
        while (i < vowels.size()) {
            sortedString.append(vowels.get(i++));
        }

        // Append remaining consonants, if any
        while (j < consonants.size()) {
            sortedString.append(consonants.get(j++));
        }

        return sortedString.toString();
    }
}
