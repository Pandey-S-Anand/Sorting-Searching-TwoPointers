//Bruteforce Approach

class Solution {
    public int singleNonDuplicate(int[] arr) {
        // If the array has only one element or the first element is unique
        if (arr.length == 1 || arr[0] != arr[1]) {
            return arr[0];
        }

        for (int i = 1; i < arr.length - 1; i++) {
            if (arr[i] != arr[i - 1] && arr[i] != arr[i + 1]) {
                return arr[i];
            }
        }

        // If the unique element is the last element
        return arr[arr.length - 1];
    }
}


//Optimal Approach
/*
An Efficient Solution can find the required element in O(Log n) time. The idea is to use Binary Search without recursion.
All elements before the required have the first occurrence at even index (0, 2, ..and so on) and the next occurrence at odd index (1, 3, ..and so on). 
*/

//Intuitive Implementation

class Solution {
    public int singleNonDuplicate(int[] arr) {
        if (arr.length == 1) {
            return arr[0];
        }

        int low = 0, high = (arr.length - 1);

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Check if mid is at the boundary and is the single element :For a single element at the boundary, its neighbor will not match it.
            if ((mid == 0 && arr[mid] != arr[mid + 1]) || (mid == arr.length - 1 && arr[mid] != arr[mid - 1])) {
                return arr[mid];
            }

            // Check if mid is the single element : For the single element, neither its previous nor its next neighbor will match it.
            if ((arr[mid] != arr[mid - 1]) && (arr[mid] != arr[mid + 1])) {
                return arr[mid];
            }

            if ((mid % 2) == 0) { // Mid is even
                if (arr[mid] == arr[mid + 1]) {
                    low = mid + 2;
                } else { // single element is present at left of 'mid'
                    high = mid - 1;
                }
            } else { // Mid is Odd
                if (arr[mid] == arr[mid - 1]) {
                    low = mid + 1;
                } else { // single element is present at left of 'mid'
                    high = mid - 1;
                }
            }
        }

        // This return statement will never be reached because array is guaranteed to contain one single element
        return -1;
    }
}


//Optimal Implementation

class Solution {
    public int singleNonDuplicate(int[] arr) {
        if (arr.length == 1) {
            return arr[0];
        }

        int low = 0, high = (arr.length - 1);

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Check if mid is at the boundary and is the single element
            if ((mid == 0 && arr[mid] != arr[mid + 1]) || (mid == arr.length - 1 && arr[mid] != arr[mid - 1])) {
                return arr[mid];
            }

            // Check if mid is the single element
            if ((arr[mid] != arr[mid - 1]) && (arr[mid] != arr[mid + 1])) {
                return arr[mid];
            }

            if ((mid % 2) == 0 && arr[mid] == arr[mid + 1]) { // Mid is even
                low = mid + 2;
            } else if ((mid % 2) == 1 && arr[mid] == arr[mid - 1]) { // Mid is Odd
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }

        // This return statement will never be reached because array is guaranteed to contain one single element
        return -1;
    }
}

/*    
 Index:  0  1  2  3  4  5  6  7  8  9  10  
 arr[]= {1, 1, 3, 3, 5, 5, 7, 8, 8, 9 ,9 }
 Output:  7
                
Index:  0  1  2  3  4  5  6  7  8  9  10  
arr[]= {1, 1, 3, 3, 5, 7, 7, 8, 8 ,9 ,9}
Output:  5
                
Index:  0  1  2  3  4  5  6  7  8  9   10 
arr[]= {1, 1, 3, 5, 5, 8, 8, 9 ,9 ,10 ,10}
Output:  3

Index:   0  1  2  3  4  5  6  7  8  9  10  11  12
arr[] = {1, 1, 3, 3, 5, 5, 7, 7, 8, 9 ,9 ,10 ,10}
Output:  8
                 
Index:   0  1  2  3  4  5  6  7  8  9  10  11  12
arr[] = {1, 1, 3, 3, 5, 5, 7, 8, 8, 9 ,9 ,10 ,10}
Output:  7
                
Index:   0  1  2  3  4  5  6  7  8  9   10  11  12
arr[] = {1, 1, 3, 5, 5, 8, 8, 9 ,9 ,10 ,10 ,12, 12}
Output:  3

Index:   0  1  2  3  4  5  6  7  8  9   10  11  12
arr[] = {1, 2, 2, 5, 5, 8, 8, 9 ,9 ,10 ,10 ,12, 12}
Output:  1

Index:   0  1  2  3  4  5  6  7  8  9   10  11  12
arr[] = {1, 1, 5, 5, 8, 8, 9, 9 ,10 ,10 ,11 ,11, 12}
Output:  1
*/
