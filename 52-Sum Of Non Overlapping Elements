// Bruteforce Approach

class Solution {
    public int sumOfNonOverlapping(int[] arr1, int[] arr2) {
        int sum = 0;

        for (int val : arr1) {
            if (!linearSearch(arr2, val)) {
                sum += val;
            }
        }

        for (int val : arr2) {
            if (!linearSearch(arr1, val)) {
                sum += val;
            }
        }

        return sum;
    }

    public boolean linearSearch(int[] arr, int key) {
        int i = 0, j = (arr.length - 1);

        while (i <= j) {
            if (arr[i] == key || arr[j] == key) {
                return true;
            }

            i++;
            j--;
        }
        return false;// key doesnot exists
    }
}


//Improved Approach

class Solution {
    public int sumOfNonOverlapping(int[] arr1, int[] arr2) {
        int sum = 0;
        Set<Integer> found = new HashSet<>();

        for (int val : arr1) {
            if (!linearSearch(arr2, val)) {
                sum += val;
            } else {
                found.add(val);
            }
        }

        for (int val : arr2) {
            if (!found.contains(val)) {
                sum += val;
            }
        }

        return sum;
    }

    public boolean linearSearch(int[] arr, int key) {
        int i = 0, j = (arr.length - 1);
        while (i <= j) {
            if (arr[i] == key || arr[j] == key) {
                return true;
            }
            i++;
            j--;
        }
        return false;// key doesnot exists
    }
}



//Good Approach

class Solution {
    public static int sumOfNonOverlapping(int[] arr1, int[] arr2) {
        Arrays.sort(arr1);
        Arrays.sort(arr2);
        int sum = 0;

        for (int val : arr1) {
            if (!binarySearch(arr2, val)) {
                sum += val;
            }
        }

        for (int val : arr2) {
            if (!binarySearch(arr1, val)) {
                sum += val;
            }
        }

        return sum;
    }

    public static boolean binarySearch(int[] arr, int key) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                return true;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return false;// key doesnot exists
    }
}


//Better Approach

class Solution {
    public int sumOfNonOverlapping(int[] arr1, int[] arr2) {
        Arrays.sort(arr1);
        Arrays.sort(arr2);

        int sum = 0;
        Set<Integer> found = new HashSet<>();

        for (int val : arr1) {
            if (!binarySearch(arr2, val)) {
                sum += val;
            } else {
                found.add(val);
            }
        }

        for (int val : arr2) {
            if (!found.contains(val)) {
                sum += val;
            }
        }

        return sum;
    }

    public boolean binarySearch(int[] arr, int key) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                return true;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return false;// key doesnot exists
    }
}


//Optimal Approach(Time optimised)

class Solution {
    public int sumOfNonOverlapping(int[] arr1, int[] arr2, int n) {
        int sum = 0;
        Set<Integer> set = new HashSet<>();

        for (int val : arr1) {
            set.add(val);
        }

        for (int val : arr2) {
            if (set.contains(val)) {
                set.remove(val);
            } else {
                set.add(val);
            }
        }

        for (int val : set) {
            sum += val;
        }

        return sum;
    }
}


//Optimal Approach(Space optimised)

class Solution {
    public static int sumOfNonOverlapping(int[] arr1, int[] arr2) {
        Arrays.sort(arr1);
        Arrays.sort(arr2);

        int i = 0, j = 0, sum = 0;

        while (i < arr1.length && j < arr2.length) {
            if (arr1[i] == arr2[j]) {
                i++;
                j++;
            } else {
                int min = Math.min(arr1[i], arr2[j]);

                if (min == arr1[i]) {
                    sum += arr1[i++];
                } else {
                    sum += arr2[j++];
                }
            }
        }

        while (i < n) {
            sum += arr1[i++];
        }

        while (j < n) {
            sum += arr2[j++];
        }

        return sum;
    }
}
