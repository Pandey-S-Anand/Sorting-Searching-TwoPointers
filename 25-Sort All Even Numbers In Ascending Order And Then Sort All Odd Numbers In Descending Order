//Method 1

class Solution {
    public void sortIt(Long arr[]) {
        // Step 1: Move all odd numbers to the beginning while tracking the first even index
        int firstEvenIndex = segregate(arr);  

        // Step 2: Sort the odd part in descending order (from index 0 to firstEvenIndex - 1)
        Arrays.sort(arr, 0, firstEvenIndex, (num1, num2) -> Long.compare(num2, num1));

        // Step 3: Sort the even part in ascending order (from firstEvenIndex to end)
        Arrays.sort(arr, firstEvenIndex, arr.length, (num1, num2) -> Long.compare(num1, num2));
    }

    private int segregate(Long[] arr) {
        /*
        The `oddTracker` pointer tracks the index where the next odd number should be placed.
        Eventually, `oddTracker` ends up pointing to the index of the first even number.
        */
        int oddTracker = 0; 

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] % 2 != 0) {
                // Swap current odd element to the correct position
                swap(arr, i, oddTracker);
                oddTracker++; // Move the pointer forward for the next odd
            }
        }

        return oddTracker; // Points to the first even number
    }

    private void swap(Long[] arr, int i, int j) {
        long temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}



// Method 2 : This method will not work when input array contains negative numbers.

class Solution {
    public void rearrange(int[] arr, int n) {
        // Step 1: Convert all odd numbers to negative. This ensures that odd numbers appear before even numbers when sorted
        for (int i = 0; i < n; i++) {
            if ((arr[i] & 1) == 1) { // Check if the number is odd
                arr[i] *= -1; // Convert odd numbers to negative
            }
        }

        // Step 2: Sort the array.:  Negative odd numbers come first , followed by positive even numbers in ascending order.
        Arrays.sort(arr);

        // Step 3: Convert all elements back to positive.
        /* 
           This restores original values, but now in the required order:
         - Odd numbers in descending order
         - Even numbers in ascending order
         */
        for (int i = 0; i < n; i++) {
            if (arr[i] < 0) {
                arr[i] *= -1;
            }
        }
    }
}
