/*
In this question we will always be having a peak element because arr[-1]=arr[arr.length]= -INFINITY
*/
//Bruteforce Approach

class Solution {
    public int findPeakElement(int[] arr) {
        if (arr.length == 1) {
            return 0;
        }
        
        if (arr[0] > arr[1]){
            return 0;
        }

        if (arr[arr.length - 1] > arr[arr.length - 2]){
            return arr.length - 1;
        }
        
        int i;
        for (i = 1; i < (arr.length - 1); i++){
            if ((arr[i] > arr[i - 1]) && (arr[i] > arr[i + 1])){
                break;
            }
        }

        return i;
    }
}


//Optimal Solution

class Solution {
    public int findPeakElement(int[] arr) {
        if (arr.length == 1) {
            return 0;
        }

        int low = 0, high = arr.length - 1,mid=0;

        while (low <= high) {
            mid = low + (high - low) / 2;

            if ((mid == 0 && arr[mid] > arr[mid + 1]) || (mid == arr.length - 1 && arr[mid] > arr[mid - 1])) {
                break;
            }
            if ((mid > 0 && mid < arr.length - 1) && ((arr[mid] > arr[mid - 1]) && (arr[mid] > arr[mid + 1]))) {
                break;
            } else if ((mid == 0 && arr[mid] < arr[mid + 1]) || ((arr[mid] > arr[mid - 1]) && (arr[mid] < arr[mid + 1]))) {
                low = mid + 1;
            } else { // if ((arr[mid]<arr[mid-1]) && (arr[mid] > arr[mid + 1]))
                high = mid - 1;
            }
        }

        return mid;
    }
}

//Aliter

class Solution {
    public int findPeakElement(int[] arr) {
        if (arr.length == 1) {
            return 0;
        }

        if (arr[0] > arr[1]) { // - INFINITY < arr[0] > arr[1]
            return 0;
        }

        if (arr[arr.length - 1] > arr[arr.length - 2]) { // arr[n-2] < arr[0] > - INFINITY
            return arr.length - 1;
        }

        int low = 1, high = arr.length - 2, mid = 0;

        while (low <= high) {
            mid = low + (high - low) / 2;

            if ((arr[mid] > arr[mid - 1]) && (arr[mid] > arr[mid + 1])) {
                return mid;
            } else if (arr[mid] > arr[mid - 1] && arr[mid] < arr[mid + 1]) {
                low = mid + 1;
            } else { // if (arr[mid]< arr[mid-1] && arr[mid] > arr[mid + 1])
                high = mid - 1;
            }
        }

        return mid;
    }
}

/*
Note:
In binary search (while low <= high), 
the mid value (mid = low + (high - low) / 2) will be equal to 0 if and only if (low = 0 and high = 0) or (low = 0 and high = 1).
Similarly, the mid value will be equal to (arr.length - 1) if and only if (low = arr.length - 1 and high = arr.length - 1).
*/
