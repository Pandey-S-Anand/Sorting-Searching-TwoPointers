//Bruteforce Approach

class Solution {
    public void merge(int[] arr1, int m, int[] arr2, int n) {
        for (int i = 0; i < n; i++) {
            arr1[i + m] = arr2[i];
        }

        Arrays.sort(arr1);
    }
}

// Better Approach

class Solution {
    public void merge(int[] arr1, int m, int[] arr2, int n) {
        for (int i = 0; i < n; i++) {
            arr1[i + m] = arr2[i];
            modifiedInsertionSort(arr1, i + m);
        }
    }

    public void modifiedInsertionSort(int[] arr, int i) {
        int temp = arr[i], j = i - 1;

        while (j >= 0 && arr[j] > temp) {
            arr[j + 1] = arr[j];
            j--;
        }

        arr[j + 1] = temp;
    }
}

// Optimal Approach

class Solution {
    public void merge(int[] arr1, int m, int[] arr2, int n) {
        int i = 0, j = 0, idx = 0;
        int temp[] = new int[m + n];

        while (i < m && j < n) {
            if (arr1[i] <= arr2[j]) {
                temp[idx++] = arr1[i++];
            } else {
                temp[idx++] = arr2[j++];
            }
        }

        while (i < m) {
            temp[idx++] = arr1[i++];
        }

        while (j < n) {
            temp[idx++] = arr2[j++];
        }

        System.arraycopy(temp, 0, arr1, 0, arr1.length);
    }
}
