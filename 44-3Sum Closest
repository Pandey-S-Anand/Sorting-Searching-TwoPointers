//Bruteforce Approach

class Solution {
    public int threeSumClosest(int[] arr, int target) {
        int minDiff = Integer.MAX_VALUE, closestSum = arr[0] + arr[1] + arr[2];

        for (int i = 0; i < arr.length - 2; i++) {
            for (int j = i + 1; j < arr.length - 1; j++) {
                for (int k = j + 1; k < arr.length; k++) {
                    int currSum = (arr[i] + arr[j] + arr[k]);
                    int currDiff = Math.abs(target - currSum);

                    if (currDiff < minDiff) {
                        minDiff = currDiff;
                        closestSum = currSum;
                    }

                    if (minDiff == 0) {
                        return currSum;
                    }
                }
            }
        }

        return closestSum;
    }
}


//Optimal Solution

class Solution {
    public int threeSumClosest(int[] arr, int target) {
        int minDiff = Integer.MAX_VALUE, closestSum = arr[0] + arr[1] + arr[2];
        Arrays.sort(arr);

        for (int i = 0; i < arr.length - 2; i++) {
            int j = i + 1;
            int k = arr.length - 1;

            while (j < k) {
                int currSum = (arr[i] + arr[j] + arr[k]);
                int currDiff = Math.abs(target - currSum);

                if (currDiff < minDiff) {
                    minDiff = currDiff;
                    closestSum = currSum;
                }

                if (minDiff == 0) {
                    return currSum;
                }

                if (currSum < target) {
                    j++;
                } else {// (currSum>target)
                    k--;
                }
            }
        }

        return closestSum;
    }
}
