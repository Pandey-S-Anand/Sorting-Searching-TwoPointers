//Bruteforce approach

class Solution {
    /*
    * Input intervals:
    * [[34335, 39239], [15875, 91969], [29673, 66453], [53548, 69161], [40618, 93111]]
    *
    * Dry Run:
    *
    * i = 0 (outer loop), interval [34335,39239]:
    * - Compared with [15875,91969] → Covered → count++
    * - Compared with [29673,66453] → Covered → count++
    * - ❗ Problem: [34335,39239] was counted twice (should only be counted once).
    *
    * i = 1 (outer loop), interval [15875,91969]:
    * - Not covered by any other interval → no change.
    *
    * i = 2 (outer loop), interval [29673,66453]:
    * - Compared with [15875,91969] → Covered → count++
    *
    * i = 3 (outer loop), interval [53548,69161]:
    * - Compared with [15875,91969] → Covered → count++
    * - Compared with [40618,93111] → Covered → count++
    * - ❗ Problem: [53548,69161] was counted twice (should only be counted once).
    *
    * i = 4 (outer loop), interval [40618,93111]:
    * - Not covered by any other interval → no change.
    *
    * Final:
    * - Total intervals = 5
    * - Counted intervals (with duplicates) = 5
    * - Expected covered intervals = 3
    * - Hence wrong answer: because **some intervals were counted multiple times**.
    *
    * Root Cause:
    * - When an interval is covered by multiple other intervals, you are counting it multiple times (once per covering interval).
    * - We should only count each interval **at most once** even if multiple intervals cover it.
    *
    * Important:
    * - ❗ This is exactly why we should **use a flag** inside the inner loop:
    *   → If an interval is covered even once, mark it (set flag = true) and **break** out of the inner loop immediately.
    *   → After the inner loop finishes, if flag == true, **then** increment the count once.
    * - This avoids double counting and gives the correct result.
    */

    public int removeCoveredIntervals(int[][] intervals) {
        int coveredIntervals = 0; // count of intervals that are fully covered by others

        for (int i = 0; i < intervals.length; i++) {
            boolean isCovered = false; // flag to check if current interval is covered

            for (int j = 0; j < intervals.length; j++) {
                //Check if interval1[i] is completely inside interval2[j]
                if (i != j && isCovered(intervals[i], intervals[j])) {
                    isCovered = true;
                    break; // No need to check further, once covered
                }
            }

            if (isCovered) {
                coveredIntervals++; // Increment the count of covered intervals
            }
        }

        // Total intervals - covered intervals = remaining intervals
        return intervals.length - coveredIntervals;
    }

    private boolean isCovered(int[] interval1, int[] interval2) {
        return interval1[0] >= interval2[0] && interval1[1] <= interval2[1];
    }
}


//Optimal approach

class Solution {
    public int removeCoveredIntervals(int[][] intervals) {
        // Step 1: Sort intervals by start time (ascending). If start times are equal, sort by end time (descending).
        Arrays.sort(intervals, (currentInterval, nextInterval) -> {
            if (currentInterval[0] != nextInterval[0]) {
                return Integer.compare(currentInterval[0], nextInterval[0]); // Sort by start time
            }
            // Important testcase: [[1,2],[1,4],[3,4]]
            return Integer.compare(nextInterval[1], currentInterval[1]); // If start times are same, sort by end time (descending)
        });

        int[] lastNonCoveredInterval = intervals[0]; // Stores the last non-covered interval
        int coveredIntervalCount = 0; // To count the number of covered intervals

        // Step 2: Iterate through the intervals starting from the second one
        for (int i = 1; i < intervals.length;) {
            int[] currentInterval = intervals[i];

            // Step 3: Check if the current interval is covered by the last non-covered interval
            if (isIntervalCovered(currentInterval, lastNonCoveredInterval)) {
                // If current interval is covered, increment covered count and skip it
                i++;
                coveredIntervalCount++;
            } else {
                // If not covered, update the last non-covered interval to be the current one
                lastNonCoveredInterval = currentInterval;
                i++; // Move to the next interval
            }
        }

        // Step 4: Return the result as the total number of intervals minus the covered ones
        return intervals.length - coveredIntervalCount;
    }

    private boolean isIntervalCovered(int[] currentInterval, int[] lastNonCoveredInterval) {
        return currentInterval[0] >= lastNonCoveredInterval[0] && currentInterval[1] <= lastNonCoveredInterval[1];
    }
}
