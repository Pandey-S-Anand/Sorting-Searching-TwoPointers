//Bruteforce Approach

class Solution {
    public int searchInsert(int[] arr, int target) {
        int index = binarySearch(arr, target);

        if (index != -1) {
            return index;
        }

        int[] newArr = new int[arr.length + 1];

        System.arraycopy(arr, 0, newArr, 0, arr.length);
        newArr[arr.length] = target;
        Arrays.sort(newArr);

        return binarySearch(newArr, target);
    }

    private int binarySearch(int[] arr, int key) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                return mid;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return -1;// key doesnot exists
    }
}


//Better Approach

class Solution {
    public int searchInsert(int[] arr, int target) {
        int index = binarySearch(arr, target);

        if (index != -1) {
            return index;
        }

        // Using insertion sort logic

        int i = arr.length - 1;
        while (i >= 0 && arr[i] > target) {
            i--;
        }

        return i + 1;
    }

    private int binarySearch(int[] arr, int key) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == key) {
                return mid;
            } else if (key < arr[mid]) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        return -1;// key doesnot exists
    }
}


//Optimal Approach


class Solution {
    public int searchInsert(int[] arr, int target) {
        return lowerBound(arr, target);
    }

    private int lowerBound(int[] arr, int x) {
        int low = 0, high = arr.length - 1, lowerBound = arr.length;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == x) {
                return mid;
            }

            if (arr[mid] > x) {
                lowerBound = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return lowerBound;
    }
}


//Aliter

class Solution {
    public int searchInsert(int[] arr, int target) {
        return lowerBound(arr, target);
    }

    private int lowerBound(int[] arr, int x) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == x) {
                return mid;
            }

            if (arr[mid] > x) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return low;
    }
}


//Aliter

class Solution {
    public int searchInsert(int[] arr, int target) {
        return lowerBound(arr, target);
    }

    private int lowerBound(int[] arr, int x) {
        int low = 0, high = arr.length - 1, lowerBound = arr.length;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] >= x) {
                lowerBound = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return lowerBound;
    }
}


//Aliter

class Solution {
    public int searchInsert(int[] arr, int target) {
        return lowerBound(arr, target);
    }

    private int lowerBound(int[] arr, int x) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] >= x) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return low;
    }
}


//Aliter

class Solution {
    public int searchInsert(int[] arr, int target) {
        return lowerBound(arr, target);
    }

    private int lowerBound(int[] arr, int x) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == x) {
                return mid;
            }

            if (arr[mid] > x) {
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }

        return low;
    }
}
