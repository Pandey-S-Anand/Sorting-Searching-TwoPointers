//Bruteforce Approach

class Solution {
    public int kthElement(int arr1[], int arr2[], int k) {
        int i = 0, j = 0, currentValue = 0;

        for (int count = 1; count <= k; count++) {
            if (i < arr1.length && j < arr2.length) {
                if (arr1[i] <= arr2[j]) {
                    currentValue = arr1[i++];
                } else {
                    currentValue = arr2[j++];
                }
            } else if (i < arr1.length) {
                currentValue = arr1[i++];
            } else { // if (j < arr2.length)
                currentValue = arr2[j++];
            }
        }

        return currentValue;
    }
}


//Optimal Approach

class Solution {
    public int kthElement(int arr1[], int arr2[], int k) {
        if (arr1.length > arr2.length) {
            return kthElement(arr2, arr1,k); // Ensure binary search is performed on the smaller array
        }

        /*
          'low' is initialized to 0 to consider the scenario where no elements from arr1 are included in the left part.
          'high' is initialized to arr1.length to consider the scenario where all elements from arr1 are included in the left part.
        */
        int low = 0, high = arr1.length;

        while (low <= high) {
            int elementsChosenFromArr1ForLeftPart = low + (high - low) / 2;
              // Below line ensures that the total number of elements in the left part of the combined array is exactly k.
              int elementsChosenFromArr2ForLeftPart = k - elementsChosenFromArr1ForLeftPart;
            
              if(elementsChosenFromArr2ForLeftPart < 0){
                  // Too many elements taken from arr1, decrease contribution from arr1 (you can't take -ve elements from arr2)
                  high=elementsChosenFromArr1ForLeftPart-1;
                  continue;
              }
              
              if(elementsChosenFromArr2ForLeftPart>arr2.length){
                  // Trying to pick more elements from arr2 than it has — increase elements from arr1, which will automatically reduce arr2’s share in the left part
                  low=elementsChosenFromArr1ForLeftPart+1;
                  continue;
              }
              
            /* 
               If you choose x elements from arr1 for the left half, then the index of the xth element is x - 1, 
               and that element is maxInLeftPartFromArr1.
               If we pick 0 elements from arr1 for the left half, then there is no max element on the left side of arr1.
               To ensure correct comparison, we use Integer.MIN_VALUE (smallest possible value) to safely ignore this part.
            */
            int maxInLeftPartFromArr1 = (elementsChosenFromArr1ForLeftPart == 0) ? Integer.MIN_VALUE
                    : arr1[elementsChosenFromArr1ForLeftPart - 1];

            /* 
             If you choose x elements from arr2 for the left half, then the index of the xth element is x - 1,
             and that element is maxInLeftPartFromArr2.
             
             If we pick 0 elements from arr2 for the left half, we use Integer.MIN_VALUE to represent "nothing on left".
             This case occurs when all the elements needed for the left half have already been chosen from arr1,
             so there is no room left to pick any elements from arr2 for the left half.
            */
            int maxInLeftPartFromArr2 = (elementsChosenFromArr2ForLeftPart == 0) ? Integer.MIN_VALUE
                    : arr2[elementsChosenFromArr2ForLeftPart - 1];

            /* 
               If x elements are chosen from arr1 for the left half, then the element at index x 
               will be the smallest in the right part, i.e., minInRightPartFromArr1.
              
              Similarly, if we pick all elements from arr2 into the left half, right part of arr2 is empty.
              Again, use Integer.MAX_VALUE to represent "nothing on right".
            */
            int minInRightPartFromArr1 = (elementsChosenFromArr1ForLeftPart == arr1.length) ? Integer.MAX_VALUE
                    : arr1[elementsChosenFromArr1ForLeftPart];

            /*
             If x elements are chosen from arr2 for the left half, then the element at index x 
             will be the smallest in the right part, i.e., minInRightPartFromArr2.
            
             We use Integer.MAX_VALUE when all elements from arr2 have been chosen for the left half.
             This situation arises when 0 elements are picked from arr1 for the left half — 
             meaning all required elements for the left side must come from arr2.
             As a result, there are no elements left in arr2 to contribute to the right half,
             so we use Integer.MAX_VALUE to represent an "empty right half" safely in comparisons.
            */
            int minInRightPartFromArr2 = (elementsChosenFromArr2ForLeftPart == arr2.length) ? Integer.MAX_VALUE
                    : arr2[elementsChosenFromArr2ForLeftPart];

            // Find the maximum element in the left half
            int maxInLeftHalf = Math.max(maxInLeftPartFromArr1, maxInLeftPartFromArr2);

            // Find the minimum element in the right half
            int minInRightHalf = Math.min(minInRightPartFromArr1, minInRightPartFromArr2);

            if (maxInLeftHalf <= minInRightHalf) {
               return maxInLeftHalf;
            }
            
            if (maxInLeftPartFromArr1 > minInRightPartFromArr2) {
                // We have chosen too many elements from arr1 for the left half,  so we need to reduce the count by moving 'high' to the left.
                high = elementsChosenFromArr1ForLeftPart - 1;
            } else if (maxInLeftPartFromArr2 > minInRightPartFromArr1) {
                /* 
                 Too many elements have been chosen from arr2 for the left half.
                 To fix this, we increase the number of elements chosen from arr1, 
                 which effectively reduces elements chosen from arr2 for the left half.
                 */
                low = elementsChosenFromArr1ForLeftPart + 1;
            }

        }

        // If input arrays are sorted and k is valid, this line should never execute
        return -1;
    }
}
