//Bruteforce Approach

class Solution {
    public int findKRotation(List<Integer> arr) {
      /**
       * Finds the number of times a sorted array has been right rotated.
       * The number of right rotations equals the index of the minimum element in the array.
       */
        return findMinIndex(arr);
    }
    
    private int findMinIndex(List<Integer> arr) {
        int minIndex = 0; // Assume first element is minimum initially
        
        // Traverse array to find index of minimum element
        for (int i = 1; i < arr.size(); i++) {
            if (arr.get(i) < arr.get(minIndex)) {
                minIndex = i; // Update minimum element index
            }
        }
        
        return minIndex;
    }
}


//Optimal Approach

class Solution {
    public int findKRotation(List<Integer> arr) {
        /*
         * This method returns the number of times a sorted array has been right-rotated.
         *
         * In a rotated sorted array:
         *   - The index of the smallest element gives us the number of rotations.
         *   - For example:
         *       ➤ Original sorted:        [1, 2, 3, 4, 5] → Rotation count = 0
         *       ➤ Rotated 1 time:         [5, 1, 2, 3, 4] → Smallest element at index 1 → Rotation count = 1
         *       ➤ Rotated 3 times:        [3, 4, 5, 1, 2] → Smallest element at index 3 → Rotation count = 3
         *
         * So, we simply find the index of the minimum element (which always comes after the pivot).
         */
        return findMinIndex(arr); // The index of the smallest element = number of right rotations
    }

    private int findMinIndex(List<Integer> arr) {
        /*
         * Edge Case 1: Array has only one element → that is the smallest
         * Edge Case 2: Array is already sorted (not rotated) → first element is the smallest
         */
        if (arr.size() == 1 || arr.get(0) < arr.get(arr.size() - 1)) {
            return 0;
        }

        /*
         * Otherwise, the array is rotated.
         * We locate the pivot (the largest element), and the element after it will be the minimum.
         * Return index of (pivot + 1).
         */
        int pivotIndex = findPivotIndex(arr);
        return pivotIndex + 1;
    }

    private int findPivotIndex(List<Integer> arr) {
        int low = 0, high = arr.size() - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            // Check if mid is the pivot (i.e., greater than its next element)
            if (arr.get(mid) > arr.get(mid + 1)) {
                return mid;
            }

            // If left part is sorted, pivot must be on the right
            if (low == mid || arr.get(low) < arr.get(mid)) {
                low = mid + 1;
            } else {
                // Right part is sorted, pivot must be on the left
                high = mid - 1;
            }
        }

        // Should never reach here for a valid rotated sorted array
        return -1;
    }
}
