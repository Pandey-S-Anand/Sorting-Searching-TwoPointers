// Method 1 (Order of Appearence is Maintained) // TC: O(n), SC: O(n)

class Solution {
    public void rearrange(int arr[], int n) {
        int index = 0;
        int aux[] = new int[n];

        // Step 1: Collect all negative numbers
        for (int num : arr) {
            if (num < 0) {
                aux[index++] = num;
            }
        }

        // Step 2: Collect all non-negative numbers (positive or zero)
        for (int num : arr) {
            if (num >= 0) {
                aux[index++] = num;
            }
        }

        // Copy the rearranged elements back to the original array
        System.arraycopy(aux, 0, arr, 0, n);
    }
}



// Method 2 (Order of Appearence is Maintained) // TC: O(n ^ 2), SC: O(1)

class Solution {
    /**
     * Rearranges the array in-place so that all negative numbers appear before all positive numbers,
     * while maintaining the relative order of appearance of both negative and positive elements.
     *
     *
     * Dry Run Example:
     * -------------------
     * Input: [3, -1, 2, -2, -5, 4]
     * 
     * ➤ Step-by-step Execution:
     * Initial Array: [3, -1, 2, -2, -5, 4]
     *
     * i = 0 → 3 > 0 → skip
     * i = 1 → -1 < 0 → shift(0,1)
     *        - Move 3 → index 1
     *        - Insert -1 → index 0 → [-1, 3, 2, -2, -5, 4] → next = 1
     *
     * i = 2 → 2 > 0 → skip
     * i = 3 → -2 < 0 → shift(1,3)
     *        - Move 3, 2 → index 2,3
     *        - Insert -2 → index 1 → [-1, -2, 3, 2, -5, 4] → next = 2
     *
     * i = 4 → -5 < 0 → shift(2,4)
     *        - Move 3, 2 → index 3,4
     *        - Insert -5 → index 2 → [-1, -2, -5, 3, 2, 4] → next = 3
     *
     * i = 5 → 4 > 0 → skip
     *
     * ➤ Final Array: [-1, -2, -5, 3, 2, 4]
     */
    public void rearrange(int arr[], int n) {
        int nextNegativeElementIndex = 0;

        for (int i = 0; i < n; i++) {
            if (arr[i] < 0) {
                rightShiftBy1(arr, nextNegativeElementIndex, i);
                nextNegativeElementIndex++;
            }
        }
        // At the end, all negatives are placed at the front in original relative order.
    }

    /**
     * Shifts elements between indices `start` and `end` (inclusive) one position to the right,
     * and inserts `arr[end]` at index `start`.
     *
     * Example: 
     * Before: [a, b, c, d, e] and calling rightShiftBy1(arr, 1, 3)
     * After:  [a, d, b, c, e]
     */
    private void rightShiftBy1(int[] arr, int start, int end) {
        int temp = arr[end];
        for (int i = end; i > start; i--) {
            arr[i] = arr[i - 1];
        }
        arr[start] = temp;
    }
}


// Method 3 (Order of Appearence is Maintained) // TC: O(n log n), SC: O(n)
/*
Merge method of standard merge sort algorithm can be modified to solve this problem. While merging two sorted halves say left and right, 
we need to merge in such a way that negative part of left and right sub-array is copied first followed by non-negative part of left and right sub-array.
*/

class Solution {
    public void rearrange(int arr[], int n) {
        mergeSort(arr, 0, arr.length - 1);
    }

    private void mergeSort(int[] arr, int lb, int ub) {
        if (lb < ub) {
            int mid = lb + (ub - lb) / 2;
            mergeSort(arr, lb, mid);
            mergeSort(arr, (mid + 1), ub);
            modifiedMerge(arr, lb, mid, ub);
        }
    }

    private void modifiedMerge(int[] arr, int lb, int mid, int ub) {
        int leftSize = (mid - lb + 1), rightSize = (ub - mid);
        int[] left = new int[leftSize];
        int[] right = new int[rightSize];

        for (int i = 0; i < leftSize; i++) {
            left[i] = arr[lb + i];
        }

        for (int i = 0; i < rightSize; i++) {
            right[i] = arr[mid + 1 + i];
        }

        int i = 0, j = 0, k = lb;

        // copy negative elements of left sublist
        while (i < leftSize && left[i] < 0) {
            arr[k++] = left[i++];
        }

        // copy negative elements of right sublist
        while (j < rightSize && right[j] < 0) {
            arr[k++] = right[j++];
        }

        // copy positive elements of left sublist
        while (i < leftSize) {
            arr[k++] = left[i++];
        }

        // copy positive elements of right sublist
        while (j < rightSize) {
            arr[k++] = right[j++];
        }
    }
}
