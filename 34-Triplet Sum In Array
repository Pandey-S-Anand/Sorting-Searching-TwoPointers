//Bruteforce Approach

class Solution {
    public static boolean hasTripletSum(int arr[], int target) {
        // Try all combinations of triplets
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1; j < arr.length; j++) {
                for (int k = j + 1; k < arr.length; k++) {
                    // Check if the sum of current triplet equals target
                    if (arr[i] + arr[j] + arr[k] == target) {
                        return true;
                    }
                }
            }
        }

        return false; // No such triplet found
    }
}


//Optimal Approach

class Solution {
    public static boolean hasTripletSum(int arr[], int target) {
        // Sort the array to apply two-pointer technique
        Arrays.sort(arr);

        // Fix one element and find the other two using two pointers
        for (int i = 0; i < arr.length - 2; i++) {
            int j = i + 1;
            int k = arr.length - 1;
            int remainingTarget = target - arr[i]; // We now need two numbers that sum to this

            // Use two pointers to find if a pair exists that adds up to remainingTarget
            while (j < k) {
                int sum = arr[j] + arr[k];

                if (sum == remainingTarget) {
                    return true; // Triplet found
                }

                if (sum < remainingTarget) {
                    j++; // Need a larger sum, move left pointer rightward
                } else {
                    k--; // Need a smaller sum, move right pointer leftward
                }
            }
        }

        return false; // No triplet found that adds up to the target
    }
}
