//Bruteforce Approach 

class Solution {
    public int missingNumberInSortedArray(int[] arr) {
        int i;

        // Loop through the array
        for (i = 0; i < arr.length; i++) {
            // If value doesn't match expected (i + 1), then that number is missing
            if (arr[i] != (i + 1)) {
                break;
            }
        }

        // Return the missing number (expected at position i)
        return i + 1;
    }
}


// Optimal Approach

public class Solution{
    private int findMissingNumberInSortedArray(int[] arr) {
        int low = 0;
        int high = arr.length - 1;

        // Binary search loop to find the first index where arr[index] != index + 1
        while (low <= high) {
            int mid = low + (high - low) / 2;

            // If value matches its expected value (index + 1), the missing number is on the right
            if (arr[mid] == mid + 1) {
                low = mid + 1;
            } else {
                // If we're at the first element or the previous element is correct, then current position is where the number is missing.
                if (mid == 0 || arr[mid - 1] == mid) {
                    return mid + 1;  // Return the expected number at this position
                }

                // Otherwise, the missing number is on the left half
                high = mid - 1;
            }
        }

        // If no missing number is found (ideally shouldn't reach here for valid input)
        return -1;
    }
}
