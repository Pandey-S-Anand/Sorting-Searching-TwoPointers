//Bruteforce approach

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        // Step 1: Flatten the 2D matrix into a 1D sorted array
        int[] sorted = new int[rows * cols];
        int index = 0;

        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                sorted[index++] = matrix[row][col];
            }
        }

        // Step 2: Perform binary search on the 1D sorted array
        return binarySearch(sorted, target);
    }

    private boolean binarySearch(int[] arr, int target) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                return true; // Found the target
            } else if (arr[mid] < target) {
                low = mid + 1; // Search in the right half
            } else {
                high = mid - 1; // Search in the left half
            }
        }

        return false; // Target not found
    }
}


// Optimal approach: Binary Search in a 2D Matrix

/**
 * Given a 3 x 4 matrix:
 *
 *      0   1   2   3
 *    +---+---+---+---+
 *  0 | 0 | 1 | 2 | 3 |
 *    +---+---+---+---+
 *  1 | 4 | 5 | 6 | 7 |
 *    +---+---+---+---+
 *  2 | 8 | 9 |10 |11 |
 *    +---+---+---+---+
 *
 * Index Mapping (2D to 1D):
 * -----------------------------------
 * Formula:  1D_index = row * cols + col
 *
 * (0,0) → 0    (0,1) → 1    (0,2) → 2    (0,3) → 3
 * (1,0) → 4    (1,1) → 5    (1,2) → 6    (1,3) → 7
 * (2,0) → 8    (2,1) → 9    (2,2) →10    (2,3) →11
 *
 * Reverse Mapping (1D to 2D):
 * -----------------------------------
 * Given mid index in 1D array:
 *      row = mid / cols
 *      col = mid % cols
 *
 * Example:
 *      mid = 5  → (5 / 4, 5 % 4) → (1,1)
 *      mid = 9  → (9 / 4, 9 % 4) → (2,1)
 *
 * Binary Search Approach:
 * -----------------------------------
 * - Treats the matrix as a virtual 1D sorted array.
 * - Searches for the target efficiently using O(log(m * n)) time.
 * - No extra space required, O(1) space complexity.
 */

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length, cols = matrix[0].length;
        int low = 0, high = rows * cols - 1;

        // Perform binary search on the matrix as if it's a 1D array
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int midValue = matrix[mid / cols][mid % cols]; // Convert 1D index to 2D coordinates

            if (midValue == target) {
                return true; // Found the target
            } else if (midValue < target) {
                low = mid + 1; // Search in the right half
            } else {
                high = mid - 1; // Search in the left half
            }
        }

        return false; // Target not found
    }
}
