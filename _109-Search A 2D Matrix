//Bruteforce approach

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length;
        int cols = matrix[0].length;

        // Step 1: Flatten the 2D matrix into a 1D sorted array
        int[] sorted = new int[rows * cols];
        int index = 0;

        for (int row = 0; row < rows; row++) {
            for (int col = 0; col < cols; col++) {
                sorted[index++] = matrix[row][col];
            }
        }

        // Step 2: Perform binary search on the 1D sorted array
        return binarySearch(sorted, target);
    }

    private boolean binarySearch(int[] arr, int target) {
        int low = 0, high = arr.length - 1;

        while (low <= high) {
            int mid = low + (high - low) / 2;

            if (arr[mid] == target) {
                return true; // Found the target
            } else if (arr[mid] < target) {
                low = mid + 1; // Search in the right half
            } else {
                high = mid - 1; // Search in the left half
            }
        }

        return false; // Target not found
    }
}


//Optimal approach

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int rows = matrix.length, cols = matrix[0].length;
        int low = 0, high = rows * cols - 1;

        // Perform binary search on the matrix as if it's a 1D array
        while (low <= high) {
            int mid = low + (high - low) / 2;
            int midValue = matrix[mid / cols][mid % cols]; // Convert 1D index to 2D coordinates

            if (midValue == target) {
                return true; // Found the target
            } else if (midValue < target) {
                low = mid + 1; // Search in the right half
            } else {
                high = mid - 1; // Search in the left half
            }
        }

        return false; // Target not found
    }
}
